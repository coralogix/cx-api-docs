openapi: 3.0.0
info:
  title: ''
  version: 1.0.0
paths:
  /aaa/api-keys/v3:
    post:
      externalDocs:
        url: ''
      operationId: ApiKeysService_CreateApiKey
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: This data structure is used to create an API key.
              properties:
                hashed:
                  example: true
                  type: boolean
                keyPermissions:
                  $ref: '#/components/schemas/CreateApiKeyRequest.KeyPermissions'
                name:
                  example: my_api_key
                  type: string
                owner:
                  $ref: '#/components/schemas/Owner'
              required:
                - name
                - owner
                - keyPermissions
                - hashed
              title: Create Api Key Request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Create API Key
      tags:
        - API Keys Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/aaa/api-keys/v3';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"hashed":true,"keyPermissions":{"permissions":[["read_logs"]],"presets":[["my_preset"]]},"name":"my_api_key","owner":{"userId":"string"}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/aaa/api-keys/v3"


            payload = {
                "hashed": True,
                "keyPermissions": {
                    "permissions": [["read_logs"]],
                    "presets": [["my_preset"]]
                },
                "name": "my_api_key",
                "owner": {"userId": "string"}
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/aaa/api-keys/v3 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"hashed":true,"keyPermissions":{"permissions":[["read_logs"]],"presets":[["my_preset"]]},"name":"my_api_key","owner":{"userId":"string"}}'
      description: No description available
  /aaa/api-keys/v3/send_data:
    get:
      externalDocs:
        url: ''
      operationId: ApiKeysService_GetSendDataApiKeys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSendDataApiKeysResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get "Send Data" API Keys
      tags:
        - API Keys Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/api-keys/v3/send_data';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/api-keys/v3/send_data"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/aaa/api-keys/v3/send_data \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /aaa/api-keys/v3/{key_id}:
    get:
      externalDocs:
        url: ''
      operationId: ApiKeysService_GetApiKey
      parameters:
        - in: path
          name: key_id
          required: true
          schema:
            example: my_key_id
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiKeyResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get API Key
      tags:
        - API Keys Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/api-keys/v3/my_key_id';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/api-keys/v3/my_key_id"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/aaa/api-keys/v3/my_key_id \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: ApiKeysService_UpdateApiKey
      parameters:
        - in: path
          name: key_id
          required: true
          schema:
            example: my_key_id
            type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: This data structure is used to update an API key.
              properties:
                isActive:
                  example: true
                  type: boolean
                newName:
                  example: my_new_name
                  type: string
                permissions:
                  $ref: '#/components/schemas/UpdateApiKeyRequest.Permissions'
                presets:
                  $ref: '#/components/schemas/Presets'
              required:
                - keyId
              title: Update Api Key Request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApiKeyResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Update API Key
      tags:
        - API Keys Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/api-keys/v3/my_key_id';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"isActive":true,"newName":"my_new_name","permissions":{"permissions":["string"]},"presets":{"presets":["string"]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/api-keys/v3/my_key_id"


            payload = {
                "isActive": True,
                "newName": "my_new_name",
                "permissions": {"permissions": ["string"]},
                "presets": {"presets": ["string"]}
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/aaa/api-keys/v3/my_key_id \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"isActive":true,"newName":"my_new_name","permissions":{"permissions":["string"]},"presets":{"presets":["string"]}}'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: ApiKeysService_DeleteApiKey
      parameters:
        - in: path
          name: key_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteApiKeyResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Delete API Key
      tags:
        - API Keys Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/api-keys/v3/%7Bkey_id%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/api-keys/v3/%7Bkey_id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/aaa/api-keys/v3/%7Bkey_id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /aaa/team-groups/v1:
    get:
      externalDocs:
        url: ''
      operationId: TeamPermissionsMgmtService_GetTeamGroups
      parameters:
        - in: query
          name: team_id
          required: false
          schema:
            properties:
              id:
                format: int64
                type: integer
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTeamGroupsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Team Groups
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1?team_id=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1"


            querystring = {"team_id":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1?team_id=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: TeamPermissionsMgmtService_UpdateTeamGroup
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                Request to modify an existing team group's details, including
                its name, description, roles, users, and scope settings.
              properties:
                description:
                  type: string
                externalId:
                  type: string
                groupId:
                  $ref: '#/components/schemas/TeamGroupId'
                groupType:
                  $ref: '#/components/schemas/GroupType'
                name:
                  type: string
                nextGenScopeId:
                  type: string
                roleUpdates:
                  $ref: '#/components/schemas/RoleUpdates'
                scopeFilters:
                  $ref: '#/components/schemas/ScopeFilters'
                userUpdates:
                  $ref: '#/components/schemas/UserUpdates'
              title: UpdateTeamGroupRequest
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTeamGroupResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Update Team Group
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"description":"string","externalId":"string","groupId":{"id":0},"groupType":"GROUP_TYPE_UNSPECIFIED","name":"string","nextGenScopeId":"string","roleUpdates":{"roleIds":[{"id":0}]},"scopeFilters":{"applications":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}],"subsystems":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}]},"userUpdates":{"userIds":[{"id":"string"}]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1"


            payload = {
                "description": "string",
                "externalId": "string",
                "groupId": {"id": 0},
                "groupType": "GROUP_TYPE_UNSPECIFIED",
                "name": "string",
                "nextGenScopeId": "string",
                "roleUpdates": {"roleIds": [{"id": 0}]},
                "scopeFilters": {
                    "applications": [
                        {
                            "filterType": "FILTER_TYPE_UNSPECIFIED",
                            "term": "string"
                        }
                    ],
                    "subsystems": [
                        {
                            "filterType": "FILTER_TYPE_UNSPECIFIED",
                            "term": "string"
                        }
                    ]
                },
                "userUpdates": {"userIds": [{"id": "string"}]}
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"description":"string","externalId":"string","groupId":{"id":0},"groupType":"GROUP_TYPE_UNSPECIFIED","name":"string","nextGenScopeId":"string","roleUpdates":{"roleIds":[{"id":0}]},"scopeFilters":{"applications":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}],"subsystems":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}]},"userUpdates":{"userIds":[{"id":"string"}]}}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: TeamPermissionsMgmtService_CreateTeamGroup
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                Request to create a new team group with specified name,
                description, roles, users, and optional scope filters. Can be
                associated with a specific team or the authenticated team.
              properties:
                description:
                  type: string
                externalId:
                  type: string
                groupType:
                  $ref: '#/components/schemas/GroupType'
                name:
                  type: string
                nextGenScopeId:
                  type: string
                roleIds:
                  items:
                    $ref: '#/components/schemas/RoleId'
                  type: array
                scopeFilters:
                  $ref: '#/components/schemas/ScopeFilters'
                teamId:
                  $ref: '#/components/schemas/permissions.v1.TeamId'
                userIds:
                  items:
                    $ref: '#/components/schemas/v1.UserId'
                  type: array
              title: CreateTeamGroupRequest
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTeamGroupResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Create Team Group
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"description":"string","externalId":"string","groupType":"GROUP_TYPE_UNSPECIFIED","name":"string","nextGenScopeId":"string","roleIds":[{"id":0}],"scopeFilters":{"applications":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}],"subsystems":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}]},"teamId":{"id":0},"userIds":[{"id":"string"}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1"


            payload = {
                "description": "string",
                "externalId": "string",
                "groupType": "GROUP_TYPE_UNSPECIFIED",
                "name": "string",
                "nextGenScopeId": "string",
                "roleIds": [{"id": 0}],
                "scopeFilters": {
                    "applications": [
                        {
                            "filterType": "FILTER_TYPE_UNSPECIFIED",
                            "term": "string"
                        }
                    ],
                    "subsystems": [
                        {
                            "filterType": "FILTER_TYPE_UNSPECIFIED",
                            "term": "string"
                        }
                    ]
                },
                "teamId": {"id": 0},
                "userIds": [{"id": "string"}]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"description":"string","externalId":"string","groupType":"GROUP_TYPE_UNSPECIFIED","name":"string","nextGenScopeId":"string","roleIds":[{"id":0}],"scopeFilters":{"applications":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}],"subsystems":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}]},"teamId":{"id":0},"userIds":[{"id":"string"}]}'
      description: No description available
  /aaa/team-groups/v1/users:
    post:
      externalDocs:
        url: ''
      operationId: TeamPermissionsMgmtService_AddUsersToTeamGroups
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                Bulk request to assign users to multiple team groups
                simultaneously, efficiently managing group memberships at scale.
              properties:
                addUsersToGroup:
                  items:
                    $ref: '#/components/schemas/AddUsersToTeamGroup'
                  type: array
                teamId:
                  $ref: '#/components/schemas/permissions.v1.TeamId'
              title: AddUsersToTeamGroupsRequest
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddUsersToTeamGroupsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Add Users To Team Groups
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/users';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"addUsersToGroup":[{"groupId":{"id":0},"userIds":[{"id":"string"}]}],"teamId":{"id":0}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/users"


            payload = {
                "addUsersToGroup": [
                    {
                        "groupId": {"id": 0},
                        "userIds": [{"id": "string"}]
                    }
                ],
                "teamId": {"id": 0}
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/users \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"addUsersToGroup":[{"groupId":{"id":0},"userIds":[{"id":"string"}]}],"teamId":{"id":0}}'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: TeamPermissionsMgmtService_RemoveUsersFromTeamGroups
      parameters:
        - in: query
          name: team_id
          required: false
          schema:
            properties:
              id:
                format: int64
                type: integer
            type: object
        - in: query
          name: remove_users_from_group
          required: false
          schema:
            items:
              description: >-
                This data structure represents the information associated with
                an API key.
              externalDocs:
                description: Find out more about groups
                url: >-
                  https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
              properties:
                groupId: {}
                userIds:
                  items: {}
                  type: array
              title: RemoveUsersFromTeamGroup
              type: object
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveUsersFromTeamGroupsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Remove Users From Team Groups
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/users?team_id=SOME_OBJECT_VALUE&remove_users_from_group=SOME_ARRAY_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/users"


            querystring =
            {"team_id":"SOME_OBJECT_VALUE","remove_users_from_group":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/users?team_id=SOME_OBJECT_VALUE&remove_users_from_group=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /aaa/team-groups/v1/{group_id.id}:
    get:
      externalDocs:
        url: ''
      operationId: TeamPermissionsMgmtService_GetTeamGroup
      parameters:
        - in: path
          name: group_id.id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTeamGroupResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Team Group
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: TeamPermissionsMgmtService_DeleteTeamGroup
      parameters:
        - in: path
          name: group_id.id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTeamGroupResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Delete Team Group
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /aaa/team-groups/v1/{group_id.id}/users:
    get:
      externalDocs:
        url: ''
      operationId: TeamPermissionsMgmtService_GetGroupUsers
      parameters:
        - in: path
          name: group_id.id
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: page_size
          required: false
          schema:
            format: int64
            type: integer
        - in: query
          name: page_token
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGroupUsersResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Group Users
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users"


            querystring =
            {"page_size":"SOME_INTEGER_VALUE","page_token":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: TeamPermissionsMgmtService_AddUsersToTeamGroup
      parameters:
        - in: path
          name: group_id.id
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                Request to assign additional users to an existing team group,
                granting them the group's roles and scope permissions.
              properties:
                userIds:
                  items:
                    $ref: '#/components/schemas/v1.UserId'
                  type: array
              title: AddUsersToTeamGroupRequest
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddUsersToTeamGroupResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Add Users To Team Group
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"userIds":[{"id":"string"}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users"


            payload = {"userIds": [{"id": "string"}]}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"userIds":[{"id":"string"}]}'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: TeamPermissionsMgmtService_RemoveUsersFromTeamGroup
      parameters:
        - in: path
          name: group_id.id
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: user_ids
          required: false
          schema:
            items:
              properties:
                id:
                  type: string
              type: object
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveUsersFromTeamGroupResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Remove Users From Team Group
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users?user_ids=SOME_ARRAY_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users"


            querystring = {"user_ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bgroup_id.id%7D/users?user_ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /aaa/team-groups/v1/{name}:
    get:
      externalDocs:
        url: ''
      operationId: TeamPermissionsMgmtService_GetTeamGroupByName
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTeamGroupByNameResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Team Group By Name
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bname%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bname%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-groups/v1/%7Bname%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /aaa/team-roles/v1/custom-roles:
    get:
      externalDocs:
        url: ''
      operationId: RoleManagementService_ListCustomRoles
      parameters:
        - in: query
          name: team_id
          required: false
          schema:
            format: int64
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCustomRolesResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: List Custom Roles
      tags:
        - Role Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/custom-roles?team_id=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/custom-roles"


            querystring = {"team_id":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/custom-roles?team_id=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: RoleManagementService_CreateRole
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - additionalProperties: false
                  properties:
                    description:
                      type: string
                    name:
                      type: string
                    parentRoleId:
                      format: int64
                      type: integer
                    permissions:
                      items:
                        type: string
                      type: array
                    teamId:
                      format: int64
                      type: integer
                  type: object
                - additionalProperties: false
                  properties:
                    description:
                      type: string
                    name:
                      type: string
                    parentRoleName:
                      type: string
                    permissions:
                      items:
                        type: string
                      type: array
                    teamId:
                      format: int64
                      type: integer
                  type: object
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRoleResponse'
          description: ''
        '201':
          content:
            application/json: {}
          description: Role created
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '409':
          content:
            application/json: {}
          description: Role already exists
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Create Role
      tags:
        - Role Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/custom-roles';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"description":"string","name":"string","parentRoleId":0,"permissions":["string"],"teamId":0}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/custom-roles"


            payload = {
                "description": "string",
                "name": "string",
                "parentRoleId": 0,
                "permissions": ["string"],
                "teamId": 0
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/custom-roles \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"description":"string","name":"string","parentRoleId":0,"permissions":["string"],"teamId":0}'
      description: No description available
  /aaa/team-roles/v1/custom-roles/{role_id}:
    get:
      externalDocs:
        url: ''
      operationId: RoleManagementService_GetCustomRole
      parameters:
        - in: path
          name: role_id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCustomRoleResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '404':
          content:
            application/json: {}
          description: Role not found
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Custom Role
      tags:
        - Role Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/custom-roles/%7Brole_id%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/custom-roles/%7Brole_id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/custom-roles/%7Brole_id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: RoleManagementService_UpdateRole
      parameters:
        - in: path
          name: role_id
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                newDescription:
                  type: string
                newName:
                  type: string
                newPermissions:
                  $ref: '#/components/schemas/v2.Permissions'
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRoleResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '404':
          content:
            application/json: {}
          description: Role not found
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Update Role
      tags:
        - Role Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/custom-roles/%7Brole_id%7D';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"newDescription":"string","newName":"string","newPermissions":{"permissions":["string"]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/custom-roles/%7Brole_id%7D"


            payload = {
                "newDescription": "string",
                "newName": "string",
                "newPermissions": {"permissions": ["string"]}
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/custom-roles/%7Brole_id%7D \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"newDescription":"string","newName":"string","newPermissions":{"permissions":["string"]}}'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: RoleManagementService_DeleteRole
      parameters:
        - in: path
          name: role_id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRoleResponse'
          description: ''
        '204':
          content:
            application/json: {}
          description: Role deleted
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '404':
          content:
            application/json: {}
          description: Role not found
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Delete Role
      tags:
        - Role Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/custom-roles/%7Brole_id%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/custom-roles/%7Brole_id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/custom-roles/%7Brole_id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /aaa/team-roles/v1/system-roles:
    get:
      externalDocs:
        url: ''
      operationId: RoleManagementService_ListSystemRoles
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSystemRolesResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: List System Roles
      tags:
        - Role Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/system-roles';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/system-roles"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-roles/v1/system-roles \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /aaa/team-saml/v1/active:
    post:
      externalDocs:
        url: ''
      operationId: SamlConfigurationService_SetActive
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                This data structure is used to activate or deactivate a SAML
                identity provider
              properties:
                isActive:
                  type: boolean
                teamId:
                  format: int64
                  type: integer
              required:
                - teamId
                - isActive
              title: Set Active Request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2.SetActiveResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Activate/Deactivate SAML
      tags:
        - SAML Configuration Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-saml/v1/active';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"isActive":true,"teamId":0}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-saml/v1/active"


            payload = {
                "isActive": True,
                "teamId": 0
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-saml/v1/active \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"isActive":true,"teamId":0}'
      description: No description available
  /aaa/team-saml/v1/configuration:
    get:
      externalDocs:
        url: ''
      operationId: SamlConfigurationService_GetConfiguration
      parameters:
        - in: query
          name: team_id
          required: false
          schema:
            format: int64
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConfigurationResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get SAML Configuration
      tags:
        - SAML Configuration Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-saml/v1/configuration?team_id=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-saml/v1/configuration"


            querystring = {"team_id":"SOME_INTEGER_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/aaa/team-saml/v1/configuration?team_id=SOME_INTEGER_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /aaa/team-saml/v1/idp_parameters:
    post:
      externalDocs:
        url: ''
      operationId: SamlConfigurationService_SetIDPParameters
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                This data structure is used to set the parameters of a SAML
                identity provider
              properties:
                params:
                  $ref: '#/components/schemas/IDPParameters'
                teamId:
                  format: int64
                  type: integer
              required:
                - teamId
                - params
              title: Set IDP Parameters Request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetIDPParametersResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Set IDP Parameters
      tags:
        - SAML Configuration Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-saml/v1/idp_parameters';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"params":{"active":true,"groupNames":[["group1"]],"metadataUrl":"https://<...>.okta.com/app/<...>/sso/saml/metadata","teamEntityId":1234567},"teamId":0}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-saml/v1/idp_parameters"


            payload = {
                "params": {
                    "active": True,
                    "groupNames": [["group1"]],
                    "metadataUrl": "https://<...>.okta.com/app/<...>/sso/saml/metadata",
                    "teamEntityId": 1234567
                },
                "teamId": 0
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-saml/v1/idp_parameters \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"params":{"active":true,"groupNames":[["group1"]],"metadataUrl":"https://<...>.okta.com/app/<...>/sso/saml/metadata","teamEntityId":1234567},"teamId":0}'
      description: No description available
  /aaa/team-saml/v1/sp_parameters:
    get:
      externalDocs:
        url: ''
      operationId: SamlConfigurationService_GetSPParameters
      parameters:
        - in: query
          name: team_id
          required: false
          schema:
            example: 1234567
            format: int64
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSPParametersResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get SP Parameters
      tags:
        - SAML Configuration Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-saml/v1/sp_parameters?team_id=1234567';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-saml/v1/sp_parameters"


            querystring = {"team_id":"1234567"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/aaa/team-saml/v1/sp_parameters?team_id=1234567' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /aaa/team-scopes/v1:
    get:
      externalDocs:
        url: ''
      operationId: ScopesService_GetTeamScopesByIds
      parameters:
        - in: query
          name: ids
          required: false
          schema:
            items:
              example: 60c82be2-413f-4b8e-8201-7f5c51e2ef2b
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetScopesResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Team Scopes By Ids
      tags:
        - Scopes Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1?ids=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1"


            querystring = {"ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1?ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: ScopesService_UpdateScope
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: This data structure represents a request to update a scope
              properties:
                defaultExpression:
                  example: <v1>true
                  type: string
                description:
                  example: The best scope
                  type: string
                displayName:
                  example: my-scope
                  type: string
                filters:
                  items:
                    $ref: '#/components/schemas/scopes.v1.Filter'
                  type: array
                id:
                  example: 60c82be2-413f-4b8e-8201-7f5c51e2ef2b
                  type: string
              required:
                - id
                - displayName
                - filters
                - defaultExpression
              title: Update Scope Request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateScopeResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Update Scope
      tags:
        - Scopes Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"defaultExpression":"<v1>true","description":"The best scope","displayName":"my-scope","filters":[{"entityType":"ENTITY_TYPE_UNSPECIFIED","expression":"<v1>true"}],"id":"60c82be2-413f-4b8e-8201-7f5c51e2ef2b"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1"


            payload = {
                "defaultExpression": "<v1>true",
                "description": "The best scope",
                "displayName": "my-scope",
                "filters": [
                    {
                        "entityType": "ENTITY_TYPE_UNSPECIFIED",
                        "expression": "<v1>true"
                    }
                ],
                "id": "60c82be2-413f-4b8e-8201-7f5c51e2ef2b"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"defaultExpression":"<v1>true","description":"The best scope","displayName":"my-scope","filters":[{"entityType":"ENTITY_TYPE_UNSPECIFIED","expression":"<v1>true"}],"id":"60c82be2-413f-4b8e-8201-7f5c51e2ef2b"}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: ScopesService_CreateScope
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: This data structure represents a request to create a scope
              properties:
                defaultExpression:
                  example: <v1>true
                  type: string
                description:
                  example: The best scope
                  type: string
                displayName:
                  example: my-scope
                  type: string
                filters:
                  items:
                    $ref: '#/components/schemas/scopes.v1.Filter'
                  type: array
              required:
                - displayName
                - filters
              title: Create Scope Request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateScopeResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Create Scope
      tags:
        - Scopes Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"defaultExpression":"<v1>true","description":"The best scope","displayName":"my-scope","filters":[{"entityType":"ENTITY_TYPE_UNSPECIFIED","expression":"<v1>true"}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1"


            payload = {
                "defaultExpression": "<v1>true",
                "description": "The best scope",
                "displayName": "my-scope",
                "filters": [
                    {
                        "entityType": "ENTITY_TYPE_UNSPECIFIED",
                        "expression": "<v1>true"
                    }
                ]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"defaultExpression":"<v1>true","description":"The best scope","displayName":"my-scope","filters":[{"entityType":"ENTITY_TYPE_UNSPECIFIED","expression":"<v1>true"}]}'
      description: No description available
  /aaa/team-scopes/v1/list:
    get:
      externalDocs:
        url: ''
      operationId: ScopesService_GetTeamScopes
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetScopesResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Team Scopes
      tags:
        - Scopes Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1/list';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1/list"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1/list \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /aaa/team-scopes/v1/{id}:
    delete:
      externalDocs:
        url: ''
      operationId: ScopesService_DeleteScope
      parameters:
        - in: path
          name: id
          required: true
          schema:
            example: 60c82be2-413f-4b8e-8201-7f5c51e2ef2b
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteScopeResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Delete Scope
      tags:
        - Scopes Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1/60c82be2-413f-4b8e-8201-7f5c51e2ef2b';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1/60c82be2-413f-4b8e-8201-7f5c51e2ef2b"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-scopes/v1/60c82be2-413f-4b8e-8201-7f5c51e2ef2b \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /aaa/team-sec-ip-access/v1:
    get:
      externalDocs:
        url: ''
      operationId: IpAccessService_GetCompanyIpAccessSettings
      parameters:
        - in: query
          name: id
          required: false
          schema:
            description: >-
              The ID of the company IP access settings to get. If it's not
              provided, the id will be derived from the authorization header.
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCompanyIpAccessSettingsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get company IP access settings
      tags:
        - IP access service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1?id=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1"


            querystring = {"id":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1?id=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: IpAccessService_ReplaceCompanyIpAccessSettings
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                This data structure represents the request to replace company IP
                access settings.
              properties:
                enableCoralogixCustomerSupportAccess:
                  $ref: '#/components/schemas/CoralogixCustomerSupportAccess'
                id:
                  example: 405
                  type: string
                ipAccess:
                  items:
                    $ref: '#/components/schemas/IpAccess'
                  type: array
              title: Replace company IP access settings request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceCompanyIpAccessSettingsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Replace company IP access settings
      tags:
        - IP access service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"enableCoralogixCustomerSupportAccess":"CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED","id":405,"ipAccess":[{"enabled":true,"ipRange":"192.168.0.1/24","name":"Office Network"}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1"


            payload = {
                "enableCoralogixCustomerSupportAccess": "CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED",
                "id": 405,
                "ipAccess": [
                    {
                        "enabled": True,
                        "ipRange": "192.168.0.1/24",
                        "name": "Office Network"
                    }
                ]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"enableCoralogixCustomerSupportAccess":"CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED","id":405,"ipAccess":[{"enabled":true,"ipRange":"192.168.0.1/24","name":"Office Network"}]}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: IpAccessService_CreateCompanyIpAccessSettings
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                This data structure represents the request to create company IP
                access settings.
              properties:
                enableCoralogixCustomerSupportAccess:
                  $ref: '#/components/schemas/CoralogixCustomerSupportAccess'
                ipAccess:
                  items:
                    $ref: '#/components/schemas/IpAccess'
                  type: array
              title: Create company IP access settings request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCompanyIpAccessSettingsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Create company IP access settings
      tags:
        - IP access service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"enableCoralogixCustomerSupportAccess":"CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED","ipAccess":[{"enabled":true,"ipRange":"192.168.0.1/24","name":"Office Network"}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1"


            payload = {
                "enableCoralogixCustomerSupportAccess": "CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED",
                "ipAccess": [
                    {
                        "enabled": True,
                        "ipRange": "192.168.0.1/24",
                        "name": "Office Network"
                    }
                ]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"enableCoralogixCustomerSupportAccess":"CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED","ipAccess":[{"enabled":true,"ipRange":"192.168.0.1/24","name":"Office Network"}]}'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: IpAccessService_DeleteCompanyIpAccessSettings
      parameters:
        - in: query
          name: id
          required: false
          schema:
            example: 405
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCompanyIpAccessSettingsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Delete company IP access settings
      tags:
        - IP access service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1?id=405';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1"


            querystring = {"id":"405"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/aaa/team-sec-ip-access/v1?id=405' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /alerts/alerts-general/v3:
    get:
      externalDocs:
        url: ''
      operationId: AlertDefsService_ListAlertDefs
      parameters:
        - in: query
          name: query_filter
          required: false
          schema:
            description: Filter configuration for alert defs
            externalDocs:
              url: ''
            properties:
              enabledFilter: {}
              entityLabelsFilter: {}
              lastTriggeredTimeRangeFilter: {}
              modifiedTimeRangeFilter: {}
              nameFilter: {}
              priorityFilter: {}
              statusFilter: {}
              typeFilter: {}
              typeSpecificFilter: {}
            title: AlertDef query filter
            type: object
        - in: query
          name: pagination
          required: false
          schema:
            properties:
              pageSize:
                format: int64
                type: integer
              pageToken:
                type: string
            type: object
        - in: query
          name: order_bys
          required: false
          schema:
            description: List of fields to order alert definitions by
            externalDocs:
              url: ''
            properties:
              orderBys:
                items:
                  description: >-
                    A data structure that specifies the field and direction for
                    ordering alert definitions
                  externalDocs:
                    url: ''
                  properties:
                    direction:
                      description: Direction for ordering
                      enum:
                        - ALERT_DEF_ORDER_BY_DIRECTION_ASC_OR_UNSPECIFIED
                        - ALERT_DEF_ORDER_BY_DIRECTION_DESC
                      example: ALERT_DEF_ORDER_BY_DIRECTION_DESC
                      type: string
                    fieldName:
                      description: Field name to order by
                      enum:
                        - ALERT_DEF_ORDER_BY_FIELDS_UNSPECIFIED
                        - ALERT_DEF_ORDER_BY_FIELDS_PRIORITY
                        - ALERT_DEF_ORDER_BY_FIELDS_LAST_TRIGGERED_TIME
                        - ALERT_DEF_ORDER_BY_FIELDS_UPDATED_TIME
                        - ALERT_DEF_ORDER_BY_FIELDS_ENABLED
                      example: ALERT_DEF_ORDER_BY_FIELDS_UPDATED_TIME
                      type: string
                  required:
                    - fieldName
                    - direction
                  title: Alert definition order by
                  type: object
                type: array
            required:
              - orderBys
            title: Alert definition order by list
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAlertDefsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get a list of all accessible alert definitions
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3?query_filter=SOME_OBJECT_VALUE&pagination=SOME_OBJECT_VALUE&order_bys=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3"


            querystring =
            {"query_filter":"SOME_OBJECT_VALUE","pagination":"SOME_OBJECT_VALUE","order_bys":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3?query_filter=SOME_OBJECT_VALUE&pagination=SOME_OBJECT_VALUE&order_bys=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: AlertDefsService_ReplaceAlertDef
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: A request to replace an existing alert definition
              properties:
                alertDefProperties:
                  $ref: '#/components/schemas/AlertDefProperties'
                id:
                  description: Alert definition ID
                  example: 123e4567-e89b-12d3-a456-426614174000
                  type: string
              required:
                - alertDefProperties
                - id
              title: Replace alert definition request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceAlertDefResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Replace an alert definition
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"alertDefProperties":{"activeOn":{"dayOfWeek":["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED"],"endTime":{"hours":14,"minutes":30},"startTime":{"hours":14,"minutes":30}},"deleted":false,"description":"Alert description","enabled":true,"entityLabels":{"key":"value"},"groupByKeys":[["key1","key2"]],"incidentsSettings":{"minutes":30,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"logsImmediate":{"logsFilter":{"simpleFilter":{"labelFilters":{"applicationName":[{"operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED","value":"my-app"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"],"subsystemName":[{"operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED","value":"my-app"}]},"luceneQuery":"string"}},"notificationPayloadFilter":[["obj.field"]]},"name":"My Alert","notificationGroup":{"destinations":[{"connectorId":"connector_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","presetId":"preset_id_example","resolvedRouteOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}},"triggeredRoutingOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}}}],"groupByKeys":[["key1","key2"]],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"webhooks":[{"integration":{"integrationId":123},"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}]},"notificationGroupExcess":[{"destinations":[{"connectorId":"connector_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","presetId":"preset_id_example","resolvedRouteOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}},"triggeredRoutingOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}}}],"groupByKeys":[["key1","key2"]],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"webhooks":[{"integration":{"integrationId":123},"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}]}],"phantomMode":false,"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED","type":"ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED"},"id":"123e4567-e89b-12d3-a456-426614174000"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3"


            payload = {
                "alertDefProperties": {
                    "activeOn": {
                        "dayOfWeek": ["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED"],
                        "endTime": {
                            "hours": 14,
                            "minutes": 30
                        },
                        "startTime": {
                            "hours": 14,
                            "minutes": 30
                        }
                    },
                    "deleted": False,
                    "description": "Alert description",
                    "enabled": True,
                    "entityLabels": {"key": "value"},
                    "groupByKeys": [["key1", "key2"]],
                    "incidentsSettings": {
                        "minutes": 30,
                        "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                    },
                    "logsImmediate": {
                        "logsFilter": {"simpleFilter": {
                                "labelFilters": {
                                    "applicationName": [
                                        {
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED",
                                            "value": "my-app"
                                        }
                                    ],
                                    "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"],
                                    "subsystemName": [
                                        {
                                            "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED",
                                            "value": "my-app"
                                        }
                                    ]
                                },
                                "luceneQuery": "string"
                            }},
                        "notificationPayloadFilter": [["obj.field"]]
                    },
                    "name": "My Alert",
                    "notificationGroup": {
                        "destinations": [
                            {
                                "connectorId": "connector_id_example",
                                "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                                "presetId": "preset_id_example",
                                "resolvedRouteOverrides": {"configOverrides": {
                                        "connectorConfigFields": [
                                            {
                                                "fieldName": "description",
                                                "template": "template_example"
                                            }
                                        ],
                                        "messageConfigFields": [
                                            {
                                                "fieldName": "description",
                                                "template": "template_example"
                                            }
                                        ],
                                        "payloadType": "slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"
                                    }},
                                "triggeredRoutingOverrides": {"configOverrides": {
                                        "connectorConfigFields": [
                                            {
                                                "fieldName": "description",
                                                "template": "template_example"
                                            }
                                        ],
                                        "messageConfigFields": [
                                            {
                                                "fieldName": "description",
                                                "template": "template_example"
                                            }
                                        ],
                                        "payloadType": "slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"
                                    }}
                            }
                        ],
                        "groupByKeys": [["key1", "key2"]],
                        "router": {
                            "id": "123e4567-e89b-12d3-a456-426614174000",
                            "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                        },
                        "webhooks": [
                            {
                                "integration": {"integrationId": 123},
                                "minutes": 15,
                                "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                            }
                        ]
                    },
                    "notificationGroupExcess": [
                        {
                            "destinations": [
                                {
                                    "connectorId": "connector_id_example",
                                    "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                                    "presetId": "preset_id_example",
                                    "resolvedRouteOverrides": {"configOverrides": {
                                            "connectorConfigFields": [
                                                {
                                                    "fieldName": "description",
                                                    "template": "template_example"
                                                }
                                            ],
                                            "messageConfigFields": [
                                                {
                                                    "fieldName": "description",
                                                    "template": "template_example"
                                                }
                                            ],
                                            "payloadType": "slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"
                                        }},
                                    "triggeredRoutingOverrides": {"configOverrides": {
                                            "connectorConfigFields": [
                                                {
                                                    "fieldName": "description",
                                                    "template": "template_example"
                                                }
                                            ],
                                            "messageConfigFields": [
                                                {
                                                    "fieldName": "description",
                                                    "template": "template_example"
                                                }
                                            ],
                                            "payloadType": "slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"
                                        }}
                                }
                            ],
                            "groupByKeys": [["key1", "key2"]],
                            "router": {
                                "id": "123e4567-e89b-12d3-a456-426614174000",
                                "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                            },
                            "webhooks": [
                                {
                                    "integration": {"integrationId": 123},
                                    "minutes": 15,
                                    "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                                }
                            ]
                        }
                    ],
                    "phantomMode": False,
                    "priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED",
                    "type": "ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED"
                },
                "id": "123e4567-e89b-12d3-a456-426614174000"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"alertDefProperties":{"activeOn":{"dayOfWeek":["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED"],"endTime":{"hours":14,"minutes":30},"startTime":{"hours":14,"minutes":30}},"deleted":false,"description":"Alert description","enabled":true,"entityLabels":{"key":"value"},"groupByKeys":[["key1","key2"]],"incidentsSettings":{"minutes":30,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"logsImmediate":{"logsFilter":{"simpleFilter":{"labelFilters":{"applicationName":[{"operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED","value":"my-app"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"],"subsystemName":[{"operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED","value":"my-app"}]},"luceneQuery":"string"}},"notificationPayloadFilter":[["obj.field"]]},"name":"My Alert","notificationGroup":{"destinations":[{"connectorId":"connector_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","presetId":"preset_id_example","resolvedRouteOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}},"triggeredRoutingOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}}}],"groupByKeys":[["key1","key2"]],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"webhooks":[{"integration":{"integrationId":123},"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}]},"notificationGroupExcess":[{"destinations":[{"connectorId":"connector_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","presetId":"preset_id_example","resolvedRouteOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}},"triggeredRoutingOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}}}],"groupByKeys":[["key1","key2"]],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"webhooks":[{"integration":{"integrationId":123},"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}]}],"phantomMode":false,"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED","type":"ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED"},"id":"123e4567-e89b-12d3-a456-426614174000"}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: AlertDefsService_CreateAlertDef
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - additionalProperties: false
                  description: User-configurable properties of an alert definition
                  properties:
                    activeOn:
                      $ref: '#/components/schemas/ActivitySchedule'
                    deleted:
                      description: Whether the alert has been marked as deleted
                      example: false
                      type: boolean
                    description:
                      description: >-
                        A detailed description of what the alert monitors and
                        when it triggers
                      example: Alert description
                      type: string
                    enabled:
                      description: Whether the alert is currently active and monitoring
                      example: true
                      type: boolean
                    entityLabels:
                      additionalProperties:
                        type: string
                      description: Labels used to identify and categorize the alert entity
                      example:
                        key: value
                      type: object
                    groupByKeys:
                      items:
                        description: Keys used to group and aggregate alert data
                        example:
                          - key1
                          - key2
                        type: string
                      type: array
                    incidentsSettings:
                      $ref: '#/components/schemas/AlertDefIncidentSettings'
                    logsImmediate:
                      $ref: '#/components/schemas/LogsImmediateType'
                    name:
                      description: The name of the alert definition
                      example: My Alert
                      type: string
                    notificationGroup:
                      $ref: '#/components/schemas/AlertDefNotificationGroup'
                    notificationGroupExcess:
                      items:
                        $ref: '#/components/schemas/AlertDefNotificationGroup'
                      type: array
                    phantomMode:
                      description: >-
                        Whether the alert is in phantom mode (creating incidents
                        or not)
                      example: false
                      type: boolean
                    priority:
                      $ref: '#/components/schemas/AlertDefPriority'
                    type:
                      $ref: '#/components/schemas/AlertDefType'
                  required:
                    - name
                    - priority
                    - type
                  title: Alert definition properties
                  type: object
                - additionalProperties: false
                  description: User-configurable properties of an alert definition
                  properties:
                    activeOn:
                      $ref: '#/components/schemas/ActivitySchedule'
                    deleted:
                      description: Whether the alert has been marked as deleted
                      example: false
                      type: boolean
                    description:
                      description: >-
                        A detailed description of what the alert monitors and
                        when it triggers
                      example: Alert description
                      type: string
                    enabled:
                      description: Whether the alert is currently active and monitoring
                      example: true
                      type: boolean
                    entityLabels:
                      additionalProperties:
                        type: string
                      description: Labels used to identify and categorize the alert entity
                      example:
                        key: value
                      type: object
                    groupByKeys:
                      items:
                        description: Keys used to group and aggregate alert data
                        example:
                          - key1
                          - key2
                        type: string
                      type: array
                    incidentsSettings:
                      $ref: '#/components/schemas/AlertDefIncidentSettings'
                    name:
                      description: The name of the alert definition
                      example: My Alert
                      type: string
                    notificationGroup:
                      $ref: '#/components/schemas/AlertDefNotificationGroup'
                    notificationGroupExcess:
                      items:
                        $ref: '#/components/schemas/AlertDefNotificationGroup'
                      type: array
                    phantomMode:
                      description: >-
                        Whether the alert is in phantom mode (creating incidents
                        or not)
                      example: false
                      type: boolean
                    priority:
                      $ref: '#/components/schemas/AlertDefPriority'
                    tracingImmediate:
                      $ref: '#/components/schemas/TracingImmediateType'
                    type:
                      $ref: '#/components/schemas/AlertDefType'
                  required:
                    - name
                    - priority
                    - type
                  title: Alert definition properties
                  type: object
                - additionalProperties: false
                  description: User-configurable properties of an alert definition
                  properties:
                    activeOn:
                      $ref: '#/components/schemas/ActivitySchedule'
                    deleted:
                      description: Whether the alert has been marked as deleted
                      example: false
                      type: boolean
                    description:
                      description: >-
                        A detailed description of what the alert monitors and
                        when it triggers
                      example: Alert description
                      type: string
                    enabled:
                      description: Whether the alert is currently active and monitoring
                      example: true
                      type: boolean
                    entityLabels:
                      additionalProperties:
                        type: string
                      description: Labels used to identify and categorize the alert entity
                      example:
                        key: value
                      type: object
                    groupByKeys:
                      items:
                        description: Keys used to group and aggregate alert data
                        example:
                          - key1
                          - key2
                        type: string
                      type: array
                    incidentsSettings:
                      $ref: '#/components/schemas/AlertDefIncidentSettings'
                    logsThreshold:
                      $ref: '#/components/schemas/LogsThresholdType'
                    name:
                      description: The name of the alert definition
                      example: My Alert
                      type: string
                    notificationGroup:
                      $ref: '#/components/schemas/AlertDefNotificationGroup'
                    notificationGroupExcess:
                      items:
                        $ref: '#/components/schemas/AlertDefNotificationGroup'
                      type: array
                    phantomMode:
                      description: >-
                        Whether the alert is in phantom mode (creating incidents
                        or not)
                      example: false
                      type: boolean
                    priority:
                      $ref: '#/components/schemas/AlertDefPriority'
                    type:
                      $ref: '#/components/schemas/AlertDefType'
                  required:
                    - name
                    - priority
                    - type
                  title: Alert definition properties
                  type: object
                - additionalProperties: false
                  description: User-configurable properties of an alert definition
                  properties:
                    activeOn:
                      $ref: '#/components/schemas/ActivitySchedule'
                    deleted:
                      description: Whether the alert has been marked as deleted
                      example: false
                      type: boolean
                    description:
                      description: >-
                        A detailed description of what the alert monitors and
                        when it triggers
                      example: Alert description
                      type: string
                    enabled:
                      description: Whether the alert is currently active and monitoring
                      example: true
                      type: boolean
                    entityLabels:
                      additionalProperties:
                        type: string
                      description: Labels used to identify and categorize the alert entity
                      example:
                        key: value
                      type: object
                    groupByKeys:
                      items:
                        description: Keys used to group and aggregate alert data
                        example:
                          - key1
                          - key2
                        type: string
                      type: array
                    incidentsSettings:
                      $ref: '#/components/schemas/AlertDefIncidentSettings'
                    logsRatioThreshold:
                      $ref: '#/components/schemas/LogsRatioThresholdType'
                    name:
                      description: The name of the alert definition
                      example: My Alert
                      type: string
                    notificationGroup:
                      $ref: '#/components/schemas/AlertDefNotificationGroup'
                    notificationGroupExcess:
                      items:
                        $ref: '#/components/schemas/AlertDefNotificationGroup'
                      type: array
                    phantomMode:
                      description: >-
                        Whether the alert is in phantom mode (creating incidents
                        or not)
                      example: false
                      type: boolean
                    priority:
                      $ref: '#/components/schemas/AlertDefPriority'
                    type:
                      $ref: '#/components/schemas/AlertDefType'
                  required:
                    - name
                    - priority
                    - type
                  title: Alert definition properties
                  type: object
                - additionalProperties: false
                  description: User-configurable properties of an alert definition
                  properties:
                    activeOn:
                      $ref: '#/components/schemas/ActivitySchedule'
                    deleted:
                      description: Whether the alert has been marked as deleted
                      example: false
                      type: boolean
                    description:
                      description: >-
                        A detailed description of what the alert monitors and
                        when it triggers
                      example: Alert description
                      type: string
                    enabled:
                      description: Whether the alert is currently active and monitoring
                      example: true
                      type: boolean
                    entityLabels:
                      additionalProperties:
                        type: string
                      description: Labels used to identify and categorize the alert entity
                      example:
                        key: value
                      type: object
                    groupByKeys:
                      items:
                        description: Keys used to group and aggregate alert data
                        example:
                          - key1
                          - key2
                        type: string
                      type: array
                    incidentsSettings:
                      $ref: '#/components/schemas/AlertDefIncidentSettings'
                    logsTimeRelativeThreshold:
                      $ref: '#/components/schemas/LogsTimeRelativeThresholdType'
                    name:
                      description: The name of the alert definition
                      example: My Alert
                      type: string
                    notificationGroup:
                      $ref: '#/components/schemas/AlertDefNotificationGroup'
                    notificationGroupExcess:
                      items:
                        $ref: '#/components/schemas/AlertDefNotificationGroup'
                      type: array
                    phantomMode:
                      description: >-
                        Whether the alert is in phantom mode (creating incidents
                        or not)
                      example: false
                      type: boolean
                    priority:
                      $ref: '#/components/schemas/AlertDefPriority'
                    type:
                      $ref: '#/components/schemas/AlertDefType'
                  required:
                    - name
                    - priority
                    - type
                  title: Alert definition properties
                  type: object
                - additionalProperties: false
                  description: User-configurable properties of an alert definition
                  properties:
                    activeOn:
                      $ref: '#/components/schemas/ActivitySchedule'
                    deleted:
                      description: Whether the alert has been marked as deleted
                      example: false
                      type: boolean
                    description:
                      description: >-
                        A detailed description of what the alert monitors and
                        when it triggers
                      example: Alert description
                      type: string
                    enabled:
                      description: Whether the alert is currently active and monitoring
                      example: true
                      type: boolean
                    entityLabels:
                      additionalProperties:
                        type: string
                      description: Labels used to identify and categorize the alert entity
                      example:
                        key: value
                      type: object
                    groupByKeys:
                      items:
                        description: Keys used to group and aggregate alert data
                        example:
                          - key1
                          - key2
                        type: string
                      type: array
                    incidentsSettings:
                      $ref: '#/components/schemas/AlertDefIncidentSettings'
                    metricThreshold:
                      $ref: '#/components/schemas/MetricThresholdType'
                    name:
                      description: The name of the alert definition
                      example: My Alert
                      type: string
                    notificationGroup:
                      $ref: '#/components/schemas/AlertDefNotificationGroup'
                    notificationGroupExcess:
                      items:
                        $ref: '#/components/schemas/AlertDefNotificationGroup'
                      type: array
                    phantomMode:
                      description: >-
                        Whether the alert is in phantom mode (creating incidents
                        or not)
                      example: false
                      type: boolean
                    priority:
                      $ref: '#/components/schemas/AlertDefPriority'
                    type:
                      $ref: '#/components/schemas/AlertDefType'
                  required:
                    - name
                    - priority
                    - type
                  title: Alert definition properties
                  type: object
                - additionalProperties: false
                  description: User-configurable properties of an alert definition
                  properties:
                    activeOn:
                      $ref: '#/components/schemas/ActivitySchedule'
                    deleted:
                      description: Whether the alert has been marked as deleted
                      example: false
                      type: boolean
                    description:
                      description: >-
                        A detailed description of what the alert monitors and
                        when it triggers
                      example: Alert description
                      type: string
                    enabled:
                      description: Whether the alert is currently active and monitoring
                      example: true
                      type: boolean
                    entityLabels:
                      additionalProperties:
                        type: string
                      description: Labels used to identify and categorize the alert entity
                      example:
                        key: value
                      type: object
                    groupByKeys:
                      items:
                        description: Keys used to group and aggregate alert data
                        example:
                          - key1
                          - key2
                        type: string
                      type: array
                    incidentsSettings:
                      $ref: '#/components/schemas/AlertDefIncidentSettings'
                    name:
                      description: The name of the alert definition
                      example: My Alert
                      type: string
                    notificationGroup:
                      $ref: '#/components/schemas/AlertDefNotificationGroup'
                    notificationGroupExcess:
                      items:
                        $ref: '#/components/schemas/AlertDefNotificationGroup'
                      type: array
                    phantomMode:
                      description: >-
                        Whether the alert is in phantom mode (creating incidents
                        or not)
                      example: false
                      type: boolean
                    priority:
                      $ref: '#/components/schemas/AlertDefPriority'
                    tracingThreshold:
                      $ref: '#/components/schemas/TracingThresholdType'
                    type:
                      $ref: '#/components/schemas/AlertDefType'
                  required:
                    - name
                    - priority
                    - type
                  title: Alert definition properties
                  type: object
                - additionalProperties: false
                  description: User-configurable properties of an alert definition
                  properties:
                    activeOn:
                      $ref: '#/components/schemas/ActivitySchedule'
                    deleted:
                      description: Whether the alert has been marked as deleted
                      example: false
                      type: boolean
                    description:
                      description: >-
                        A detailed description of what the alert monitors and
                        when it triggers
                      example: Alert description
                      type: string
                    enabled:
                      description: Whether the alert is currently active and monitoring
                      example: true
                      type: boolean
                    entityLabels:
                      additionalProperties:
                        type: string
                      description: Labels used to identify and categorize the alert entity
                      example:
                        key: value
                      type: object
                    flow:
                      $ref: '#/components/schemas/FlowType'
                    groupByKeys:
                      items:
                        description: Keys used to group and aggregate alert data
                        example:
                          - key1
                          - key2
                        type: string
                      type: array
                    incidentsSettings:
                      $ref: '#/components/schemas/AlertDefIncidentSettings'
                    name:
                      description: The name of the alert definition
                      example: My Alert
                      type: string
                    notificationGroup:
                      $ref: '#/components/schemas/AlertDefNotificationGroup'
                    notificationGroupExcess:
                      items:
                        $ref: '#/components/schemas/AlertDefNotificationGroup'
                      type: array
                    phantomMode:
                      description: >-
                        Whether the alert is in phantom mode (creating incidents
                        or not)
                      example: false
                      type: boolean
                    priority:
                      $ref: '#/components/schemas/AlertDefPriority'
                    type:
                      $ref: '#/components/schemas/AlertDefType'
                  required:
                    - name
                    - priority
                    - type
                  title: Alert definition properties
                  type: object
                - additionalProperties: false
                  description: User-configurable properties of an alert definition
                  properties:
                    activeOn:
                      $ref: '#/components/schemas/ActivitySchedule'
                    deleted:
                      description: Whether the alert has been marked as deleted
                      example: false
                      type: boolean
                    description:
                      description: >-
                        A detailed description of what the alert monitors and
                        when it triggers
                      example: Alert description
                      type: string
                    enabled:
                      description: Whether the alert is currently active and monitoring
                      example: true
                      type: boolean
                    entityLabels:
                      additionalProperties:
                        type: string
                      description: Labels used to identify and categorize the alert entity
                      example:
                        key: value
                      type: object
                    groupByKeys:
                      items:
                        description: Keys used to group and aggregate alert data
                        example:
                          - key1
                          - key2
                        type: string
                      type: array
                    incidentsSettings:
                      $ref: '#/components/schemas/AlertDefIncidentSettings'
                    logsAnomaly:
                      $ref: '#/components/schemas/LogsAnomalyType'
                    name:
                      description: The name of the alert definition
                      example: My Alert
                      type: string
                    notificationGroup:
                      $ref: '#/components/schemas/AlertDefNotificationGroup'
                    notificationGroupExcess:
                      items:
                        $ref: '#/components/schemas/AlertDefNotificationGroup'
                      type: array
                    phantomMode:
                      description: >-
                        Whether the alert is in phantom mode (creating incidents
                        or not)
                      example: false
                      type: boolean
                    priority:
                      $ref: '#/components/schemas/AlertDefPriority'
                    type:
                      $ref: '#/components/schemas/AlertDefType'
                  required:
                    - name
                    - priority
                    - type
                  title: Alert definition properties
                  type: object
                - additionalProperties: false
                  description: User-configurable properties of an alert definition
                  properties:
                    activeOn:
                      $ref: '#/components/schemas/ActivitySchedule'
                    deleted:
                      description: Whether the alert has been marked as deleted
                      example: false
                      type: boolean
                    description:
                      description: >-
                        A detailed description of what the alert monitors and
                        when it triggers
                      example: Alert description
                      type: string
                    enabled:
                      description: Whether the alert is currently active and monitoring
                      example: true
                      type: boolean
                    entityLabels:
                      additionalProperties:
                        type: string
                      description: Labels used to identify and categorize the alert entity
                      example:
                        key: value
                      type: object
                    groupByKeys:
                      items:
                        description: Keys used to group and aggregate alert data
                        example:
                          - key1
                          - key2
                        type: string
                      type: array
                    incidentsSettings:
                      $ref: '#/components/schemas/AlertDefIncidentSettings'
                    metricAnomaly:
                      $ref: '#/components/schemas/MetricAnomalyType'
                    name:
                      description: The name of the alert definition
                      example: My Alert
                      type: string
                    notificationGroup:
                      $ref: '#/components/schemas/AlertDefNotificationGroup'
                    notificationGroupExcess:
                      items:
                        $ref: '#/components/schemas/AlertDefNotificationGroup'
                      type: array
                    phantomMode:
                      description: >-
                        Whether the alert is in phantom mode (creating incidents
                        or not)
                      example: false
                      type: boolean
                    priority:
                      $ref: '#/components/schemas/AlertDefPriority'
                    type:
                      $ref: '#/components/schemas/AlertDefType'
                  required:
                    - name
                    - priority
                    - type
                  title: Alert definition properties
                  type: object
                - additionalProperties: false
                  description: User-configurable properties of an alert definition
                  properties:
                    activeOn:
                      $ref: '#/components/schemas/ActivitySchedule'
                    deleted:
                      description: Whether the alert has been marked as deleted
                      example: false
                      type: boolean
                    description:
                      description: >-
                        A detailed description of what the alert monitors and
                        when it triggers
                      example: Alert description
                      type: string
                    enabled:
                      description: Whether the alert is currently active and monitoring
                      example: true
                      type: boolean
                    entityLabels:
                      additionalProperties:
                        type: string
                      description: Labels used to identify and categorize the alert entity
                      example:
                        key: value
                      type: object
                    groupByKeys:
                      items:
                        description: Keys used to group and aggregate alert data
                        example:
                          - key1
                          - key2
                        type: string
                      type: array
                    incidentsSettings:
                      $ref: '#/components/schemas/AlertDefIncidentSettings'
                    logsNewValue:
                      $ref: '#/components/schemas/LogsNewValueType'
                    name:
                      description: The name of the alert definition
                      example: My Alert
                      type: string
                    notificationGroup:
                      $ref: '#/components/schemas/AlertDefNotificationGroup'
                    notificationGroupExcess:
                      items:
                        $ref: '#/components/schemas/AlertDefNotificationGroup'
                      type: array
                    phantomMode:
                      description: >-
                        Whether the alert is in phantom mode (creating incidents
                        or not)
                      example: false
                      type: boolean
                    priority:
                      $ref: '#/components/schemas/AlertDefPriority'
                    type:
                      $ref: '#/components/schemas/AlertDefType'
                  required:
                    - name
                    - priority
                    - type
                  title: Alert definition properties
                  type: object
                - additionalProperties: false
                  description: User-configurable properties of an alert definition
                  properties:
                    activeOn:
                      $ref: '#/components/schemas/ActivitySchedule'
                    deleted:
                      description: Whether the alert has been marked as deleted
                      example: false
                      type: boolean
                    description:
                      description: >-
                        A detailed description of what the alert monitors and
                        when it triggers
                      example: Alert description
                      type: string
                    enabled:
                      description: Whether the alert is currently active and monitoring
                      example: true
                      type: boolean
                    entityLabels:
                      additionalProperties:
                        type: string
                      description: Labels used to identify and categorize the alert entity
                      example:
                        key: value
                      type: object
                    groupByKeys:
                      items:
                        description: Keys used to group and aggregate alert data
                        example:
                          - key1
                          - key2
                        type: string
                      type: array
                    incidentsSettings:
                      $ref: '#/components/schemas/AlertDefIncidentSettings'
                    logsUniqueCount:
                      $ref: '#/components/schemas/LogsUniqueCountType'
                    name:
                      description: The name of the alert definition
                      example: My Alert
                      type: string
                    notificationGroup:
                      $ref: '#/components/schemas/AlertDefNotificationGroup'
                    notificationGroupExcess:
                      items:
                        $ref: '#/components/schemas/AlertDefNotificationGroup'
                      type: array
                    phantomMode:
                      description: >-
                        Whether the alert is in phantom mode (creating incidents
                        or not)
                      example: false
                      type: boolean
                    priority:
                      $ref: '#/components/schemas/AlertDefPriority'
                    type:
                      $ref: '#/components/schemas/AlertDefType'
                  required:
                    - name
                    - priority
                    - type
                  title: Alert definition properties
                  type: object
                - additionalProperties: false
                  description: User-configurable properties of an alert definition
                  properties:
                    activeOn:
                      $ref: '#/components/schemas/ActivitySchedule'
                    deleted:
                      description: Whether the alert has been marked as deleted
                      example: false
                      type: boolean
                    description:
                      description: >-
                        A detailed description of what the alert monitors and
                        when it triggers
                      example: Alert description
                      type: string
                    enabled:
                      description: Whether the alert is currently active and monitoring
                      example: true
                      type: boolean
                    entityLabels:
                      additionalProperties:
                        type: string
                      description: Labels used to identify and categorize the alert entity
                      example:
                        key: value
                      type: object
                    groupByKeys:
                      items:
                        description: Keys used to group and aggregate alert data
                        example:
                          - key1
                          - key2
                        type: string
                      type: array
                    incidentsSettings:
                      $ref: '#/components/schemas/AlertDefIncidentSettings'
                    name:
                      description: The name of the alert definition
                      example: My Alert
                      type: string
                    notificationGroup:
                      $ref: '#/components/schemas/AlertDefNotificationGroup'
                    notificationGroupExcess:
                      items:
                        $ref: '#/components/schemas/AlertDefNotificationGroup'
                      type: array
                    phantomMode:
                      description: >-
                        Whether the alert is in phantom mode (creating incidents
                        or not)
                      example: false
                      type: boolean
                    priority:
                      $ref: '#/components/schemas/AlertDefPriority'
                    sloThreshold:
                      $ref: '#/components/schemas/SloThresholdType'
                    type:
                      $ref: '#/components/schemas/AlertDefType'
                  required:
                    - name
                    - priority
                    - type
                  title: Alert definition properties
                  type: object
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAlertDefResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Create an alert
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"activeOn":{"dayOfWeek":["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED"],"endTime":{"hours":14,"minutes":30},"startTime":{"hours":14,"minutes":30}},"deleted":false,"description":"Alert description","enabled":true,"entityLabels":{"key":"value"},"groupByKeys":[["key1","key2"]],"incidentsSettings":{"minutes":30,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"logsImmediate":{"logsFilter":{"simpleFilter":{"labelFilters":{"applicationName":[{"operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED","value":"my-app"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"],"subsystemName":[{"operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED","value":"my-app"}]},"luceneQuery":"string"}},"notificationPayloadFilter":[["obj.field"]]},"name":"My Alert","notificationGroup":{"destinations":[{"connectorId":"connector_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","presetId":"preset_id_example","resolvedRouteOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}},"triggeredRoutingOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}}}],"groupByKeys":[["key1","key2"]],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"webhooks":[{"integration":{"integrationId":123},"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}]},"notificationGroupExcess":[{"destinations":[{"connectorId":"connector_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","presetId":"preset_id_example","resolvedRouteOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}},"triggeredRoutingOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}}}],"groupByKeys":[["key1","key2"]],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"webhooks":[{"integration":{"integrationId":123},"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}]}],"phantomMode":false,"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED","type":"ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3"


            payload = {
                "activeOn": {
                    "dayOfWeek": ["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED"],
                    "endTime": {
                        "hours": 14,
                        "minutes": 30
                    },
                    "startTime": {
                        "hours": 14,
                        "minutes": 30
                    }
                },
                "deleted": False,
                "description": "Alert description",
                "enabled": True,
                "entityLabels": {"key": "value"},
                "groupByKeys": [["key1", "key2"]],
                "incidentsSettings": {
                    "minutes": 30,
                    "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                },
                "logsImmediate": {
                    "logsFilter": {"simpleFilter": {
                            "labelFilters": {
                                "applicationName": [
                                    {
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED",
                                        "value": "my-app"
                                    }
                                ],
                                "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"],
                                "subsystemName": [
                                    {
                                        "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED",
                                        "value": "my-app"
                                    }
                                ]
                            },
                            "luceneQuery": "string"
                        }},
                    "notificationPayloadFilter": [["obj.field"]]
                },
                "name": "My Alert",
                "notificationGroup": {
                    "destinations": [
                        {
                            "connectorId": "connector_id_example",
                            "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                            "presetId": "preset_id_example",
                            "resolvedRouteOverrides": {"configOverrides": {
                                    "connectorConfigFields": [
                                        {
                                            "fieldName": "description",
                                            "template": "template_example"
                                        }
                                    ],
                                    "messageConfigFields": [
                                        {
                                            "fieldName": "description",
                                            "template": "template_example"
                                        }
                                    ],
                                    "payloadType": "slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"
                                }},
                            "triggeredRoutingOverrides": {"configOverrides": {
                                    "connectorConfigFields": [
                                        {
                                            "fieldName": "description",
                                            "template": "template_example"
                                        }
                                    ],
                                    "messageConfigFields": [
                                        {
                                            "fieldName": "description",
                                            "template": "template_example"
                                        }
                                    ],
                                    "payloadType": "slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"
                                }}
                        }
                    ],
                    "groupByKeys": [["key1", "key2"]],
                    "router": {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                    },
                    "webhooks": [
                        {
                            "integration": {"integrationId": 123},
                            "minutes": 15,
                            "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                        }
                    ]
                },
                "notificationGroupExcess": [
                    {
                        "destinations": [
                            {
                                "connectorId": "connector_id_example",
                                "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                                "presetId": "preset_id_example",
                                "resolvedRouteOverrides": {"configOverrides": {
                                        "connectorConfigFields": [
                                            {
                                                "fieldName": "description",
                                                "template": "template_example"
                                            }
                                        ],
                                        "messageConfigFields": [
                                            {
                                                "fieldName": "description",
                                                "template": "template_example"
                                            }
                                        ],
                                        "payloadType": "slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"
                                    }},
                                "triggeredRoutingOverrides": {"configOverrides": {
                                        "connectorConfigFields": [
                                            {
                                                "fieldName": "description",
                                                "template": "template_example"
                                            }
                                        ],
                                        "messageConfigFields": [
                                            {
                                                "fieldName": "description",
                                                "template": "template_example"
                                            }
                                        ],
                                        "payloadType": "slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"
                                    }}
                            }
                        ],
                        "groupByKeys": [["key1", "key2"]],
                        "router": {
                            "id": "123e4567-e89b-12d3-a456-426614174000",
                            "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                        },
                        "webhooks": [
                            {
                                "integration": {"integrationId": 123},
                                "minutes": 15,
                                "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                            }
                        ]
                    }
                ],
                "phantomMode": False,
                "priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED",
                "type": "ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"activeOn":{"dayOfWeek":["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED"],"endTime":{"hours":14,"minutes":30},"startTime":{"hours":14,"minutes":30}},"deleted":false,"description":"Alert description","enabled":true,"entityLabels":{"key":"value"},"groupByKeys":[["key1","key2"]],"incidentsSettings":{"minutes":30,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"logsImmediate":{"logsFilter":{"simpleFilter":{"labelFilters":{"applicationName":[{"operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED","value":"my-app"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"],"subsystemName":[{"operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED","value":"my-app"}]},"luceneQuery":"string"}},"notificationPayloadFilter":[["obj.field"]]},"name":"My Alert","notificationGroup":{"destinations":[{"connectorId":"connector_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","presetId":"preset_id_example","resolvedRouteOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}},"triggeredRoutingOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}}}],"groupByKeys":[["key1","key2"]],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"webhooks":[{"integration":{"integrationId":123},"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}]},"notificationGroupExcess":[{"destinations":[{"connectorId":"connector_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","presetId":"preset_id_example","resolvedRouteOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}},"triggeredRoutingOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}}}],"groupByKeys":[["key1","key2"]],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"webhooks":[{"integration":{"integrationId":123},"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}]}],"phantomMode":false,"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED","type":"ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED"}'
      description: No description available
  /alerts/alerts-general/v3/alert-version-id/{alert_version_id}:
    get:
      externalDocs:
        url: ''
      operationId: AlertDefsService_GetAlertDefByVersionId
      parameters:
        - in: path
          name: alert_version_id
          required: true
          schema:
            description: Alert version ID
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAlertDefByVersionIdResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get alert definition by alert version ID
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/alert-version-id/123e4567-e89b-12d3-a456-426614174000';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/alert-version-id/123e4567-e89b-12d3-a456-426614174000"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/alert-version-id/123e4567-e89b-12d3-a456-426614174000 \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /alerts/alerts-general/v3/bulk:
    put:
      externalDocs:
        url: ''
      operationId: AlertDefsService_BulkReplaceAlertDefs
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: A request to bulk replace multiple alert definitions
              properties:
                alertDefsToReplace:
                  items:
                    $ref: '#/components/schemas/AlertDefToReplace'
                  type: array
              required:
                - alertDefsToReplace
              title: Bulk replace alert definitions request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkReplaceAlertDefsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Bulk replace alert definitions
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/bulk';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"alertDefsToReplace":[{"alertDefProperties":{"activeOn":{"dayOfWeek":["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED"],"endTime":{"hours":14,"minutes":30},"startTime":{"hours":14,"minutes":30}},"deleted":false,"description":"Alert description","enabled":true,"entityLabels":{"key":"value"},"groupByKeys":[["key1","key2"]],"incidentsSettings":{"minutes":30,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"logsImmediate":{"logsFilter":{"simpleFilter":{"labelFilters":{"applicationName":[{"operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED","value":"my-app"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"],"subsystemName":[{"operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED","value":"my-app"}]},"luceneQuery":"string"}},"notificationPayloadFilter":[["obj.field"]]},"name":"My Alert","notificationGroup":{"destinations":[{"connectorId":"connector_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","presetId":"preset_id_example","resolvedRouteOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}},"triggeredRoutingOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}}}],"groupByKeys":[["key1","key2"]],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"webhooks":[{"integration":{"integrationId":123},"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}]},"notificationGroupExcess":[{"destinations":[{"connectorId":"connector_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","presetId":"preset_id_example","resolvedRouteOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}},"triggeredRoutingOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}}}],"groupByKeys":[["key1","key2"]],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"webhooks":[{"integration":{"integrationId":123},"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}]}],"phantomMode":false,"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED","type":"ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED"},"id":"123e4567-e89b-12d3-a456-426614174000"}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/bulk"


            payload = {"alertDefsToReplace": [
                    {
                        "alertDefProperties": {
                            "activeOn": {
                                "dayOfWeek": ["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED"],
                                "endTime": {
                                    "hours": 14,
                                    "minutes": 30
                                },
                                "startTime": {
                                    "hours": 14,
                                    "minutes": 30
                                }
                            },
                            "deleted": False,
                            "description": "Alert description",
                            "enabled": True,
                            "entityLabels": {"key": "value"},
                            "groupByKeys": [["key1", "key2"]],
                            "incidentsSettings": {
                                "minutes": 30,
                                "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                            },
                            "logsImmediate": {
                                "logsFilter": {"simpleFilter": {
                                        "labelFilters": {
                                            "applicationName": [
                                                {
                                                    "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED",
                                                    "value": "my-app"
                                                }
                                            ],
                                            "severities": ["LOG_SEVERITY_VERBOSE_UNSPECIFIED"],
                                            "subsystemName": [
                                                {
                                                    "operation": "LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED",
                                                    "value": "my-app"
                                                }
                                            ]
                                        },
                                        "luceneQuery": "string"
                                    }},
                                "notificationPayloadFilter": [["obj.field"]]
                            },
                            "name": "My Alert",
                            "notificationGroup": {
                                "destinations": [
                                    {
                                        "connectorId": "connector_id_example",
                                        "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                                        "presetId": "preset_id_example",
                                        "resolvedRouteOverrides": {"configOverrides": {
                                                "connectorConfigFields": [
                                                    {
                                                        "fieldName": "description",
                                                        "template": "template_example"
                                                    }
                                                ],
                                                "messageConfigFields": [
                                                    {
                                                        "fieldName": "description",
                                                        "template": "template_example"
                                                    }
                                                ],
                                                "payloadType": "slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"
                                            }},
                                        "triggeredRoutingOverrides": {"configOverrides": {
                                                "connectorConfigFields": [
                                                    {
                                                        "fieldName": "description",
                                                        "template": "template_example"
                                                    }
                                                ],
                                                "messageConfigFields": [
                                                    {
                                                        "fieldName": "description",
                                                        "template": "template_example"
                                                    }
                                                ],
                                                "payloadType": "slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"
                                            }}
                                    }
                                ],
                                "groupByKeys": [["key1", "key2"]],
                                "router": {
                                    "id": "123e4567-e89b-12d3-a456-426614174000",
                                    "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                                },
                                "webhooks": [
                                    {
                                        "integration": {"integrationId": 123},
                                        "minutes": 15,
                                        "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                                    }
                                ]
                            },
                            "notificationGroupExcess": [
                                {
                                    "destinations": [
                                        {
                                            "connectorId": "connector_id_example",
                                            "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED",
                                            "presetId": "preset_id_example",
                                            "resolvedRouteOverrides": {"configOverrides": {
                                                    "connectorConfigFields": [
                                                        {
                                                            "fieldName": "description",
                                                            "template": "template_example"
                                                        }
                                                    ],
                                                    "messageConfigFields": [
                                                        {
                                                            "fieldName": "description",
                                                            "template": "template_example"
                                                        }
                                                    ],
                                                    "payloadType": "slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"
                                                }},
                                            "triggeredRoutingOverrides": {"configOverrides": {
                                                    "connectorConfigFields": [
                                                        {
                                                            "fieldName": "description",
                                                            "template": "template_example"
                                                        }
                                                    ],
                                                    "messageConfigFields": [
                                                        {
                                                            "fieldName": "description",
                                                            "template": "template_example"
                                                        }
                                                    ],
                                                    "payloadType": "slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"
                                                }}
                                        }
                                    ],
                                    "groupByKeys": [["key1", "key2"]],
                                    "router": {
                                        "id": "123e4567-e89b-12d3-a456-426614174000",
                                        "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                                    },
                                    "webhooks": [
                                        {
                                            "integration": {"integrationId": 123},
                                            "minutes": 15,
                                            "notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
                                        }
                                    ]
                                }
                            ],
                            "phantomMode": False,
                            "priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED",
                            "type": "ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED"
                        },
                        "id": "123e4567-e89b-12d3-a456-426614174000"
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/bulk \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"alertDefsToReplace":[{"alertDefProperties":{"activeOn":{"dayOfWeek":["DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED"],"endTime":{"hours":14,"minutes":30},"startTime":{"hours":14,"minutes":30}},"deleted":false,"description":"Alert description","enabled":true,"entityLabels":{"key":"value"},"groupByKeys":[["key1","key2"]],"incidentsSettings":{"minutes":30,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"logsImmediate":{"logsFilter":{"simpleFilter":{"labelFilters":{"applicationName":[{"operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED","value":"my-app"}],"severities":["LOG_SEVERITY_VERBOSE_UNSPECIFIED"],"subsystemName":[{"operation":"LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED","value":"my-app"}]},"luceneQuery":"string"}},"notificationPayloadFilter":[["obj.field"]]},"name":"My Alert","notificationGroup":{"destinations":[{"connectorId":"connector_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","presetId":"preset_id_example","resolvedRouteOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}},"triggeredRoutingOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}}}],"groupByKeys":[["key1","key2"]],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"webhooks":[{"integration":{"integrationId":123},"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}]},"notificationGroupExcess":[{"destinations":[{"connectorId":"connector_id_example","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED","presetId":"preset_id_example","resolvedRouteOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}},"triggeredRoutingOverrides":{"configOverrides":{"connectorConfigFields":[{"fieldName":"description","template":"template_example"}],"messageConfigFields":[{"fieldName":"description","template":"template_example"}],"payloadType":"slack_raw, slack_structured, pagerduty_triggered, pagerduty_resolved, generic_https_default"}}}],"groupByKeys":[["key1","key2"]],"router":{"id":"123e4567-e89b-12d3-a456-426614174000","notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"},"webhooks":[{"integration":{"integrationId":123},"minutes":15,"notifyOn":"NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"}]}],"phantomMode":false,"priority":"ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED","type":"ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED"},"id":"123e4567-e89b-12d3-a456-426614174000"}]}'
      description: No description available
  /alerts/alerts-general/v3/download:
    get:
      description: >-
        Download a list of all accessible alert definitions in base64-encoded
        byte format.


        Requires the following permissions:

        - `alerts:ReadConfig`
      externalDocs:
        url: ''
      operationId: AlertDefsService_DownloadAlerts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadAlertsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Download alerts
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/download';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/download"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/download \
              --header 'Authorization: Bearer <API_KEY>'
  /alerts/alerts-general/v3/filter-option-counts:
    get:
      description: >-
        Returns counts for different filter options based on the provided
        filters


        Requires the following permissions:

        - `alerts:ReadConfig`
      externalDocs:
        url: ''
      operationId: AlertDefsService_FilterOptionCounts
      parameters:
        - in: query
          name: query_filter
          required: false
          schema:
            description: Filter configuration for counting filter options
            externalDocs:
              url: ''
            properties:
              enabledFilter: {}
              entityLabelsFilter: {}
              nameFilter: {}
              priorityFilter: {}
              statusFilter: {}
              typeFilter: {}
            title: Filter option counts filter
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterOptionCountsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get counts for filter options
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/filter-option-counts?query_filter=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/filter-option-counts"


            querystring = {"query_filter":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/filter-option-counts?query_filter=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
  /alerts/alerts-general/v3/{id}:
    get:
      externalDocs:
        url: ''
      operationId: AlertDefsService_GetAlertDef
      parameters:
        - in: path
          name: id
          required: true
          schema:
            description: Alert definition ID
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAlertDefResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get alert definition by ID
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/123e4567-e89b-12d3-a456-426614174000';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/123e4567-e89b-12d3-a456-426614174000"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/123e4567-e89b-12d3-a456-426614174000 \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: AlertDefsService_DeleteAlertDef
      parameters:
        - in: path
          name: id
          required: true
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAlertDefResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: DeleteAlertDef
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/123e4567-e89b-12d3-a456-426614174000';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/123e4567-e89b-12d3-a456-426614174000"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/123e4567-e89b-12d3-a456-426614174000 \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /alerts/alerts-general/v3/{id}:setActive:
    post:
      externalDocs:
        url: ''
      operationId: AlertDefsService_SetActive
      parameters:
        - in: path
          name: id
          required: true
          schema:
            description: The alert definition ID
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - in: query
          name: active
          required: false
          schema:
            description: Whether to enable or disable the alert definition
            example: true
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v3.SetActiveResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Disable or enable an alert
      tags:
        - Alert definitions service
      x-coralogixPermissions:
        - alerts:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/123e4567-e89b-12d3-a456-426614174000:setActive?active=true';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/123e4567-e89b-12d3-a456-426614174000:setActive"


            querystring = {"active":"true"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/alerts/alerts-general/v3/123e4567-e89b-12d3-a456-426614174000:setActive?active=true' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /apm/apm-slo/v1:
    get:
      externalDocs:
        url: ''
      operationId: ServiceSloService_ListServiceSlos
      parameters:
        - in: query
          name: order_by
          required: false
          schema:
            description: >-
              This data structure represents an order by clause in Coralogix
              APM.
            externalDocs:
              description: Find out more about SLOs in Coralogix APM
              url: >-
                https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
            properties:
              direction:
                enum:
                  - ORDER_BY_DIRECTION_UNSPECIFIED
                  - ORDER_BY_DIRECTION_ASC
                  - ORDER_BY_DIRECTION_DESC
                type: string
              fieldName:
                example: field_name
                type: string
            required:
              - fieldName
              - direction
            title: Order By
            type: object
        - in: query
          name: service_names
          required: false
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListServiceSlosResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: List Service SLOs
      tags:
        - SLO Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1?order_by=SOME_OBJECT_VALUE&service_names=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1"


            querystring =
            {"order_by":"SOME_OBJECT_VALUE","service_names":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1?order_by=SOME_OBJECT_VALUE&service_names=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: ServiceSloService_ReplaceServiceSlo
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                This data structure represents a request to update a Service
                SLO.
              properties:
                slo:
                  $ref: '#/components/schemas/ServiceSlo'
              required:
                - slo
              title: Replace Service SLO Request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceServiceSloResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Replace Service SLO
      tags:
        - SLO Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1';

            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"slo":{"createdAt":"2021-01-01T00:00:00.000Z","description":"slo_description","filters":[{"compareType":"COMPARE_TYPE_UNSPECIFIED","field":"field_name","fieldValues":[["value1","value2"]]}],"id":"slo_id","latencySli":{"thresholdMicroseconds":"1000000","thresholdSymbol":"THRESHOLD_SYMBOL_UNSPECIFIED"},"name":"slo_name","period":"SLO_PERIOD_UNSPECIFIED","remainingErrorBudgetPercentage":1,"serviceName":"service_name","status":"SLO_STATUS_UNSPECIFIED","targetPercentage":99}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1"


            payload = {"slo": {
                    "createdAt": "2021-01-01T00:00:00.000Z",
                    "description": "slo_description",
                    "filters": [
                        {
                            "compareType": "COMPARE_TYPE_UNSPECIFIED",
                            "field": "field_name",
                            "fieldValues": [["value1", "value2"]]
                        }
                    ],
                    "id": "slo_id",
                    "latencySli": {
                        "thresholdMicroseconds": "1000000",
                        "thresholdSymbol": "THRESHOLD_SYMBOL_UNSPECIFIED"
                    },
                    "name": "slo_name",
                    "period": "SLO_PERIOD_UNSPECIFIED",
                    "remainingErrorBudgetPercentage": 1,
                    "serviceName": "service_name",
                    "status": "SLO_STATUS_UNSPECIFIED",
                    "targetPercentage": 99
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"slo":{"createdAt":"2021-01-01T00:00:00.000Z","description":"slo_description","filters":[{"compareType":"COMPARE_TYPE_UNSPECIFIED","field":"field_name","fieldValues":[["value1","value2"]]}],"id":"slo_id","latencySli":{"thresholdMicroseconds":"1000000","thresholdSymbol":"THRESHOLD_SYMBOL_UNSPECIFIED"},"name":"slo_name","period":"SLO_PERIOD_UNSPECIFIED","remainingErrorBudgetPercentage":1,"serviceName":"service_name","status":"SLO_STATUS_UNSPECIFIED","targetPercentage":99}}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: ServiceSloService_CreateServiceSlo
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                This data structure represents a request to create a Service
                SLO.
              properties:
                slo:
                  $ref: '#/components/schemas/ServiceSlo'
              required:
                - slo
              title: Create Service SLO Request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateServiceSloResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Create Service SLO
      tags:
        - SLO Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"slo":{"createdAt":"2021-01-01T00:00:00.000Z","description":"slo_description","filters":[{"compareType":"COMPARE_TYPE_UNSPECIFIED","field":"field_name","fieldValues":[["value1","value2"]]}],"id":"slo_id","latencySli":{"thresholdMicroseconds":"1000000","thresholdSymbol":"THRESHOLD_SYMBOL_UNSPECIFIED"},"name":"slo_name","period":"SLO_PERIOD_UNSPECIFIED","remainingErrorBudgetPercentage":1,"serviceName":"service_name","status":"SLO_STATUS_UNSPECIFIED","targetPercentage":99}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1"


            payload = {"slo": {
                    "createdAt": "2021-01-01T00:00:00.000Z",
                    "description": "slo_description",
                    "filters": [
                        {
                            "compareType": "COMPARE_TYPE_UNSPECIFIED",
                            "field": "field_name",
                            "fieldValues": [["value1", "value2"]]
                        }
                    ],
                    "id": "slo_id",
                    "latencySli": {
                        "thresholdMicroseconds": "1000000",
                        "thresholdSymbol": "THRESHOLD_SYMBOL_UNSPECIFIED"
                    },
                    "name": "slo_name",
                    "period": "SLO_PERIOD_UNSPECIFIED",
                    "remainingErrorBudgetPercentage": 1,
                    "serviceName": "service_name",
                    "status": "SLO_STATUS_UNSPECIFIED",
                    "targetPercentage": 99
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"slo":{"createdAt":"2021-01-01T00:00:00.000Z","description":"slo_description","filters":[{"compareType":"COMPARE_TYPE_UNSPECIFIED","field":"field_name","fieldValues":[["value1","value2"]]}],"id":"slo_id","latencySli":{"thresholdMicroseconds":"1000000","thresholdSymbol":"THRESHOLD_SYMBOL_UNSPECIFIED"},"name":"slo_name","period":"SLO_PERIOD_UNSPECIFIED","remainingErrorBudgetPercentage":1,"serviceName":"service_name","status":"SLO_STATUS_UNSPECIFIED","targetPercentage":99}}'
      description: No description available
  /apm/apm-slo/v1/batch:
    get:
      externalDocs:
        url: ''
      operationId: ServiceSloService_BatchGetServiceSlos
      parameters:
        - in: query
          name: ids
          required: false
          schema:
            items:
              example:
                - slo_id1
                - slo_id2
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetServiceSlosResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Batch Get Service SLOs
      tags:
        - SLO Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1/batch?ids=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1/batch"


            querystring = {"ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1/batch?ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /apm/apm-slo/v1/{id}:
    get:
      externalDocs:
        url: ''
      operationId: ServiceSloService_GetServiceSlo
      parameters:
        - in: path
          name: id
          required: true
          schema:
            example: slo_id
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetServiceSloResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Service SLO
      tags:
        - SLO Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1/slo_id';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1/slo_id"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1/slo_id \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: ServiceSloService_DeleteServiceSlo
      parameters:
        - in: path
          name: id
          required: true
          schema:
            example: slo_id
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteServiceSloResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Delete Service SLO
      tags:
        - SLO Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1/slo_id';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1/slo_id"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/apm/apm-slo/v1/slo_id \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /dashboards/dashboards/v1/catalog:
    get:
      description: |-
        Get a list of all dashboards accessible.

        Requires the following permissions:
        - `team-dashboards:Read`
      externalDocs:
        url: ''
      operationId: DashboardCatalogService_GetDashboardCatalog
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDashboardCatalogResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get dashboard catalog
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/catalog';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/catalog"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/catalog \
              --header 'Authorization: Bearer <API_KEY>'
  /dashboards/dashboards/v1/folders:
    get:
      description: |-
        List all dashboard folders accessible.

        Requires the following permissions:
        - `team-dashboards:Read`
      externalDocs:
        url: ''
      operationId: DashboardFoldersService_ListDashboardFolders
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDashboardFoldersResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: List dashboard folders
      tags:
        - Dashboard folders service
      x-coralogixPermissions:
        - team-dashboards:Read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders \
              --header 'Authorization: Bearer <API_KEY>'
    put:
      externalDocs:
        url: ''
      operationId: DashboardFoldersService_ReplaceDashboardFolder
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                folder:
                  $ref: '#/components/schemas/DashboardFolder'
                requestId:
                  type: string
              title: Replace dashboard folder request data structure
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceDashboardFolderResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Replace a dashboard folder
      tags:
        - Dashboard folders service
      x-coralogixPermissions:
        - team-dashboards:Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"folder":{"id":"string","name":"string","parentId":"string"},"requestId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders"


            payload = {
                "folder": {
                    "id": "string",
                    "name": "string",
                    "parentId": "string"
                },
                "requestId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"folder":{"id":"string","name":"string","parentId":"string"},"requestId":"string"}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: DashboardFoldersService_CreateDashboardFolder
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                folder:
                  $ref: '#/components/schemas/DashboardFolder'
                requestId:
                  type: string
              title: Create dashboard folder request data structure
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDashboardFolderResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Create a dashboard folder
      tags:
        - Dashboard folders service
      x-coralogixPermissions:
        - team-dashboards:Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"folder":{"id":"string","name":"string","parentId":"string"},"requestId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders"


            payload = {
                "folder": {
                    "id": "string",
                    "name": "string",
                    "parentId": "string"
                },
                "requestId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"folder":{"id":"string","name":"string","parentId":"string"},"requestId":"string"}'
      description: No description available
  /dashboards/dashboards/v1/folders/{folder_id}:
    get:
      description: |-
        Returns a dashboard folder data.

        Requires the following permissions:
        - `team-dashboards:Read`
      externalDocs:
        url: ''
      operationId: DashboardFoldersService_GetDashboardFolder
      parameters:
        - in: path
          name: folder_id
          required: true
          schema:
            type: string
        - in: query
          name: request_id
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDashboardFolderResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get a dashboard folder
      tags:
        - Dashboard folders service
      x-coralogixPermissions:
        - team-dashboards:Read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders/%7Bfolder_id%7D?request_id=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders/%7Bfolder_id%7D"


            querystring = {"request_id":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders/%7Bfolder_id%7D?request_id=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
    delete:
      externalDocs:
        url: ''
      operationId: DashboardFoldersService_DeleteDashboardFolder
      parameters:
        - in: path
          name: folder_id
          required: true
          schema:
            type: string
        - in: query
          name: request_id
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDashboardFolderResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Delete a dashboard folder
      tags:
        - Dashboard folders service
      x-coralogixPermissions:
        - team-dashboards:Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders/%7Bfolder_id%7D?request_id=SOME_STRING_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders/%7Bfolder_id%7D"


            querystring = {"request_id":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/dashboards/dashboards/v1/folders/%7Bfolder_id%7D?request_id=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /dataengine/retention-tags/v1:
    get:
      externalDocs:
        url: ''
      operationId: RetentionsService_GetRetentions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRetentionsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Retentions
      tags:
        - Retentions Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataengine/retention-tags/v1';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataengine/retention-tags/v1"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/dataengine/retention-tags/v1 \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: RetentionsService_UpdateRetentions
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: This data structure is used to update retentions
              properties:
                retentionUpdateElements:
                  items:
                    $ref: '#/components/schemas/RetentionUpdateElement'
                  type: array
              required:
                - retentionUpdateElements
              title: Update Retentions Request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRetentionsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Update Retentions
      tags:
        - Retentions Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataengine/retention-tags/v1';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"retentionUpdateElements":[{"id":"string","name":"string"}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataengine/retention-tags/v1"


            payload = {"retentionUpdateElements": [
                    {
                        "id": "string",
                        "name": "string"
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/dataengine/retention-tags/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"retentionUpdateElements":[{"id":"string","name":"string"}]}'
      description: No description available
  /dataengine/retention-tags/v1/activate:
    post:
      externalDocs:
        url: ''
      operationId: RetentionsService_ActivateRetentions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivateRetentionsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Activate Retentions
      tags:
        - Retentions Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataengine/retention-tags/v1/activate';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataengine/retention-tags/v1/activate"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/dataengine/retention-tags/v1/activate \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /dataengine/retention-tags/v1/enabled:
    get:
      externalDocs:
        url: ''
      operationId: RetentionsService_GetRetentionsEnabled
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRetentionsEnabledResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Retentions Enabled
      tags:
        - Retentions Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataengine/retention-tags/v1/enabled';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataengine/retention-tags/v1/enabled"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/dataengine/retention-tags/v1/enabled \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /dataplans/data-usage/v2:
    get:
      externalDocs:
        url: ''
      operationId: DataUsageService_GetDataUsage
      parameters:
        - in: query
          name: date_range
          required: false
          schema:
            description: This data structure represents a date range.
            externalDocs:
              description: Find out more about data usage.
              url: >-
                https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
            properties:
              fromDate:
                example: '2021-01-01T00:00:00.000Z'
                format: date-time
                type: string
              toDate:
                example: '2021-01-01T00:00:00.000Z'
                format: date-time
                type: string
            title: Date Range
            type: object
        - in: query
          name: resolution
          required: false
          schema:
            type: string
        - in: query
          name: aggregate
          required: false
          schema:
            items:
              enum:
                - AGGREGATE_BY_UNSPECIFIED
                - AGGREGATE_BY_APPLICATION
                - AGGREGATE_BY_SUBSYSTEM
                - AGGREGATE_BY_PILLAR
                - AGGREGATE_BY_PRIORITY
                - AGGREGATE_BY_POLICY_NAME
                - AGGREGATE_BY_SEVERITY
              type: string
            type: array
        - in: query
          name: dimension_filters
          required: false
          schema:
            items:
              oneOf:
                - additionalProperties: false
                  properties:
                    pillar:
                      enum:
                        - PILLAR_UNSPECIFIED
                        - PILLAR_METRICS
                        - PILLAR_LOGS
                        - PILLAR_SPANS
                        - PILLAR_BINARY
                        - PILLAR_PROFILES
                      type: string
                  type: object
                - additionalProperties: false
                  properties:
                    genericDimension:
                      description: This data structure represents a generic dimension.
                      externalDocs:
                        description: Find out more about data usage.
                        url: >-
                          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
                      properties:
                        key:
                          example: key
                          type: string
                        value:
                          example: value
                          type: string
                      title: Generic Dimension
                      type: object
                  type: object
                - additionalProperties: false
                  properties:
                    tier:
                      deprecated: true
                      enum:
                        - TCO_TIER_UNSPECIFIED
                        - TCO_TIER_LOW
                        - TCO_TIER_MEDIUM
                        - TCO_TIER_HIGH
                        - TCO_TIER_BLOCKED
                      type: string
                  type: object
                - additionalProperties: false
                  properties:
                    severity:
                      enum:
                        - SEVERITY_UNSPECIFIED
                        - SEVERITY_DEBUG
                        - SEVERITY_VERBOSE
                        - SEVERITY_INFO
                        - SEVERITY_WARNING
                        - SEVERITY_ERROR
                        - SEVERITY_CRITICAL
                      type: string
                  type: object
                - additionalProperties: false
                  properties:
                    priority:
                      enum:
                        - PRIORITY_UNSPECIFIED
                        - PRIORITY_LOW
                        - PRIORITY_MEDIUM
                        - PRIORITY_HIGH
                        - PRIORITY_BLOCKED
                      type: string
                  type: object
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDataUsageResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Data Usage
      tags:
        - Data Usage Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2?date_range=SOME_OBJECT_VALUE&resolution=SOME_STRING_VALUE&aggregate=SOME_ARRAY_VALUE&dimension_filters=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2"


            querystring =
            {"date_range":"SOME_OBJECT_VALUE","resolution":"SOME_STRING_VALUE","aggregate":"SOME_ARRAY_VALUE","dimension_filters":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2?date_range=SOME_OBJECT_VALUE&resolution=SOME_STRING_VALUE&aggregate=SOME_ARRAY_VALUE&dimension_filters=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /dataplans/data-usage/v2/daily:evaluation-tokens:
    post:
      externalDocs:
        url: ''
      operationId: DataUsageService_GetDailyUsageEvaluationTokens
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - additionalProperties: false
                  properties:
                    range:
                      $ref: '#/components/schemas/v2.Range'
                  type: object
                - additionalProperties: false
                  properties:
                    dateRange:
                      $ref: '#/components/schemas/v2.DateRange'
                  type: object
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDailyUsageEvaluationTokensResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Daily Usage Evaluation Tokens
      tags:
        - Data Usage Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:evaluation-tokens';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"range":"RANGE_UNSPECIFIED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:evaluation-tokens"


            payload = {"range": "RANGE_UNSPECIFIED"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:evaluation-tokens \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"range":"RANGE_UNSPECIFIED"}'
      description: No description available
  /dataplans/data-usage/v2/daily:processed-gbs:
    post:
      externalDocs:
        url: ''
      operationId: DataUsageService_GetDailyUsageProcessedGbs
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - additionalProperties: false
                  properties:
                    range:
                      $ref: '#/components/schemas/v2.Range'
                  type: object
                - additionalProperties: false
                  properties:
                    dateRange:
                      $ref: '#/components/schemas/v2.DateRange'
                  type: object
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDailyUsageProcessedGbsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Daily Usage Processed GBs
      tags:
        - Data Usage Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:processed-gbs';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"range":"RANGE_UNSPECIFIED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:processed-gbs"


            payload = {"range": "RANGE_UNSPECIFIED"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:processed-gbs \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"range":"RANGE_UNSPECIFIED"}'
      description: No description available
  /dataplans/data-usage/v2/daily:units:
    post:
      externalDocs:
        url: ''
      operationId: DataUsageService_GetDailyUsageUnits
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - additionalProperties: false
                  properties:
                    range:
                      $ref: '#/components/schemas/v2.Range'
                  type: object
                - additionalProperties: false
                  properties:
                    dateRange:
                      $ref: '#/components/schemas/v2.DateRange'
                  type: object
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDailyUsageUnitsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Daily Usage Units
      tags:
        - Data Usage Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:units';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"range":"RANGE_UNSPECIFIED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:units"


            payload = {"range": "RANGE_UNSPECIFIED"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/daily:units \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"range":"RANGE_UNSPECIFIED"}'
      description: No description available
  /dataplans/data-usage/v2/export-status:
    get:
      externalDocs:
        url: ''
      operationId: DataUsageService_GetDataUsageMetricsExportStatus
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDataUsageMetricsExportStatusResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Data Usage Metrics Export Status
      tags:
        - Data Usage Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/export-status';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/export-status"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/export-status \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: DataUsageService_UpdateDataUsageMetricsExportStatus
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                This data structure is used to update data usage metrics export
                status.
              properties:
                enabled:
                  example: true
                  type: boolean
              title: Update Data Usage Metrics Export Status Request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/UpdateDataUsageMetricsExportStatusResponse
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Update Data Usage Metrics Export Status
      tags:
        - Data Usage Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/export-status';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"enabled":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/export-status"


            payload = {"enabled": True}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/export-status \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"enabled":true}'
      description: No description available
  /dataplans/data-usage/v2/logs:count:
    get:
      externalDocs:
        url: ''
      operationId: DataUsageService_GetLogsCount
      parameters:
        - in: query
          name: date_range
          required: false
          schema:
            description: This data structure represents a date range.
            externalDocs:
              description: Find out more about data usage.
              url: >-
                https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
            properties:
              fromDate:
                example: '2021-01-01T00:00:00.000Z'
                format: date-time
                type: string
              toDate:
                example: '2021-01-01T00:00:00.000Z'
                format: date-time
                type: string
            title: Date Range
            type: object
        - in: query
          name: resolution
          required: false
          schema:
            type: string
        - in: query
          name: filters
          required: false
          schema:
            description: This data structure represents a filter for scopes.
            externalDocs:
              description: Find out more about data usage.
              url: >-
                https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
            properties:
              application:
                items:
                  example: application1
                  type: string
                type: array
              subsystem:
                items:
                  example: subsystem1
                  type: string
                type: array
            title: Scopes Filter
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLogsCountResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Logs Count
      tags:
        - Data Usage Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/logs:count?date_range=SOME_OBJECT_VALUE&resolution=SOME_STRING_VALUE&filters=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/logs:count"


            querystring =
            {"date_range":"SOME_OBJECT_VALUE","resolution":"SOME_STRING_VALUE","filters":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/logs:count?date_range=SOME_OBJECT_VALUE&resolution=SOME_STRING_VALUE&filters=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /dataplans/data-usage/v2/spans:count:
    get:
      externalDocs:
        url: ''
      operationId: DataUsageService_GetSpansCount
      parameters:
        - in: query
          name: date_range
          required: false
          schema:
            description: This data structure represents a date range.
            externalDocs:
              description: Find out more about data usage.
              url: >-
                https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
            properties:
              fromDate:
                example: '2021-01-01T00:00:00.000Z'
                format: date-time
                type: string
              toDate:
                example: '2021-01-01T00:00:00.000Z'
                format: date-time
                type: string
            title: Date Range
            type: object
        - in: query
          name: resolution
          required: false
          schema:
            type: string
        - in: query
          name: filters
          required: false
          schema:
            description: This data structure represents a filter for scopes.
            externalDocs:
              description: Find out more about data usage.
              url: >-
                https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
            properties:
              application:
                items:
                  example: application1
                  type: string
                type: array
              subsystem:
                items:
                  example: subsystem1
                  type: string
                type: array
            title: Scopes Filter
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpansCountResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Spans Count
      tags:
        - Data Usage Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/spans:count?date_range=SOME_OBJECT_VALUE&resolution=SOME_STRING_VALUE&filters=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/spans:count"


            querystring =
            {"date_range":"SOME_OBJECT_VALUE","resolution":"SOME_STRING_VALUE","filters":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dataplans/data-usage/v2/spans:count?date_range=SOME_OBJECT_VALUE&resolution=SOME_STRING_VALUE&filters=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /dataplans/policies/v1:
    get:
      externalDocs:
        url: ''
      operationId: PoliciesService_GetCompanyPolicies
      parameters:
        - in: query
          name: enabled_only
          required: false
          schema:
            type: boolean
        - in: query
          name: source_type
          required: false
          schema:
            enum:
              - SOURCE_TYPE_UNSPECIFIED
              - SOURCE_TYPE_LOGS
              - SOURCE_TYPE_SPANS
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCompanyPoliciesResponse'
          description: ''
      summary: GetCompanyPolicies
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1?enabled_only=SOME_BOOLEAN_VALUE&source_type=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1"


            querystring =
            {"enabled_only":"SOME_BOOLEAN_VALUE","source_type":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1?enabled_only=SOME_BOOLEAN_VALUE&source_type=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: PoliciesService_UpdatePolicy
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - additionalProperties: false
                  properties:
                    applicationRule:
                      $ref: '#/components/schemas/quota.v1.Rule'
                    archiveRetention:
                      $ref: '#/components/schemas/ArchiveRetention'
                    description:
                      type: string
                    enabled:
                      type: boolean
                    id:
                      type: string
                    logRules:
                      $ref: '#/components/schemas/LogRules'
                    name:
                      type: string
                    priority:
                      $ref: '#/components/schemas/quota.v1.Priority'
                    subsystemRule:
                      $ref: '#/components/schemas/quota.v1.Rule'
                  type: object
                - additionalProperties: false
                  properties:
                    applicationRule:
                      $ref: '#/components/schemas/quota.v1.Rule'
                    archiveRetention:
                      $ref: '#/components/schemas/ArchiveRetention'
                    description:
                      type: string
                    enabled:
                      type: boolean
                    id:
                      type: string
                    name:
                      type: string
                    priority:
                      $ref: '#/components/schemas/quota.v1.Priority'
                    spanRules:
                      $ref: '#/components/schemas/SpanRules'
                    subsystemRule:
                      $ref: '#/components/schemas/quota.v1.Rule'
                  type: object
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePolicyResponse'
          description: ''
      summary: UpdatePolicy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"applicationRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"},"archiveRetention":{"id":"string"},"description":"string","enabled":true,"id":"string","logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"name":"string","priority":"PRIORITY_TYPE_UNSPECIFIED","subsystemRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1"


            payload = {
                "applicationRule": {
                    "name": "string",
                    "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED"
                },
                "archiveRetention": {"id": "string"},
                "description": "string",
                "enabled": True,
                "id": "string",
                "logRules": {"severities": ["SEVERITY_UNSPECIFIED"]},
                "name": "string",
                "priority": "PRIORITY_TYPE_UNSPECIFIED",
                "subsystemRule": {
                    "name": "string",
                    "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"applicationRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"},"archiveRetention":{"id":"string"},"description":"string","enabled":true,"id":"string","logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"name":"string","priority":"PRIORITY_TYPE_UNSPECIFIED","subsystemRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"}}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: PoliciesService_CreatePolicy
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - additionalProperties: false
                  properties:
                    applicationRule:
                      $ref: '#/components/schemas/quota.v1.Rule'
                    archiveRetention:
                      $ref: '#/components/schemas/ArchiveRetention'
                    description:
                      type: string
                    disabled:
                      type: boolean
                    logRules:
                      $ref: '#/components/schemas/LogRules'
                    name:
                      type: string
                    placement:
                      $ref: '#/components/schemas/Placement'
                    priority:
                      $ref: '#/components/schemas/quota.v1.Priority'
                    subsystemRule:
                      $ref: '#/components/schemas/quota.v1.Rule'
                  type: object
                - additionalProperties: false
                  properties:
                    applicationRule:
                      $ref: '#/components/schemas/quota.v1.Rule'
                    archiveRetention:
                      $ref: '#/components/schemas/ArchiveRetention'
                    description:
                      type: string
                    disabled:
                      type: boolean
                    name:
                      type: string
                    placement:
                      $ref: '#/components/schemas/Placement'
                    priority:
                      $ref: '#/components/schemas/quota.v1.Priority'
                    spanRules:
                      $ref: '#/components/schemas/SpanRules'
                    subsystemRule:
                      $ref: '#/components/schemas/quota.v1.Rule'
                  type: object
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePolicyResponse'
          description: ''
      summary: CreatePolicy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"applicationRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"},"archiveRetention":{"id":"string"},"description":"string","disabled":true,"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"name":"string","placement":{"first":{}},"priority":"PRIORITY_TYPE_UNSPECIFIED","subsystemRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1"


            payload = {
                "applicationRule": {
                    "name": "string",
                    "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED"
                },
                "archiveRetention": {"id": "string"},
                "description": "string",
                "disabled": True,
                "logRules": {"severities": ["SEVERITY_UNSPECIFIED"]},
                "name": "string",
                "placement": {"first": {}},
                "priority": "PRIORITY_TYPE_UNSPECIFIED",
                "subsystemRule": {
                    "name": "string",
                    "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"applicationRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"},"archiveRetention":{"id":"string"},"description":"string","disabled":true,"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"name":"string","placement":{"first":{}},"priority":"PRIORITY_TYPE_UNSPECIFIED","subsystemRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"}}'
      description: No description available
  /dataplans/policies/v1/atomicOverwriteLogPolicies:
    post:
      externalDocs:
        url: ''
      operationId: PoliciesService_AtomicOverwriteLogPolicies
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                policies:
                  items:
                    $ref: '#/components/schemas/CreateLogPolicyRequest'
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtomicOverwriteLogPoliciesResponse'
          description: ''
      summary: AtomicOverwriteLogPolicies
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/atomicOverwriteLogPolicies';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"policies":[{"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"policy":{"applicationRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"},"archiveRetention":{"id":"string"},"description":"string","name":"string","priority":"PRIORITY_TYPE_UNSPECIFIED","subsystemRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"}}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/atomicOverwriteLogPolicies"


            payload = {"policies": [
                    {
                        "logRules": {"severities": ["SEVERITY_UNSPECIFIED"]},
                        "policy": {
                            "applicationRule": {
                                "name": "string",
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED"
                            },
                            "archiveRetention": {"id": "string"},
                            "description": "string",
                            "name": "string",
                            "priority": "PRIORITY_TYPE_UNSPECIFIED",
                            "subsystemRule": {
                                "name": "string",
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED"
                            }
                        }
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/atomicOverwriteLogPolicies \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"policies":[{"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"policy":{"applicationRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"},"archiveRetention":{"id":"string"},"description":"string","name":"string","priority":"PRIORITY_TYPE_UNSPECIFIED","subsystemRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"}}}]}'
      description: No description available
  /dataplans/policies/v1/atomicOverwriteSpanPolicies:
    post:
      externalDocs:
        url: ''
      operationId: PoliciesService_AtomicOverwriteSpanPolicies
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                policies:
                  items:
                    $ref: '#/components/schemas/CreateSpanPolicyRequest'
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtomicOverwriteSpanPoliciesResponse'
          description: ''
      summary: AtomicOverwriteSpanPolicies
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/atomicOverwriteSpanPolicies';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"policies":[{"policy":{"applicationRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"},"archiveRetention":{"id":"string"},"description":"string","name":"string","priority":"PRIORITY_TYPE_UNSPECIFIED","subsystemRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"}},"spanRules":{"actionRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"},"serviceRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"string","tagValue":"string"}]}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/atomicOverwriteSpanPolicies"


            payload = {"policies": [
                    {
                        "policy": {
                            "applicationRule": {
                                "name": "string",
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED"
                            },
                            "archiveRetention": {"id": "string"},
                            "description": "string",
                            "name": "string",
                            "priority": "PRIORITY_TYPE_UNSPECIFIED",
                            "subsystemRule": {
                                "name": "string",
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED"
                            }
                        },
                        "spanRules": {
                            "actionRule": {
                                "name": "string",
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED"
                            },
                            "serviceRule": {
                                "name": "string",
                                "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED"
                            },
                            "tagRules": [
                                {
                                    "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
                                    "tagName": "string",
                                    "tagValue": "string"
                                }
                            ]
                        }
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/atomicOverwriteSpanPolicies \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"policies":[{"policy":{"applicationRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"},"archiveRetention":{"id":"string"},"description":"string","name":"string","priority":"PRIORITY_TYPE_UNSPECIFIED","subsystemRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"}},"spanRules":{"actionRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"},"serviceRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"},"tagRules":[{"ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED","tagName":"string","tagValue":"string"}]}}]}'
      description: No description available
  /dataplans/policies/v1/bulkCreate:
    post:
      externalDocs:
        url: ''
      operationId: PoliciesService_AtomicBatchCreatePolicy
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                policyRequests:
                  items:
                    $ref: '#/components/schemas/CreatePolicyRequest'
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtomicBatchCreatePolicyResponse'
          description: ''
      summary: AtomicBatchCreatePolicy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/bulkCreate';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"policyRequests":[{"applicationRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"},"archiveRetention":{"id":"string"},"description":"string","disabled":true,"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"name":"string","placement":{"first":{}},"priority":"PRIORITY_TYPE_UNSPECIFIED","subsystemRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/bulkCreate"


            payload = {"policyRequests": [
                    {
                        "applicationRule": {
                            "name": "string",
                            "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED"
                        },
                        "archiveRetention": {"id": "string"},
                        "description": "string",
                        "disabled": True,
                        "logRules": {"severities": ["SEVERITY_UNSPECIFIED"]},
                        "name": "string",
                        "placement": {"first": {}},
                        "priority": "PRIORITY_TYPE_UNSPECIFIED",
                        "subsystemRule": {
                            "name": "string",
                            "ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED"
                        }
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/bulkCreate \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"policyRequests":[{"applicationRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"},"archiveRetention":{"id":"string"},"description":"string","disabled":true,"logRules":{"severities":["SEVERITY_UNSPECIFIED"]},"name":"string","placement":{"first":{}},"priority":"PRIORITY_TYPE_UNSPECIFIED","subsystemRule":{"name":"string","ruleTypeId":"RULE_TYPE_ID_UNSPECIFIED"}}]}'
      description: No description available
  /dataplans/policies/v1/bulkTestLog:
    post:
      externalDocs:
        url: ''
      operationId: PoliciesService_BulkTestLogPolicies
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                metaFieldsValuesList:
                  items:
                    $ref: '#/components/schemas/LogMetaFieldsValues'
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkTestLogPoliciesResponse'
          description: ''
      summary: BulkTestLogPolicies
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/bulkTestLog';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"metaFieldsValuesList":[{"applicationNameValues":"string","severityValues":"string","subsystemNameValues":"string"}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/bulkTestLog"


            payload = {"metaFieldsValuesList": [
                    {
                        "applicationNameValues": "string",
                        "severityValues": "string",
                        "subsystemNameValues": "string"
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/bulkTestLog \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"metaFieldsValuesList":[{"applicationNameValues":"string","severityValues":"string","subsystemNameValues":"string"}]}'
      description: No description available
  /dataplans/policies/v1/reorder:
    post:
      externalDocs:
        url: ''
      operationId: PoliciesService_ReorderPolicies
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                orders:
                  items:
                    $ref: '#/components/schemas/PolicyOrder'
                  type: array
                sourceType:
                  $ref: '#/components/schemas/v1.SourceType'
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReorderPoliciesResponse'
          description: ''
      summary: ReorderPolicies
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/reorder';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"orders":[{"id":"string","order":0}],"sourceType":"SOURCE_TYPE_UNSPECIFIED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/reorder"


            payload = {
                "orders": [
                    {
                        "id": "string",
                        "order": 0
                    }
                ],
                "sourceType": "SOURCE_TYPE_UNSPECIFIED"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/reorder \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"orders":[{"id":"string","order":0}],"sourceType":"SOURCE_TYPE_UNSPECIFIED"}'
      description: No description available
  /dataplans/policies/v1/toggle:
    post:
      externalDocs:
        url: ''
      operationId: PoliciesService_TogglePolicy
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                enabled:
                  type: boolean
                id:
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TogglePolicyResponse'
          description: ''
      summary: TogglePolicy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/toggle';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"enabled":true,"id":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/toggle"


            payload = {
                "enabled": True,
                "id": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/toggle \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"enabled":true,"id":"string"}'
      description: No description available
  /dataplans/policies/v1/{id}:
    get:
      externalDocs:
        url: ''
      operationId: PoliciesService_GetPolicy
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPolicyResponse'
          description: ''
      summary: GetPolicy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: PoliciesService_DeletePolicy
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePolicyResponse'
          description: ''
      summary: DeletePolicy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/dataplans/policies/v1/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /enrichments:
    get:
      externalDocs:
        url: ''
      operationId: EnrichmentService_GetEnrichments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEnrichmentsResponse'
          description: ''
      summary: Get Enrichments
      tags:
        - Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/enrichments';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/enrichments"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/enrichments \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: EnrichmentService_AddEnrichments
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                This response data structure represents a collection of
                enrichments
              properties:
                requestEnrichments:
                  items:
                    $ref: '#/components/schemas/EnrichmentRequestModel'
                  type: array
              required:
                - requestEnrichments
              title: Enrichments Creation Request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddEnrichmentsResponse'
          description: ''
      summary: Add Enrichments
      tags:
        - Enrichments Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/enrichments';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestEnrichments":[{"enrichedFieldName":"string","enrichmentType":{"geoIp":{"withAsn":true}},"fieldName":"sourceIPs","selectedColumns":["string"]}]}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/enrichments"


            payload = {"requestEnrichments": [
                    {
                        "enrichedFieldName": "string",
                        "enrichmentType": {"geoIp": {"withAsn": True}},
                        "fieldName": "sourceIPs",
                        "selectedColumns": ["string"]
                    }
                ]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/enrichments \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestEnrichments":[{"enrichedFieldName":"string","enrichmentType":{"geoIp":{"withAsn":true}},"fieldName":"sourceIPs","selectedColumns":["string"]}]}'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: EnrichmentService_RemoveEnrichments
      parameters:
        - in: query
          name: enrichment_ids
          required: false
          schema:
            items:
              example:
                - 1
                - 2
                - 3
              format: int64
              type: integer
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveEnrichmentsResponse'
          description: ''
      summary: Delete Enrichments
      tags:
        - Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/enrichments?enrichment_ids=SOME_ARRAY_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/enrichments"


            querystring = {"enrichment_ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/enrichments?enrichment_ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /enrichments/limit:
    get:
      externalDocs:
        url: ''
      operationId: EnrichmentService_GetEnrichmentLimit
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEnrichmentLimitResponse'
          description: ''
      summary: Get Enrichment Limit
      tags:
        - Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/enrichments/limit';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/enrichments/limit"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/enrichments/limit \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /enrichments/settings:
    get:
      externalDocs:
        url: ''
      operationId: EnrichmentService_GetCompanyEnrichmentSettings
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCompanyEnrichmentSettingsResponse'
          description: ''
      summary: Get Company Enrichment Settings
      tags:
        - Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/enrichments/settings';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/enrichments/settings"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/enrichments/settings \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /enrichments:atomicOverwrite:
    patch:
      externalDocs:
        url: ''
      operationId: EnrichmentService_AtomicOverwriteEnrichments
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                enrichmentFields:
                  items:
                    $ref: '#/components/schemas/EnrichmentFieldDefinition'
                  type: array
                enrichmentType:
                  $ref: '#/components/schemas/EnrichmentType'
                requestEnrichments:
                  items:
                    $ref: '#/components/schemas/EnrichmentRequestModel'
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtomicOverwriteEnrichmentsResponse'
          description: ''
      summary: Atomic Overwrite Enrichments
      tags:
        - Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/enrichments:atomicOverwrite';


            let options = {
              method: 'PATCH',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"enrichmentFields":[{"enrichedFieldName":"string","fieldName":"string","selectedColumns":["string"]}],"enrichmentType":{"geoIp":{"withAsn":true}},"requestEnrichments":[{"enrichedFieldName":"string","enrichmentType":{"geoIp":{"withAsn":true}},"fieldName":"sourceIPs","selectedColumns":["string"]}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/enrichments:atomicOverwrite"


            payload = {
                "enrichmentFields": [
                    {
                        "enrichedFieldName": "string",
                        "fieldName": "string",
                        "selectedColumns": ["string"]
                    }
                ],
                "enrichmentType": {"geoIp": {"withAsn": True}},
                "requestEnrichments": [
                    {
                        "enrichedFieldName": "string",
                        "enrichmentType": {"geoIp": {"withAsn": True}},
                        "fieldName": "sourceIPs",
                        "selectedColumns": ["string"]
                    }
                ]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PATCH", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PATCH \
              --url https://api.coralogix.com/mgmt/openapi/enrichments:atomicOverwrite \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"enrichmentFields":[{"enrichedFieldName":"string","fieldName":"string","selectedColumns":["string"]}],"enrichmentType":{"geoIp":{"withAsn":true}},"requestEnrichments":[{"enrichedFieldName":"string","enrichmentType":{"geoIp":{"withAsn":true}},"fieldName":"sourceIPs","selectedColumns":["string"]}]}'
      description: No description available
  /events2metrics/events2metrics/v2:
    get:
      externalDocs:
        url: ''
      operationId: Events2MetricService_ListE2M
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListE2MResponse'
          description: ''
      summary: List E2Ms
      tags:
        - Events2Metrics Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2 \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: Events2MetricService_ReplaceE2M
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - additionalProperties: false
                  description: >-
                    This data structure represents an Event to Metrics (E2M)
                    object.
                  properties:
                    createTime:
                      example: 2022-06-30T12:30:00Z'
                      type: string
                    description:
                      example: avg and max the latency of catalog service
                      type: string
                    id:
                      example: d6a3658e-78d2-47d0-9b81-b2c551f01b09
                      maxLength: 36
                      minLength: 36
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
                      type: string
                    isInternal:
                      type: boolean
                    metricFields:
                      items:
                        $ref: '#/components/schemas/v2.MetricField'
                      type: array
                    metricLabels:
                      items:
                        $ref: '#/components/schemas/MetricLabel'
                      type: array
                    name:
                      example: Service_catalog_latency
                      type: string
                    permutations:
                      $ref: '#/components/schemas/E2MPermutations'
                    spansQuery:
                      $ref: '#/components/schemas/v2.SpansQuery'
                    type:
                      $ref: '#/components/schemas/E2MType'
                    updateTime:
                      example: 2022-06-30T12:30:00Z'
                      type: string
                  required:
                    - name
                    - type
                  title: E2M
                  type: object
                - additionalProperties: false
                  description: >-
                    This data structure represents an Event to Metrics (E2M)
                    object.
                  properties:
                    createTime:
                      example: 2022-06-30T12:30:00Z'
                      type: string
                    description:
                      example: avg and max the latency of catalog service
                      type: string
                    id:
                      example: d6a3658e-78d2-47d0-9b81-b2c551f01b09
                      maxLength: 36
                      minLength: 36
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
                      type: string
                    isInternal:
                      type: boolean
                    logsQuery:
                      $ref: '#/components/schemas/v2.LogsQuery'
                    metricFields:
                      items:
                        $ref: '#/components/schemas/v2.MetricField'
                      type: array
                    metricLabels:
                      items:
                        $ref: '#/components/schemas/MetricLabel'
                      type: array
                    name:
                      example: Service_catalog_latency
                      type: string
                    permutations:
                      $ref: '#/components/schemas/E2MPermutations'
                    type:
                      $ref: '#/components/schemas/E2MType'
                    updateTime:
                      example: 2022-06-30T12:30:00Z'
                      type: string
                  required:
                    - name
                    - type
                  title: E2M
                  type: object
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceE2MResponse'
          description: ''
      summary: Replace an E2M
      tags:
        - Events2Metrics Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"createTime":"2022-06-30T12:30:00Z\'","description":"avg and max the latency of catalog service","id":"d6a3658e-78d2-47d0-9b81-b2c551f01b09","isInternal":true,"metricFields":[{"aggregations":[{"aggType":"AGG_TYPE_UNSPECIFIED","enabled":true,"samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"targetMetricName":"alias_field_name_agg_func"}],"sourceField":"log_obj.numeric_field","targetBaseMetricName":"alias_field_name"}],"metricLabels":[{"sourceField":"log_obj.string_value","targetLabel":"alias_label_name"}],"name":"Service_catalog_latency","permutations":{"hasExceededLimit":true,"limit":30000},"spansQuery":{"actionFilters":["myAction"],"applicationnameFilters":["myApp"],"lucene":"applicationName:myApp","serviceFilters":["myService"],"subsystemnameFilters":["mySubsystem"]},"type":"E2M_TYPE_UNSPECIFIED","updateTime":"2022-06-30T12:30:00Z\'"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2"


            payload = {
                "createTime": "2022-06-30T12:30:00Z'",
                "description": "avg and max the latency of catalog service",
                "id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09",
                "isInternal": True,
                "metricFields": [
                    {
                        "aggregations": [
                            {
                                "aggType": "AGG_TYPE_UNSPECIFIED",
                                "enabled": True,
                                "samples": {"sampleType": "SAMPLE_TYPE_UNSPECIFIED"},
                                "targetMetricName": "alias_field_name_agg_func"
                            }
                        ],
                        "sourceField": "log_obj.numeric_field",
                        "targetBaseMetricName": "alias_field_name"
                    }
                ],
                "metricLabels": [
                    {
                        "sourceField": "log_obj.string_value",
                        "targetLabel": "alias_label_name"
                    }
                ],
                "name": "Service_catalog_latency",
                "permutations": {
                    "hasExceededLimit": True,
                    "limit": 30000
                },
                "spansQuery": {
                    "actionFilters": ["myAction"],
                    "applicationnameFilters": ["myApp"],
                    "lucene": "applicationName:myApp",
                    "serviceFilters": ["myService"],
                    "subsystemnameFilters": ["mySubsystem"]
                },
                "type": "E2M_TYPE_UNSPECIFIED",
                "updateTime": "2022-06-30T12:30:00Z'"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"createTime":"2022-06-30T12:30:00Z'\''","description":"avg and max the latency of catalog service","id":"d6a3658e-78d2-47d0-9b81-b2c551f01b09","isInternal":true,"metricFields":[{"aggregations":[{"aggType":"AGG_TYPE_UNSPECIFIED","enabled":true,"samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"targetMetricName":"alias_field_name_agg_func"}],"sourceField":"log_obj.numeric_field","targetBaseMetricName":"alias_field_name"}],"metricLabels":[{"sourceField":"log_obj.string_value","targetLabel":"alias_label_name"}],"name":"Service_catalog_latency","permutations":{"hasExceededLimit":true,"limit":30000},"spansQuery":{"actionFilters":["myAction"],"applicationnameFilters":["myApp"],"lucene":"applicationName:myApp","serviceFilters":["myService"],"subsystemnameFilters":["mySubsystem"]},"type":"E2M_TYPE_UNSPECIFIED","updateTime":"2022-06-30T12:30:00Z'\''"}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: Events2MetricService_CreateE2M
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - additionalProperties: false
                  description: >-
                    This data structure is used to create a new event to metric
                    definition
                  properties:
                    description:
                      example: avg and max the latency of catalog service
                      type: string
                    metricFields:
                      items:
                        $ref: '#/components/schemas/v2.MetricField'
                      type: array
                    metricLabels:
                      items:
                        $ref: '#/components/schemas/MetricLabel'
                      type: array
                    name:
                      example: Service catalog latency
                      type: string
                    permutationsLimit:
                      example: 30000
                      format: int32
                      type: integer
                    spansQuery:
                      $ref: '#/components/schemas/v2.SpansQuery'
                    type:
                      $ref: '#/components/schemas/E2MType'
                  required:
                    - name
                  title: E2M Create Params
                  type: object
                - additionalProperties: false
                  description: >-
                    This data structure is used to create a new event to metric
                    definition
                  properties:
                    description:
                      example: avg and max the latency of catalog service
                      type: string
                    logsQuery:
                      $ref: '#/components/schemas/v2.LogsQuery'
                    metricFields:
                      items:
                        $ref: '#/components/schemas/v2.MetricField'
                      type: array
                    metricLabels:
                      items:
                        $ref: '#/components/schemas/MetricLabel'
                      type: array
                    name:
                      example: Service catalog latency
                      type: string
                    permutationsLimit:
                      example: 30000
                      format: int32
                      type: integer
                    type:
                      $ref: '#/components/schemas/E2MType'
                  required:
                    - name
                  title: E2M Create Params
                  type: object
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateE2MResponse'
          description: ''
      summary: Create a new E2M
      tags:
        - Events2Metrics Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"description":"avg and max the latency of catalog service","metricFields":[{"aggregations":[{"aggType":"AGG_TYPE_UNSPECIFIED","enabled":true,"samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"targetMetricName":"alias_field_name_agg_func"}],"sourceField":"log_obj.numeric_field","targetBaseMetricName":"alias_field_name"}],"metricLabels":[{"sourceField":"log_obj.string_value","targetLabel":"alias_label_name"}],"name":"Service catalog latency","permutationsLimit":30000,"spansQuery":{"actionFilters":["myAction"],"applicationnameFilters":["myApp"],"lucene":"applicationName:myApp","serviceFilters":["myService"],"subsystemnameFilters":["mySubsystem"]},"type":"E2M_TYPE_UNSPECIFIED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2"


            payload = {
                "description": "avg and max the latency of catalog service",
                "metricFields": [
                    {
                        "aggregations": [
                            {
                                "aggType": "AGG_TYPE_UNSPECIFIED",
                                "enabled": True,
                                "samples": {"sampleType": "SAMPLE_TYPE_UNSPECIFIED"},
                                "targetMetricName": "alias_field_name_agg_func"
                            }
                        ],
                        "sourceField": "log_obj.numeric_field",
                        "targetBaseMetricName": "alias_field_name"
                    }
                ],
                "metricLabels": [
                    {
                        "sourceField": "log_obj.string_value",
                        "targetLabel": "alias_label_name"
                    }
                ],
                "name": "Service catalog latency",
                "permutationsLimit": 30000,
                "spansQuery": {
                    "actionFilters": ["myAction"],
                    "applicationnameFilters": ["myApp"],
                    "lucene": "applicationName:myApp",
                    "serviceFilters": ["myService"],
                    "subsystemnameFilters": ["mySubsystem"]
                },
                "type": "E2M_TYPE_UNSPECIFIED"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"description":"avg and max the latency of catalog service","metricFields":[{"aggregations":[{"aggType":"AGG_TYPE_UNSPECIFIED","enabled":true,"samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"targetMetricName":"alias_field_name_agg_func"}],"sourceField":"log_obj.numeric_field","targetBaseMetricName":"alias_field_name"}],"metricLabels":[{"sourceField":"log_obj.string_value","targetLabel":"alias_label_name"}],"name":"Service catalog latency","permutationsLimit":30000,"spansQuery":{"actionFilters":["myAction"],"applicationnameFilters":["myApp"],"lucene":"applicationName:myApp","serviceFilters":["myService"],"subsystemnameFilters":["mySubsystem"]},"type":"E2M_TYPE_UNSPECIFIED"}'
      description: No description available
  /events2metrics/events2metrics/v2/batch:
    post:
      externalDocs:
        url: ''
      operationId: Events2MetricService_AtomicBatchExecuteE2M
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                requests:
                  items:
                    $ref: '#/components/schemas/E2MExecutionRequest'
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtomicBatchExecuteE2MResponse'
          description: ''
      summary: Atomic Batch Execute E2M
      tags:
        - Events2Metrics Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2/batch';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requests":[{"create":{"e2m":{"description":"avg and max the latency of catalog service","metricFields":[{"aggregations":[{"aggType":"AGG_TYPE_UNSPECIFIED","enabled":true,"samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"targetMetricName":"alias_field_name_agg_func"}],"sourceField":"log_obj.numeric_field","targetBaseMetricName":"alias_field_name"}],"metricLabels":[{"sourceField":"log_obj.string_value","targetLabel":"alias_label_name"}],"name":"Service catalog latency","permutationsLimit":30000,"spansQuery":{"actionFilters":["myAction"],"applicationnameFilters":["myApp"],"lucene":"applicationName:myApp","serviceFilters":["myService"],"subsystemnameFilters":["mySubsystem"]},"type":"E2M_TYPE_UNSPECIFIED"}}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2/batch"


            payload = {"requests": [{"create": {"e2m": {
                                "description": "avg and max the latency of catalog service",
                                "metricFields": [
                                    {
                                        "aggregations": [
                                            {
                                                "aggType": "AGG_TYPE_UNSPECIFIED",
                                                "enabled": True,
                                                "samples": {"sampleType": "SAMPLE_TYPE_UNSPECIFIED"},
                                                "targetMetricName": "alias_field_name_agg_func"
                                            }
                                        ],
                                        "sourceField": "log_obj.numeric_field",
                                        "targetBaseMetricName": "alias_field_name"
                                    }
                                ],
                                "metricLabels": [
                                    {
                                        "sourceField": "log_obj.string_value",
                                        "targetLabel": "alias_label_name"
                                    }
                                ],
                                "name": "Service catalog latency",
                                "permutationsLimit": 30000,
                                "spansQuery": {
                                    "actionFilters": ["myAction"],
                                    "applicationnameFilters": ["myApp"],
                                    "lucene": "applicationName:myApp",
                                    "serviceFilters": ["myService"],
                                    "subsystemnameFilters": ["mySubsystem"]
                                },
                                "type": "E2M_TYPE_UNSPECIFIED"
                            }}}]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2/batch \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requests":[{"create":{"e2m":{"description":"avg and max the latency of catalog service","metricFields":[{"aggregations":[{"aggType":"AGG_TYPE_UNSPECIFIED","enabled":true,"samples":{"sampleType":"SAMPLE_TYPE_UNSPECIFIED"},"targetMetricName":"alias_field_name_agg_func"}],"sourceField":"log_obj.numeric_field","targetBaseMetricName":"alias_field_name"}],"metricLabels":[{"sourceField":"log_obj.string_value","targetLabel":"alias_label_name"}],"name":"Service catalog latency","permutationsLimit":30000,"spansQuery":{"actionFilters":["myAction"],"applicationnameFilters":["myApp"],"lucene":"applicationName:myApp","serviceFilters":["myService"],"subsystemnameFilters":["mySubsystem"]},"type":"E2M_TYPE_UNSPECIFIED"}}}]}'
      description: No description available
  /events2metrics/events2metrics/v2/labels:cardinality:
    get:
      externalDocs:
        url: ''
      operationId: Events2MetricService_ListLabelsCardinality
      parameters:
        - in: query
          name: spans_query
          required: false
          schema:
            description: This data structure represents a query for spans.
            externalDocs:
              description: Find out more about events2metrics
              url: >-
                https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
            properties:
              actionFilters:
                items:
                  example: myAction
                  type: string
                type: array
              applicationnameFilters:
                items:
                  example: myApp
                  type: string
                type: array
              lucene:
                example: applicationName:myApp
                type: string
              serviceFilters:
                items:
                  example: myService
                  type: string
                type: array
              subsystemnameFilters:
                items:
                  example: mySubsystem
                  type: string
                type: array
            title: SpansQuery
            type: object
        - in: query
          name: logs_query
          required: false
          schema:
            description: This data structure represents a query for logs.
            externalDocs:
              description: Find out more about events2metrics
              url: >-
                https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
            properties:
              alias:
                example: new_query
                type: string
              applicationnameFilters:
                items:
                  example: app_name
                  type: string
                type: array
              lucene:
                example: 'log_obj.numeric_field: [50 TO 100]'
                type: string
              severityFilters:
                items:
                  enum:
                    - SEVERITY_UNSPECIFIED
                    - SEVERITY_DEBUG
                    - SEVERITY_VERBOSE
                    - SEVERITY_INFO
                    - SEVERITY_WARNING
                    - SEVERITY_ERROR
                    - SEVERITY_CRITICAL
                  type: string
                type: array
              subsystemnameFilters:
                items:
                  example: sub_name
                  type: string
                type: array
            title: SpansQuery
            type: object
        - in: query
          name: metric_labels
          required: false
          schema:
            items:
              description: This data structure represents a metric label
              externalDocs:
                description: Find out more about events2metrics
                url: >-
                  https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
              properties:
                sourceField:
                  example: log_obj.string_value
                  type: string
                targetLabel:
                  example: alias_label_name
                  pattern: ^[\w/-]+$
                  type: string
              required:
                - targetLabel
                - sourceField
              title: Metric Label
              type: object
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLabelsCardinalityResponse'
          description: ''
      summary: List E2M Labels Cardinality
      tags:
        - Events2Metrics Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2/labels:cardinality?spans_query=SOME_OBJECT_VALUE&logs_query=SOME_OBJECT_VALUE&metric_labels=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2/labels:cardinality"


            querystring =
            {"spans_query":"SOME_OBJECT_VALUE","logs_query":"SOME_OBJECT_VALUE","metric_labels":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2/labels:cardinality?spans_query=SOME_OBJECT_VALUE&logs_query=SOME_OBJECT_VALUE&metric_labels=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /events2metrics/events2metrics/v2/limits:
    get:
      externalDocs:
        url: ''
      operationId: Events2MetricService_GetLimits
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLimitsResponse'
          description: ''
      summary: Get E2M Limits
      tags:
        - Events2Metrics Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2/limits';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2/limits"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2/limits \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /events2metrics/events2metrics/v2/{id}:
    get:
      externalDocs:
        url: ''
      operationId: Events2MetricService_GetE2M
      parameters:
        - in: path
          name: id
          required: true
          schema:
            example: d6a3658e-78d2-47d0-9b81-b2c551f01b09
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetE2MResponse'
          description: ''
      summary: Get an E2M
      tags:
        - Events2Metrics Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2/d6a3658e-78d2-47d0-9b81-b2c551f01b09';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2/d6a3658e-78d2-47d0-9b81-b2c551f01b09"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2/d6a3658e-78d2-47d0-9b81-b2c551f01b09 \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: Events2MetricService_DeleteE2M
      parameters:
        - in: path
          name: id
          required: true
          schema:
            example: d6a3658e-78d2-47d0-9b81-b2c551f01b09
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteE2MResponse'
          description: ''
      summary: Delete an E2M
      tags:
        - Events2Metrics Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2/d6a3658e-78d2-47d0-9b81-b2c551f01b09';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2/d6a3658e-78d2-47d0-9b81-b2c551f01b09"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/events2metrics/events2metrics/v2/d6a3658e-78d2-47d0-9b81-b2c551f01b09 \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /incidents/incidents/v1:
    post:
      description: >-
        Lists all available incidents based on specified filters and order. The
        list is ordered in an unspecified direction and sorted by creation time.


        Requires the following permissions:

        - `incidents:read`
      externalDocs:
        url: ''
      operationId: IncidentsService_ListIncidents
      parameters:
        - in: query
          name: filter
          required: false
          schema:
            description: Filter configuration for incidents
            externalDocs:
              url: ''
            properties:
              applicationName:
                items:
                  description: Filter by application names
                  type: string
                type: array
              assignee:
                items:
                  description: Filter by assignee
                  type: string
                type: array
              contextualLabels:
                additionalProperties:
                  description: Represents contextual label values for filtering incidents
                  externalDocs:
                    url: ''
                  properties:
                    contextualLabelValues:
                      items:
                        type: string
                      type: array
                  required:
                    - contextualLabelValues
                  title: Contextual label values
                  type: object
                type: object
              createdAtRange: {}
              displayLabels:
                additionalProperties:
                  description: Represents display label values for filtering incidents
                  externalDocs:
                    url: ''
                  properties:
                    displayLabelValues:
                      items:
                        type: string
                      type: array
                  required:
                    - displayLabelValues
                  title: Display label values
                  type: object
                type: object
              endTime:
                deprecated: true
                description: >-
                  Filters all incidents that were open in the given timeframe
                  end time (deprecated, use incident_open_range instead)
                format: date-time
                type: string
              incidentDurationRange: {}
              isMuted:
                description: Indicates if the incident is muted
                type: boolean
              metaLabels:
                items:
                  externalDocs:
                    url: ''
                  properties:
                    key:
                      example: key
                      type: string
                    value:
                      example: value
                      type: string
                  title: Incident meta label
                  type: object
                type: array
              metaLabelsOp:
                description: The operator for the meta labels filter
                enum:
                  - FILTER_OPERATOR_OR_OR_UNSPECIFIED
                  - FILTER_OPERATOR_AND
                type: string
              searchQuery: {}
              severity:
                items:
                  description: Filter by incident severity
                  enum:
                    - INCIDENT_SEVERITY_UNSPECIFIED
                    - INCIDENT_SEVERITY_INFO
                    - INCIDENT_SEVERITY_WARNING
                    - INCIDENT_SEVERITY_ERROR
                    - INCIDENT_SEVERITY_CRITICAL
                    - INCIDENT_SEVERITY_LOW
                  type: string
                type: array
              startTime:
                deprecated: true
                description: >-
                  Filters all incidents that were open in the given timeframe
                  start time (deprecated, use incident_open_range instead)
                format: date-time
                type: string
              state:
                items:
                  description: Filter by incident state
                  enum:
                    - INCIDENT_STATE_UNSPECIFIED
                    - INCIDENT_STATE_TRIGGERED
                    - INCIDENT_STATE_RESOLVED
                  type: string
                type: array
              status:
                items:
                  description: Filter by incident status
                  enum:
                    - INCIDENT_STATUS_UNSPECIFIED
                    - INCIDENT_STATUS_TRIGGERED
                    - INCIDENT_STATUS_ACKNOWLEDGED
                    - INCIDENT_STATUS_RESOLVED
                  type: string
                type: array
              subsystemName:
                items:
                  description: Filter by subsystem names
                  type: string
                type: array
            title: Incident query filter
            type: object
        - in: query
          name: pagination
          required: false
          schema:
            description: Pagination parameters for list requests
            externalDocs:
              url: ''
            properties:
              pageSize:
                description: Number of items to return per page
                example: 10
                format: int64
                type: integer
              pageToken:
                description: Token for the next page of results
                example: next_page_token
                type: string
            required:
              - pageSize
            title: Pagination request
            type: object
        - in: query
          name: order_bys
          required: false
          schema:
            items:
              oneOf:
                - additionalProperties: false
                  externalDocs:
                    url: ''
                  properties:
                    direction:
                      enum:
                        - ORDER_BY_DIRECTION_UNSPECIFIED
                        - ORDER_BY_DIRECTION_ASC
                        - ORDER_BY_DIRECTION_DESC
                      type: string
                    incidentField:
                      enum:
                        - INCIDENTS_FIELDS_UNSPECIFIED
                        - INCIDENTS_FIELDS_ID
                        - INCIDENTS_FIELDS_SEVERITY
                        - INCIDENTS_FIELDS_NAME
                        - INCIDENTS_FIELDS_CREATED_TIME
                        - INCIDENTS_FIELDS_CLOSED_TIME
                        - INCIDENTS_FIELDS_STATE
                        - INCIDENTS_FIELDS_STATUS
                        - INCIDENTS_FIELDS_LAST_STATE_UPDATE_TIME
                        - INCIDENTS_FIELDS_APPLICATION_NAME
                        - INCIDENTS_FIELDS_SUBSYSTEM_NAME
                        - INCIDENTS_FIELDS_DURATION
                      type: string
                  required:
                    - field
                    - direction
                  title: Incident order by
                  type: object
                - additionalProperties: false
                  externalDocs:
                    url: ''
                  properties:
                    contextualLabel:
                      type: string
                    direction:
                      enum:
                        - ORDER_BY_DIRECTION_UNSPECIFIED
                        - ORDER_BY_DIRECTION_ASC
                        - ORDER_BY_DIRECTION_DESC
                      type: string
                  required:
                    - field
                    - direction
                  title: Incident order by
                  type: object
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIncidentsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: List incidents with filters
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1?filter=SOME_OBJECT_VALUE&pagination=SOME_OBJECT_VALUE&order_bys=SOME_ARRAY_VALUE';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1"


            querystring =
            {"filter":"SOME_OBJECT_VALUE","pagination":"SOME_OBJECT_VALUE","order_bys":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1?filter=SOME_OBJECT_VALUE&pagination=SOME_OBJECT_VALUE&order_bys=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/acknowledge:
    post:
      description: |-
        Mark one or more incidents as acknowledged.

        Requires the following permissions:
        - `incidents:acknowledge`
      externalDocs:
        url: ''
      operationId: IncidentsService_AcknowledgeIncidents
      parameters:
        - in: query
          name: incident_ids
          required: false
          schema:
            items:
              description: List of incident IDs to acknowledge
              example:
                - incident_id_1
                - incident_id_2
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcknowledgeIncidentsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Acknowledge incidents
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:acknowledge
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/acknowledge?incident_ids=SOME_ARRAY_VALUE';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/acknowledge"


            querystring = {"incident_ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/acknowledge?incident_ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/aggregations:
    get:
      description: >-
        Retrieve aggregated incident data with support for grouping and
        filtering.


        Requires the following permissions:

        - `incidents:read`
      externalDocs:
        url: ''
      operationId: IncidentsService_ListIncidentAggregations
      parameters:
        - in: query
          name: filter
          required: false
          schema:
            description: Filter configuration for incidents
            externalDocs:
              url: ''
            properties:
              applicationName:
                items:
                  description: Filter by application names
                  type: string
                type: array
              assignee:
                items:
                  description: Filter by assignee
                  type: string
                type: array
              contextualLabels:
                additionalProperties:
                  description: Represents contextual label values for filtering incidents
                  externalDocs:
                    url: ''
                  properties:
                    contextualLabelValues:
                      items:
                        type: string
                      type: array
                  required:
                    - contextualLabelValues
                  title: Contextual label values
                  type: object
                type: object
              createdAtRange: {}
              displayLabels:
                additionalProperties:
                  description: Represents display label values for filtering incidents
                  externalDocs:
                    url: ''
                  properties:
                    displayLabelValues:
                      items:
                        type: string
                      type: array
                  required:
                    - displayLabelValues
                  title: Display label values
                  type: object
                type: object
              endTime:
                deprecated: true
                description: >-
                  Filters all incidents that were open in the given timeframe
                  end time (deprecated, use incident_open_range instead)
                format: date-time
                type: string
              incidentDurationRange: {}
              isMuted:
                description: Indicates if the incident is muted
                type: boolean
              metaLabels:
                items:
                  externalDocs:
                    url: ''
                  properties:
                    key:
                      example: key
                      type: string
                    value:
                      example: value
                      type: string
                  title: Incident meta label
                  type: object
                type: array
              metaLabelsOp:
                description: The operator for the meta labels filter
                enum:
                  - FILTER_OPERATOR_OR_OR_UNSPECIFIED
                  - FILTER_OPERATOR_AND
                type: string
              searchQuery: {}
              severity:
                items:
                  description: Filter by incident severity
                  enum:
                    - INCIDENT_SEVERITY_UNSPECIFIED
                    - INCIDENT_SEVERITY_INFO
                    - INCIDENT_SEVERITY_WARNING
                    - INCIDENT_SEVERITY_ERROR
                    - INCIDENT_SEVERITY_CRITICAL
                    - INCIDENT_SEVERITY_LOW
                  type: string
                type: array
              startTime:
                deprecated: true
                description: >-
                  Filters all incidents that were open in the given timeframe
                  start time (deprecated, use incident_open_range instead)
                format: date-time
                type: string
              state:
                items:
                  description: Filter by incident state
                  enum:
                    - INCIDENT_STATE_UNSPECIFIED
                    - INCIDENT_STATE_TRIGGERED
                    - INCIDENT_STATE_RESOLVED
                  type: string
                type: array
              status:
                items:
                  description: Filter by incident status
                  enum:
                    - INCIDENT_STATUS_UNSPECIFIED
                    - INCIDENT_STATUS_TRIGGERED
                    - INCIDENT_STATUS_ACKNOWLEDGED
                    - INCIDENT_STATUS_RESOLVED
                  type: string
                type: array
              subsystemName:
                items:
                  description: Filter by subsystem names
                  type: string
                type: array
            title: Incident query filter
            type: object
        - in: query
          name: group_bys
          required: false
          schema:
            items:
              oneOf:
                - additionalProperties: false
                  externalDocs:
                    url: ''
                  properties:
                    incidentField:
                      description: The field to group by
                      enum:
                        - INCIDENTS_FIELDS_UNSPECIFIED
                        - INCIDENTS_FIELDS_ID
                        - INCIDENTS_FIELDS_SEVERITY
                        - INCIDENTS_FIELDS_NAME
                        - INCIDENTS_FIELDS_CREATED_TIME
                        - INCIDENTS_FIELDS_CLOSED_TIME
                        - INCIDENTS_FIELDS_STATE
                        - INCIDENTS_FIELDS_STATUS
                        - INCIDENTS_FIELDS_LAST_STATE_UPDATE_TIME
                        - INCIDENTS_FIELDS_APPLICATION_NAME
                        - INCIDENTS_FIELDS_SUBSYSTEM_NAME
                        - INCIDENTS_FIELDS_DURATION
                      example: INCIDENTS_FIELDS_ID
                      type: string
                    orderByDirection:
                      description: The order by direction.
                      enum:
                        - ORDER_BY_DIRECTION_UNSPECIFIED
                        - ORDER_BY_DIRECTION_ASC
                        - ORDER_BY_DIRECTION_DESC
                      example: ORDER_BY_DIRECTION_ASC
                      type: string
                  required:
                    - field
                  title: Incident group by
                  type: object
                - additionalProperties: false
                  externalDocs:
                    url: ''
                  properties:
                    contextualLabel:
                      description: The contextual label to group by.
                      type: string
                    orderByDirection:
                      description: The order by direction.
                      enum:
                        - ORDER_BY_DIRECTION_UNSPECIFIED
                        - ORDER_BY_DIRECTION_ASC
                        - ORDER_BY_DIRECTION_DESC
                      example: ORDER_BY_DIRECTION_ASC
                      type: string
                  required:
                    - field
                  title: Incident group by
                  type: object
            type: array
        - in: query
          name: pagination
          required: false
          schema:
            description: Pagination parameters for list requests
            externalDocs:
              url: ''
            properties:
              pageSize:
                description: Number of items to return per page
                example: 10
                format: int64
                type: integer
              pageToken:
                description: Token for the next page of results
                example: next_page_token
                type: string
            required:
              - pageSize
            title: Pagination request
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIncidentAggregationsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get incident aggregations
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/aggregations?filter=SOME_OBJECT_VALUE&group_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/aggregations"


            querystring =
            {"filter":"SOME_OBJECT_VALUE","group_bys":"SOME_ARRAY_VALUE","pagination":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/aggregations?filter=SOME_OBJECT_VALUE&group_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/batch:
    get:
      description: |-
        Retrieve multiple incidents by their IDs in a single request.

        Requires the following permissions:
        - `incidents:read`
      externalDocs:
        url: ''
      operationId: IncidentsService_BatchGetIncident
      parameters:
        - in: query
          name: ids
          required: false
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetIncidentResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get multiple incidents by IDs
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/batch?ids=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/batch"


            querystring = {"ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/batch?ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/by-user:
    post:
      description: |-
        Assign one or more incidents to a specific user.

        Requires the following permissions:
        - `incidents:assign`
      externalDocs:
        url: ''
      operationId: IncidentsService_AssignIncidents
      parameters:
        - in: query
          name: incident_ids
          required: false
          schema:
            items:
              description: List of incident IDs to assign
              example:
                - incident_id_1
                - incident_id_2
              type: string
            type: array
        - in: query
          name: assigned_to
          required: false
          schema:
            externalDocs:
              url: ''
            properties:
              userId:
                example: user_id
                type: string
            required:
              - userId
            title: User details
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignIncidentsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Assign incidents to a user
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:assign
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user?incident_ids=SOME_ARRAY_VALUE&assigned_to=SOME_OBJECT_VALUE';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user"


            querystring =
            {"incident_ids":"SOME_ARRAY_VALUE","assigned_to":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user?incident_ids=SOME_ARRAY_VALUE&assigned_to=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
    delete:
      description: |-
        Remove user assignments from one or more incidents.

        Requires the following permissions:
        - `incidents:assign`
      externalDocs:
        url: ''
      operationId: IncidentsService_UnassignIncidents
      parameters:
        - in: query
          name: incident_ids
          required: false
          schema:
            items:
              description: List of incident IDs to unassign
              example:
                - incident_id_1
                - incident_id_2
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnassignIncidentsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Remove incident user assignments
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:assign
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user?incident_ids=SOME_ARRAY_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user"


            querystring = {"incident_ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/by-user?incident_ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/close:
    post:
      externalDocs:
        url: ''
      operationId: IncidentsService_CloseIncidents
      parameters:
        - in: query
          name: incident_ids
          required: false
          schema:
            items:
              description: List of incident IDs to close
              example:
                - incident_id_1
                - incident_id_2
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloseIncidentsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Close incidents
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:close
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/close?incident_ids=SOME_ARRAY_VALUE';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/close"


            querystring = {"incident_ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/close?incident_ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /incidents/incidents/v1/events:
    get:
      description: >-
        List incident events with support for filtering, pagination, and
        ordering.


        Requires the following permissions:

        - `incidents:read`
      externalDocs:
        url: ''
      operationId: IncidentsService_ListIncidentEvents
      parameters:
        - in: query
          name: filter
          required: false
          schema:
            description: Filter configuration for incident events
            externalDocs:
              url: ''
            properties:
              contextualLabels:
                additionalProperties:
                  description: Represents contextual label values for filtering incidents
                  externalDocs:
                    url: ''
                  properties:
                    contextualLabelValues:
                      items:
                        type: string
                      type: array
                  required:
                    - contextualLabelValues
                  title: Contextual label values
                  type: object
                type: object
              displayLabels:
                additionalProperties:
                  description: Represents display label values for filtering incidents
                  externalDocs:
                    url: ''
                  properties:
                    displayLabelValues:
                      items:
                        type: string
                      type: array
                  required:
                    - displayLabelValues
                  title: Display label values
                  type: object
                type: object
              isMuted:
                description: Indicates if the incident is muted
                type: boolean
              labels: {}
              name:
                description: The name of the incident
                type: string
              severity:
                items:
                  description: The severity of the incident
                  enum:
                    - INCIDENT_SEVERITY_UNSPECIFIED
                    - INCIDENT_SEVERITY_INFO
                    - INCIDENT_SEVERITY_WARNING
                    - INCIDENT_SEVERITY_ERROR
                    - INCIDENT_SEVERITY_CRITICAL
                    - INCIDENT_SEVERITY_LOW
                  type: string
                type: array
              status:
                items:
                  description: The status of the incident
                  enum:
                    - INCIDENT_STATUS_UNSPECIFIED
                    - INCIDENT_STATUS_TRIGGERED
                    - INCIDENT_STATUS_ACKNOWLEDGED
                    - INCIDENT_STATUS_RESOLVED
                  type: string
                type: array
              timestamp: {}
            title: Incident event query filter
            type: object
        - in: query
          name: pagination
          required: false
          schema:
            description: Pagination parameters for list requests
            externalDocs:
              url: ''
            properties:
              pageSize:
                description: Number of items to return per page
                example: 10
                format: int64
                type: integer
              pageToken:
                description: Token for the next page of results
                example: next_page_token
                type: string
            required:
              - pageSize
            title: Pagination request
            type: object
        - in: query
          name: order_by
          required: false
          schema:
            externalDocs:
              url: ''
            properties:
              direction:
                description: Sort direction (ascending or descending)
                enum:
                  - ORDER_BY_DIRECTION_UNSPECIFIED
                  - ORDER_BY_DIRECTION_ASC
                  - ORDER_BY_DIRECTION_DESC
                example: ORDER_BY_DIRECTION_ASC
                type: string
              field:
                description: Field to order by
                enum:
                  - INCIDENT_EVENT_ORDER_BY_FIELD_TYPE_TIMESTAMP_OR_UNSPECIFIED
                example: INCIDENT_EVENT_ORDER_BY_FIELD_TYPE_TIMESTAMP_OR_UNSPECIFIED
                type: string
            title: List incident events order by request
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIncidentEventsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: List incident events with filters
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events?filter=SOME_OBJECT_VALUE&pagination=SOME_OBJECT_VALUE&order_by=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events"


            querystring =
            {"filter":"SOME_OBJECT_VALUE","pagination":"SOME_OBJECT_VALUE","order_by":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events?filter=SOME_OBJECT_VALUE&pagination=SOME_OBJECT_VALUE&order_by=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/events/count:
    get:
      description: |-
        Retrieve the total count of incident events matching a filter.

        Requires the following permissions:
        - `incidents:read`
      externalDocs:
        url: ''
      operationId: IncidentsService_ListIncidentEventsTotalCount
      parameters:
        - in: query
          name: filter
          required: false
          schema:
            description: Filter configuration for incident events
            externalDocs:
              url: ''
            properties:
              contextualLabels:
                additionalProperties:
                  description: Represents contextual label values for filtering incidents
                  externalDocs:
                    url: ''
                  properties:
                    contextualLabelValues:
                      items:
                        type: string
                      type: array
                  required:
                    - contextualLabelValues
                  title: Contextual label values
                  type: object
                type: object
              displayLabels:
                additionalProperties:
                  description: Represents display label values for filtering incidents
                  externalDocs:
                    url: ''
                  properties:
                    displayLabelValues:
                      items:
                        type: string
                      type: array
                  required:
                    - displayLabelValues
                  title: Display label values
                  type: object
                type: object
              isMuted:
                description: Indicates if the incident is muted
                type: boolean
              labels: {}
              name:
                description: The name of the incident
                type: string
              severity:
                items:
                  description: The severity of the incident
                  enum:
                    - INCIDENT_SEVERITY_UNSPECIFIED
                    - INCIDENT_SEVERITY_INFO
                    - INCIDENT_SEVERITY_WARNING
                    - INCIDENT_SEVERITY_ERROR
                    - INCIDENT_SEVERITY_CRITICAL
                    - INCIDENT_SEVERITY_LOW
                  type: string
                type: array
              status:
                items:
                  description: The status of the incident
                  enum:
                    - INCIDENT_STATUS_UNSPECIFIED
                    - INCIDENT_STATUS_TRIGGERED
                    - INCIDENT_STATUS_ACKNOWLEDGED
                    - INCIDENT_STATUS_RESOLVED
                  type: string
                type: array
              timestamp: {}
            title: Incident event query filter
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIncidentEventsTotalCountResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get total count of incident events
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/count?filter=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/count"


            querystring = {"filter":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/count?filter=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/events/filter-values:
    get:
      externalDocs:
        url: ''
      operationId: IncidentsService_ListIncidentEventsFilterValues
      parameters:
        - in: query
          name: filter
          required: false
          schema:
            description: Filter configuration for incident events
            externalDocs:
              url: ''
            properties:
              contextualLabels:
                additionalProperties:
                  description: Represents contextual label values for filtering incidents
                  externalDocs:
                    url: ''
                  properties:
                    contextualLabelValues:
                      items:
                        type: string
                      type: array
                  required:
                    - contextualLabelValues
                  title: Contextual label values
                  type: object
                type: object
              displayLabels:
                additionalProperties:
                  description: Represents display label values for filtering incidents
                  externalDocs:
                    url: ''
                  properties:
                    displayLabelValues:
                      items:
                        type: string
                      type: array
                  required:
                    - displayLabelValues
                  title: Display label values
                  type: object
                type: object
              isMuted:
                description: Indicates if the incident is muted
                type: boolean
              labels: {}
              name:
                description: The name of the incident
                type: string
              severity:
                items:
                  description: The severity of the incident
                  enum:
                    - INCIDENT_SEVERITY_UNSPECIFIED
                    - INCIDENT_SEVERITY_INFO
                    - INCIDENT_SEVERITY_WARNING
                    - INCIDENT_SEVERITY_ERROR
                    - INCIDENT_SEVERITY_CRITICAL
                    - INCIDENT_SEVERITY_LOW
                  type: string
                type: array
              status:
                items:
                  description: The status of the incident
                  enum:
                    - INCIDENT_STATUS_UNSPECIFIED
                    - INCIDENT_STATUS_TRIGGERED
                    - INCIDENT_STATUS_ACKNOWLEDGED
                    - INCIDENT_STATUS_RESOLVED
                  type: string
                type: array
              timestamp: {}
            title: Incident event query filter
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIncidentEventsFilterValuesResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get available incident event filter values
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/filter-values?filter=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/filter-values"


            querystring = {"filter":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/filter-values?filter=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /incidents/incidents/v1/events/{event_id}:
    get:
      description: >-
        Retrieve detailed information about a single incident by related alert
        event id.


        Requires the following permissions:

        - `incidents:read`
      externalDocs:
        url: ''
      operationId: IncidentsService_GetIncidentByEventId
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            description: Event ID associated to the Incident to acknowledge
            example: event_id_1
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIncidentByEventIdResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get incident by event ID
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1 \
              --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/events/{event_id}/acknowledge:
    post:
      description: |-
        Mark incident as acknowledged by event id.

        Requires the following permissions:
        - `incidents:acknowledge`
      externalDocs:
        url: ''
      operationId: IncidentsService_AcknowledgeIncidentByEventId
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            description: Event ID associated to the Incident to acknowledge
            example: event_id_1
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcknowledgeIncidentByEventIdResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Acknowledge incident by event id
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:acknowledge
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/acknowledge';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/acknowledge"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/acknowledge \
              --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/events/{event_id}/resolve:
    post:
      description: |-
        Mark incident as resolved by event id.

        Requires the following permissions:
        - `incidents:close`
      externalDocs:
        url: ''
      operationId: IncidentsService_ResolveIncidentByEventId
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            description: Event ID associated to the Incident to resolve
            example: event_id_1
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResolveIncidentByEventIdResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Resolve incident by event id
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:close
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/resolve';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/resolve"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/events/event_id_1/resolve \
              --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/filter-values:
    post:
      externalDocs:
        url: ''
      operationId: IncidentsService_GetFilterValues
      parameters:
        - in: query
          name: filter
          required: false
          schema:
            description: Filter configuration for incidents
            externalDocs:
              url: ''
            properties:
              applicationName:
                items:
                  description: Filter by application names
                  type: string
                type: array
              assignee:
                items:
                  description: Filter by assignee
                  type: string
                type: array
              contextualLabels:
                additionalProperties:
                  description: Represents contextual label values for filtering incidents
                  externalDocs:
                    url: ''
                  properties:
                    contextualLabelValues:
                      items:
                        type: string
                      type: array
                  required:
                    - contextualLabelValues
                  title: Contextual label values
                  type: object
                type: object
              createdAtRange: {}
              displayLabels:
                additionalProperties:
                  description: Represents display label values for filtering incidents
                  externalDocs:
                    url: ''
                  properties:
                    displayLabelValues:
                      items:
                        type: string
                      type: array
                  required:
                    - displayLabelValues
                  title: Display label values
                  type: object
                type: object
              endTime:
                deprecated: true
                description: >-
                  Filters all incidents that were open in the given timeframe
                  end time (deprecated, use incident_open_range instead)
                format: date-time
                type: string
              incidentDurationRange: {}
              isMuted:
                description: Indicates if the incident is muted
                type: boolean
              metaLabels:
                items:
                  externalDocs:
                    url: ''
                  properties:
                    key:
                      example: key
                      type: string
                    value:
                      example: value
                      type: string
                  title: Incident meta label
                  type: object
                type: array
              metaLabelsOp:
                description: The operator for the meta labels filter
                enum:
                  - FILTER_OPERATOR_OR_OR_UNSPECIFIED
                  - FILTER_OPERATOR_AND
                type: string
              searchQuery: {}
              severity:
                items:
                  description: Filter by incident severity
                  enum:
                    - INCIDENT_SEVERITY_UNSPECIFIED
                    - INCIDENT_SEVERITY_INFO
                    - INCIDENT_SEVERITY_WARNING
                    - INCIDENT_SEVERITY_ERROR
                    - INCIDENT_SEVERITY_CRITICAL
                    - INCIDENT_SEVERITY_LOW
                  type: string
                type: array
              startTime:
                deprecated: true
                description: >-
                  Filters all incidents that were open in the given timeframe
                  start time (deprecated, use incident_open_range instead)
                format: date-time
                type: string
              state:
                items:
                  description: Filter by incident state
                  enum:
                    - INCIDENT_STATE_UNSPECIFIED
                    - INCIDENT_STATE_TRIGGERED
                    - INCIDENT_STATE_RESOLVED
                  type: string
                type: array
              status:
                items:
                  description: Filter by incident status
                  enum:
                    - INCIDENT_STATUS_UNSPECIFIED
                    - INCIDENT_STATUS_TRIGGERED
                    - INCIDENT_STATUS_ACKNOWLEDGED
                    - INCIDENT_STATUS_RESOLVED
                  type: string
                type: array
              subsystemName:
                items:
                  description: Filter by subsystem names
                  type: string
                type: array
            title: Incident query filter
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFilterValuesResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get available filter values
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/filter-values?filter=SOME_OBJECT_VALUE';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/filter-values"


            querystring = {"filter":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/filter-values?filter=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /incidents/incidents/v1/resolve:
    post:
      description: |-
        Mark one or more incidents as resolved.

        Requires the following permissions:
        - `incidents:close`
      externalDocs:
        url: ''
      operationId: IncidentsService_ResolveIncidents
      parameters:
        - in: query
          name: incident_ids
          required: false
          schema:
            items:
              description: List of incident IDs to resolve
              example:
                - incident_id_1
                - incident_id_2
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResolveIncidentsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Resolve incidents
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:close
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/resolve?incident_ids=SOME_ARRAY_VALUE';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/resolve"


            querystring = {"incident_ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/resolve?incident_ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/{id}:
    get:
      description: >-
        Retrieve detailed information about a single incident by its unique
        identifier.


        Requires the following permissions:

        - `incidents:read`
      externalDocs:
        url: ''
      operationId: IncidentsService_GetIncident
      parameters:
        - in: path
          name: id
          required: true
          schema:
            example: incident_id
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIncidentResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get incident by ID
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id \
              --header 'Authorization: Bearer <API_KEY>'
  /incidents/incidents/v1/{incident_id}/events:
    get:
      description: >-
        Retrieve a chronological list of all events associated with a specific
        incident. Includes state changes, assignments, acknowledgments, and
        resolutions.


        Requires the following permissions:

        - `incidents:read`
      externalDocs:
        url: ''
      operationId: IncidentsService_GetIncidentEvents
      parameters:
        - in: path
          name: incident_id
          required: true
          schema:
            description: ID of the incident to retrieve events for
            example: incident_id
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIncidentEventsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get incident events
      tags:
        - Incidents service
      x-coralogixPermissions:
        - incidents:read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id/events';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id/events"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/incidents/incidents/v1/incident_id/events \
              --header 'Authorization: Bearer <API_KEY>'
  /integrations/contextual-data/v1:
    get:
      externalDocs:
        url: ''
      operationId: ContextualDataIntegrationService_GetContextualDataIntegrations
      parameters:
        - in: query
          name: include_testing_integrations
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContextualDataIntegrationsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get all contextual data integrations accessible
      tags:
        - Contextual data integration service
      x-coralogixPermissions:
        - contextual-data:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1?include_testing_integrations=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1"


            querystring = {"include_testing_integrations":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1?include_testing_integrations=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: ContextualDataIntegrationService_UpdateContextualDataIntegration
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                integrationId:
                  type: string
                metadata:
                  $ref: '#/components/schemas/IntegrationMetadata'
              required:
                - integrationId
                - metadata
              title: Update contextual data integration request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateContextualDataIntegrationResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Update contextual data integration
      tags:
        - Contextual data integration service
      x-coralogixPermissions:
        - contextual-data:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"integrationId":"string","metadata":{"integrationKey":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string"}]},"version":"string"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1"


            payload = {
                "integrationId": "string",
                "metadata": {
                    "integrationKey": "string",
                    "integrationParameters": {"parameters": [
                            {
                                "key": "string",
                                "stringValue": "string"
                            }
                        ]},
                    "version": "string"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"integrationId":"string","metadata":{"integrationKey":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string"}]},"version":"string"}}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: ContextualDataIntegrationService_SaveContextualDataIntegration
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                metadata:
                  $ref: '#/components/schemas/IntegrationMetadata'
              required:
                - metadata
              title: Save contextual data integration request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveContextualDataIntegrationResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Save contextual data integration
      tags:
        - Contextual data integration service
      x-coralogixPermissions:
        - contextual-data:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"metadata":{"integrationKey":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string"}]},"version":"string"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1"


            payload = {"metadata": {
                    "integrationKey": "string",
                    "integrationParameters": {"parameters": [
                            {
                                "key": "string",
                                "stringValue": "string"
                            }
                        ]},
                    "version": "string"
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"metadata":{"integrationKey":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string"}]},"version":"string"}}'
      description: No description available
  /integrations/contextual-data/v1/definition/{id}:
    get:
      externalDocs:
        url: ''
      operationId: ContextualDataIntegrationService_GetContextualDataIntegrationDefinition
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: include_testing_integrations
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/GetContextualDataIntegrationDefinitionResponse
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get contextual data integration definition
      tags:
        - Contextual data integration service
      x-coralogixPermissions:
        - contextual-data:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1/definition/%7Bid%7D?include_testing_integrations=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1/definition/%7Bid%7D"


            querystring = {"include_testing_integrations":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1/definition/%7Bid%7D?include_testing_integrations=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /integrations/contextual-data/v1/test:
    post:
      externalDocs:
        url: ''
      operationId: ContextualDataIntegrationService_TestContextualDataIntegration
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                integrationData:
                  $ref: '#/components/schemas/IntegrationMetadata'
                integrationId:
                  type: string
              required:
                - integrationData
              title: Test contextual data integration request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestContextualDataIntegrationResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Test contextual data integration
      tags:
        - Contextual data integration service
      x-coralogixPermissions:
        - contextual-data:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1/test';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"integrationData":{"integrationKey":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string"}]},"version":"string"},"integrationId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1/test"


            payload = {
                "integrationData": {
                    "integrationKey": "string",
                    "integrationParameters": {"parameters": [
                            {
                                "key": "string",
                                "stringValue": "string"
                            }
                        ]},
                    "version": "string"
                },
                "integrationId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1/test \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"integrationData":{"integrationKey":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string"}]},"version":"string"},"integrationId":"string"}'
      description: No description available
  /integrations/contextual-data/v1/{id}:
    get:
      externalDocs:
        url: ''
      operationId: ContextualDataIntegrationService_GetContextualDataIntegrationDetails
      parameters:
        - in: path
          name: id
          required: true
          schema:
            example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
            type: string
        - in: query
          name: include_testing_revisions
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/GetContextualDataIntegrationDetailsResponse
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get contextual data integration details
      tags:
        - Contextual data integration service
      x-coralogixPermissions:
        - contextual-data:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1/076f4188-05e0-4ed3-afeb-653ad182ccb7?include_testing_revisions=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1/076f4188-05e0-4ed3-afeb-653ad182ccb7"


            querystring = {"include_testing_revisions":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1/076f4188-05e0-4ed3-afeb-653ad182ccb7?include_testing_revisions=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /integrations/contextual-data/v1/{integration_id}:
    delete:
      externalDocs:
        url: ''
      operationId: ContextualDataIntegrationService_DeleteContextualDataIntegration
      parameters:
        - in: path
          name: integration_id
          required: true
          schema:
            example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteContextualDataIntegrationResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Delete contextual data integration
      tags:
        - Contextual data integration service
      x-coralogixPermissions:
        - contextual-data:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1/076f4188-05e0-4ed3-afeb-653ad182ccb7';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1/076f4188-05e0-4ed3-afeb-653ad182ccb7"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/integrations/contextual-data/v1/076f4188-05e0-4ed3-afeb-653ad182ccb7 \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /integrations/extensions/v1/all:
    post:
      externalDocs:
        url: ''
      operationId: ExtensionService_GetAllExtensions
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: Request to list all extensions
              properties:
                filter:
                  $ref: '#/components/schemas/GetAllExtensionsRequest.Filter'
                includeHiddenExtensions:
                  type: boolean
              title: Get all extensions request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllExtensionsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get all extensions
      tags:
        - Extension service
      x-coralogixPermissions:
        - extensions:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/all';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"filter":{"integrations":["string"]},"includeHiddenExtensions":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/all"


            payload = {
                "filter": {"integrations": ["string"]},
                "includeHiddenExtensions": True
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/all \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"filter":{"integrations":["string"]},"includeHiddenExtensions":true}'
      description: No description available
  /integrations/extensions/v1/deployed:
    get:
      externalDocs:
        url: ''
      operationId: ExtensionDeploymentService_GetDeployedExtensions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeployedExtensionsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get deployed extensions
      tags:
        - Extension deployment service
      x-coralogixPermissions:
        - extensions:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/deployed';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/deployed"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/deployed \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: ExtensionDeploymentService_DeployExtension
      parameters:
        - in: query
          name: id
          required: false
          schema:
            type: string
        - in: query
          name: version
          required: false
          schema:
            type: string
        - in: query
          name: item_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - in: query
          name: applications
          required: false
          schema:
            items:
              type: string
            type: array
        - in: query
          name: subsystems
          required: false
          schema:
            items:
              type: string
            type: array
        - in: query
          name: extension_deployment
          required: false
          schema:
            externalDocs:
              url: ''
            properties:
              applications:
                items:
                  type: string
                type: array
              id:
                type: string
              itemIds:
                items:
                  type: string
                type: array
              subsystems:
                items:
                  type: string
                type: array
              version:
                type: string
            required:
              - id
              - version
              - itemIds
            title: Extension deployment
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployExtensionResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Deploy extension
      tags:
        - Extension deployment service
      x-coralogixPermissions:
        - extensions:Deploy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/deployed?id=SOME_STRING_VALUE&version=SOME_STRING_VALUE&item_ids=SOME_ARRAY_VALUE&applications=SOME_ARRAY_VALUE&subsystems=SOME_ARRAY_VALUE&extension_deployment=SOME_OBJECT_VALUE';


            let options = {method: 'PUT', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/deployed"


            querystring =
            {"id":"SOME_STRING_VALUE","version":"SOME_STRING_VALUE","item_ids":"SOME_ARRAY_VALUE","applications":"SOME_ARRAY_VALUE","subsystems":"SOME_ARRAY_VALUE","extension_deployment":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("PUT", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url 'https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/deployed?id=SOME_STRING_VALUE&version=SOME_STRING_VALUE&item_ids=SOME_ARRAY_VALUE&applications=SOME_ARRAY_VALUE&subsystems=SOME_ARRAY_VALUE&extension_deployment=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: ExtensionDeploymentService_UpdateExtension
      parameters:
        - in: query
          name: id
          required: false
          schema:
            type: string
        - in: query
          name: version
          required: false
          schema:
            type: string
        - in: query
          name: item_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - in: query
          name: applications
          required: false
          schema:
            items:
              type: string
            type: array
        - in: query
          name: subsystems
          required: false
          schema:
            items:
              type: string
            type: array
        - in: query
          name: extension_deployment
          required: false
          schema:
            externalDocs:
              url: ''
            properties:
              applications:
                items:
                  type: string
                type: array
              id:
                type: string
              itemIds:
                items:
                  type: string
                type: array
              subsystems:
                items:
                  type: string
                type: array
              version:
                type: string
            required:
              - id
              - version
              - itemIds
            title: Extension deployment
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateExtensionResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Update extension
      tags:
        - Extension deployment service
      x-coralogixPermissions:
        - extensions:Deploy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/deployed?id=SOME_STRING_VALUE&version=SOME_STRING_VALUE&item_ids=SOME_ARRAY_VALUE&applications=SOME_ARRAY_VALUE&subsystems=SOME_ARRAY_VALUE&extension_deployment=SOME_OBJECT_VALUE';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/deployed"


            querystring =
            {"id":"SOME_STRING_VALUE","version":"SOME_STRING_VALUE","item_ids":"SOME_ARRAY_VALUE","applications":"SOME_ARRAY_VALUE","subsystems":"SOME_ARRAY_VALUE","extension_deployment":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/deployed?id=SOME_STRING_VALUE&version=SOME_STRING_VALUE&item_ids=SOME_ARRAY_VALUE&applications=SOME_ARRAY_VALUE&subsystems=SOME_ARRAY_VALUE&extension_deployment=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: ExtensionDeploymentService_UndeployExtension
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                id:
                  type: string
                keptExtensionItems:
                  items:
                    type: string
                  type: array
              required:
                - id
              title: Revert deployment of extension request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UndeployExtensionResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Revert deployment of extension
      tags:
        - Extension deployment service
      x-coralogixPermissions:
        - extensions:Deploy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/deployed';


            let options = {
              method: 'DELETE',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"string","keptExtensionItems":["string"]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/deployed"


            payload = {
                "id": "string",
                "keptExtensionItems": ["string"]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("DELETE", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/deployed \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"string","keptExtensionItems":["string"]}'
      description: No description available
  /integrations/extensions/v1/testing:
    post:
      externalDocs:
        url: ''
      operationId: ExtensionTestingService_TestExtensionRevision
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                cleanupAfterTest:
                  type: boolean
                extensionData:
                  $ref: '#/components/schemas/ExtensionData'
              required:
                - extensionData
              title: Test extension revision request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestExtensionRevisionResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Test extension revision
      tags:
        - Extension testing service
      x-coralogixPermissions:
        - extensions:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"cleanupAfterTest":true,"extensionData":{"binaries":[{"data":"string","type":"KIBANA_INDEX_PATTERN"}],"changelog":[{"descriptionMd":"string","version":"string"}],"darkModeImage":"string","deprecation":{"reason":"string","replacementExtensions":["string"]},"description":"Integration with AWS CloudWatch for monitoring and logging","excerpt":"Monitor AWS resources and analyze logs with CloudWatch integration","id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","image":"string","integrationDetails":[{"link":"string","name":"string"}],"integrations":["string"],"isHidden":true,"items":[{"binaries":[{"data":"string","fileName":"string","type":"PREVIEW_IMAGE"}],"data":{},"description":"Less than 60% cocoa","internalId":0,"isMandatory":true,"name":"Low cocoa content","permissionResource":"UNKNOWN","stableId":"string","targetDomain":"ACTION","uniqueId":"string"}],"keywords":["string"],"labels":["string"],"name":"AWS CloudWatch Extension","version":"v1.0.13"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing"


            payload = {
                "cleanupAfterTest": True,
                "extensionData": {
                    "binaries": [
                        {
                            "data": "string",
                            "type": "KIBANA_INDEX_PATTERN"
                        }
                    ],
                    "changelog": [
                        {
                            "descriptionMd": "string",
                            "version": "string"
                        }
                    ],
                    "darkModeImage": "string",
                    "deprecation": {
                        "reason": "string",
                        "replacementExtensions": ["string"]
                    },
                    "description": "Integration with AWS CloudWatch for monitoring and logging",
                    "excerpt": "Monitor AWS resources and analyze logs with CloudWatch integration",
                    "id": "076f4188-05e0-4ed3-afeb-653ad182ccb7",
                    "image": "string",
                    "integrationDetails": [
                        {
                            "link": "string",
                            "name": "string"
                        }
                    ],
                    "integrations": ["string"],
                    "isHidden": True,
                    "items": [
                        {
                            "binaries": [
                                {
                                    "data": "string",
                                    "fileName": "string",
                                    "type": "PREVIEW_IMAGE"
                                }
                            ],
                            "data": {},
                            "description": "Less than 60% cocoa",
                            "internalId": 0,
                            "isMandatory": True,
                            "name": "Low cocoa content",
                            "permissionResource": "UNKNOWN",
                            "stableId": "string",
                            "targetDomain": "ACTION",
                            "uniqueId": "string"
                        }
                    ],
                    "keywords": ["string"],
                    "labels": ["string"],
                    "name": "AWS CloudWatch Extension",
                    "version": "v1.0.13"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"cleanupAfterTest":true,"extensionData":{"binaries":[{"data":"string","type":"KIBANA_INDEX_PATTERN"}],"changelog":[{"descriptionMd":"string","version":"string"}],"darkModeImage":"string","deprecation":{"reason":"string","replacementExtensions":["string"]},"description":"Integration with AWS CloudWatch for monitoring and logging","excerpt":"Monitor AWS resources and analyze logs with CloudWatch integration","id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","image":"string","integrationDetails":[{"link":"string","name":"string"}],"integrations":["string"],"isHidden":true,"items":[{"binaries":[{"data":"string","fileName":"string","type":"PREVIEW_IMAGE"}],"data":{},"description":"Less than 60% cocoa","internalId":0,"isMandatory":true,"name":"Low cocoa content","permissionResource":"UNKNOWN","stableId":"string","targetDomain":"ACTION","uniqueId":"string"}],"keywords":["string"],"labels":["string"],"name":"AWS CloudWatch Extension","version":"v1.0.13"}}'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: ExtensionTestingService_CleanupTestingRevision
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                id:
                  type: string
              required:
                - id
              title: Cleanup testing revision request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleanupTestingRevisionResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Cleanup testing extension
      tags:
        - Extension testing service
      x-coralogixPermissions:
        - extensions:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing';


            let options = {
              method: 'DELETE',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing"


            payload = {"id": "string"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("DELETE", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"string"}'
      description: No description available
  /integrations/extensions/v1/testing/initialize:
    post:
      externalDocs:
        url: ''
      operationId: ExtensionTestingService_InitializeTestingRevision
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                extensionData:
                  $ref: '#/components/schemas/ExtensionData'
              required:
                - extensionData
              title: Initialize testing revision request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitializeTestingRevisionResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Initialize testing revision
      tags:
        - Extension testing service
      x-coralogixPermissions:
        - extensions:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing/initialize';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"extensionData":{"binaries":[{"data":"string","type":"KIBANA_INDEX_PATTERN"}],"changelog":[{"descriptionMd":"string","version":"string"}],"darkModeImage":"string","deprecation":{"reason":"string","replacementExtensions":["string"]},"description":"Integration with AWS CloudWatch for monitoring and logging","excerpt":"Monitor AWS resources and analyze logs with CloudWatch integration","id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","image":"string","integrationDetails":[{"link":"string","name":"string"}],"integrations":["string"],"isHidden":true,"items":[{"binaries":[{"data":"string","fileName":"string","type":"PREVIEW_IMAGE"}],"data":{},"description":"Less than 60% cocoa","internalId":0,"isMandatory":true,"name":"Low cocoa content","permissionResource":"UNKNOWN","stableId":"string","targetDomain":"ACTION","uniqueId":"string"}],"keywords":["string"],"labels":["string"],"name":"AWS CloudWatch Extension","version":"v1.0.13"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing/initialize"


            payload = {"extensionData": {
                    "binaries": [
                        {
                            "data": "string",
                            "type": "KIBANA_INDEX_PATTERN"
                        }
                    ],
                    "changelog": [
                        {
                            "descriptionMd": "string",
                            "version": "string"
                        }
                    ],
                    "darkModeImage": "string",
                    "deprecation": {
                        "reason": "string",
                        "replacementExtensions": ["string"]
                    },
                    "description": "Integration with AWS CloudWatch for monitoring and logging",
                    "excerpt": "Monitor AWS resources and analyze logs with CloudWatch integration",
                    "id": "076f4188-05e0-4ed3-afeb-653ad182ccb7",
                    "image": "string",
                    "integrationDetails": [
                        {
                            "link": "string",
                            "name": "string"
                        }
                    ],
                    "integrations": ["string"],
                    "isHidden": True,
                    "items": [
                        {
                            "binaries": [
                                {
                                    "data": "string",
                                    "fileName": "string",
                                    "type": "PREVIEW_IMAGE"
                                }
                            ],
                            "data": {},
                            "description": "Less than 60% cocoa",
                            "internalId": 0,
                            "isMandatory": True,
                            "name": "Low cocoa content",
                            "permissionResource": "UNKNOWN",
                            "stableId": "string",
                            "targetDomain": "ACTION",
                            "uniqueId": "string"
                        }
                    ],
                    "keywords": ["string"],
                    "labels": ["string"],
                    "name": "AWS CloudWatch Extension",
                    "version": "v1.0.13"
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/testing/initialize \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"extensionData":{"binaries":[{"data":"string","type":"KIBANA_INDEX_PATTERN"}],"changelog":[{"descriptionMd":"string","version":"string"}],"darkModeImage":"string","deprecation":{"reason":"string","replacementExtensions":["string"]},"description":"Integration with AWS CloudWatch for monitoring and logging","excerpt":"Monitor AWS resources and analyze logs with CloudWatch integration","id":"076f4188-05e0-4ed3-afeb-653ad182ccb7","image":"string","integrationDetails":[{"link":"string","name":"string"}],"integrations":["string"],"isHidden":true,"items":[{"binaries":[{"data":"string","fileName":"string","type":"PREVIEW_IMAGE"}],"data":{},"description":"Less than 60% cocoa","internalId":0,"isMandatory":true,"name":"Low cocoa content","permissionResource":"UNKNOWN","stableId":"string","targetDomain":"ACTION","uniqueId":"string"}],"keywords":["string"],"labels":["string"],"name":"AWS CloudWatch Extension","version":"v1.0.13"}}'
      description: No description available
  /integrations/extensions/v1/{id}:
    get:
      externalDocs:
        url: ''
      operationId: ExtensionService_GetExtension
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: include_dashboard_binaries
          required: false
          schema:
            type: boolean
        - in: query
          name: include_testing_revision
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Extension'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get extension by ID
      tags:
        - Extension service
      x-coralogixPermissions:
        - extensions:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/%7Bid%7D?include_dashboard_binaries=SOME_BOOLEAN_VALUE&include_testing_revision=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/%7Bid%7D"


            querystring =
            {"include_dashboard_binaries":"SOME_BOOLEAN_VALUE","include_testing_revision":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/integrations/extensions/v1/%7Bid%7D?include_dashboard_binaries=SOME_BOOLEAN_VALUE&include_testing_revision=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /integrations/integrations/v1:
    get:
      externalDocs:
        url: ''
      operationId: IntegrationService_GetIntegrations
      parameters:
        - in: query
          name: include_testing_revision
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get all integrations
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1?include_testing_revision=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1"


            querystring = {"include_testing_revision":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1?include_testing_revision=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /integrations/integrations/v1/definition/{id}:
    get:
      externalDocs:
        url: ''
      operationId: IntegrationService_GetIntegrationDefinition
      parameters:
        - in: path
          name: id
          required: true
          schema:
            example: aws-sqs
            type: string
        - in: query
          name: include_testing_revision
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationDefinitionResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get integration definition
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/definition/aws-sqs?include_testing_revision=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/definition/aws-sqs"


            querystring = {"include_testing_revision":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/definition/aws-sqs?include_testing_revision=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /integrations/integrations/v1/deployed/{integration_id}:
    get:
      externalDocs:
        url: ''
      operationId: IntegrationService_GetDeployedIntegration
      parameters:
        - in: path
          name: integration_id
          required: true
          schema:
            example: aws-sqs
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeployedIntegrationResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get deployed integration
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/deployed/aws-sqs';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/deployed/aws-sqs"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/deployed/aws-sqs \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /integrations/integrations/v1/instance/{integration_id}:
    delete:
      externalDocs:
        url: ''
      operationId: IntegrationService_DeleteIntegration
      parameters:
        - in: path
          name: integration_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteIntegrationResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Delete integration
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:Deploy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/instance/%7Bintegration_id%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/instance/%7Bintegration_id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/instance/%7Bintegration_id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /integrations/integrations/v1/managed:
    get:
      externalDocs:
        url: ''
      operationId: IntegrationService_ListManagedIntegrationKeys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListManagedIntegrationKeysResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: List managed integration keys
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/managed';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/managed"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/managed \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /integrations/integrations/v1/managed/{integration_id}:
    get:
      externalDocs:
        url: ''
      operationId: IntegrationService_GetManagedIntegrationStatus
      parameters:
        - in: path
          name: integration_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetManagedIntegrationStatusResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get managed integration status
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/managed/%7Bintegration_id%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/managed/%7Bintegration_id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/managed/%7Bintegration_id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /integrations/integrations/v1/metadata:
    put:
      externalDocs:
        url: ''
      operationId: IntegrationService_UpdateIntegration
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: This data structure represents a list of outgoing webhook types.
              properties:
                id:
                  type: string
                metadata:
                  $ref: '#/components/schemas/IntegrationMetadata'
              required:
                - id
                - metadata
              title: Update integration request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateIntegrationResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Update integration
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:Deploy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/metadata';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"string","metadata":{"integrationKey":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string"}]},"version":"string"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/metadata"


            payload = {
                "id": "string",
                "metadata": {
                    "integrationKey": "string",
                    "integrationParameters": {"parameters": [
                            {
                                "key": "string",
                                "stringValue": "string"
                            }
                        ]},
                    "version": "string"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/metadata \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"string","metadata":{"integrationKey":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string"}]},"version":"string"}}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: IntegrationService_SaveIntegration
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                metadata:
                  $ref: '#/components/schemas/IntegrationMetadata'
              required:
                - metadata
              title: Save integration request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveIntegrationResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Save integration registration metadata
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:Deploy
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/metadata';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"metadata":{"integrationKey":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string"}]},"version":"string"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/metadata"


            payload = {"metadata": {
                    "integrationKey": "string",
                    "integrationParameters": {"parameters": [
                            {
                                "key": "string",
                                "stringValue": "string"
                            }
                        ]},
                    "version": "string"
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/metadata \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"metadata":{"integrationKey":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string"}]},"version":"string"}}'
      description: No description available
  /integrations/integrations/v1/metadata/test:
    post:
      externalDocs:
        url: ''
      operationId: IntegrationService_TestIntegration
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                integrationData:
                  $ref: '#/components/schemas/IntegrationMetadata'
                integrationId:
                  type: string
              required:
                - integrationData
              title: Test integration request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIntegrationResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Test integration
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/metadata/test';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"integrationData":{"integrationKey":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string"}]},"version":"string"},"integrationId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/metadata/test"


            payload = {
                "integrationData": {
                    "integrationKey": "string",
                    "integrationParameters": {"parameters": [
                            {
                                "key": "string",
                                "stringValue": "string"
                            }
                        ]},
                    "version": "string"
                },
                "integrationId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/metadata/test \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"integrationData":{"integrationKey":"string","integrationParameters":{"parameters":[{"key":"string","stringValue":"string"}]},"version":"string"},"integrationId":"string"}'
      description: No description available
  /integrations/integrations/v1/rum/app-versions:
    get:
      externalDocs:
        url: ''
      operationId: IntegrationService_GetRumApplicationVersionData
      parameters:
        - in: query
          name: application_name
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRumApplicationVersionDataResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get RUM integration versions data
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/rum/app-versions?application_name=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/rum/app-versions"


            querystring = {"application_name":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/rum/app-versions?application_name=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /integrations/integrations/v1/rum/sync:
    post:
      externalDocs:
        url: ''
      operationId: IntegrationService_SyncRumData
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                force:
                  type: boolean
              title: Sync RUM data request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncRumDataResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Trigger sync of RUM integration data
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/rum/sync';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"force":true}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/rum/sync"


            payload = {"force": True}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/rum/sync \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"force":true}'
      description: No description available
  /integrations/integrations/v1/template:
    get:
      externalDocs:
        url: ''
      operationId: IntegrationService_GetTemplate
      parameters:
        - in: query
          name: integration_id
          required: false
          schema:
            type: string
        - in: query
          name: common_arm_params
          required: false
          schema:
            externalDocs:
              url: ''
            properties:
              apiKey:
                type: string
              cgxDomain:
                type: string
              logsUrl:
                type: string
            required:
              - logsUrl
              - apiKey
              - cgxDomain
            title: Common ARM integration parameters
            type: object
        - in: query
          name: empty
          required: false
          schema:
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTemplateResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get integration template
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/template?integration_id=SOME_STRING_VALUE&common_arm_params=SOME_OBJECT_VALUE&empty=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/template"


            querystring =
            {"integration_id":"SOME_STRING_VALUE","common_arm_params":"SOME_OBJECT_VALUE","empty":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/template?integration_id=SOME_STRING_VALUE&common_arm_params=SOME_OBJECT_VALUE&empty=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /integrations/integrations/v1/{id}:
    get:
      externalDocs:
        url: ''
      operationId: IntegrationService_GetIntegrationDetails
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: include_testing_revision
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationDetailsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get integration details
      tags:
        - Integration service
      x-coralogixPermissions:
        - integrations:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/%7Bid%7D?include_testing_revision=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/%7Bid%7D"


            querystring = {"include_testing_revision":"SOME_BOOLEAN_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/integrations/integrations/v1/%7Bid%7D?include_testing_revision=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /integrations/webhooks/v1:
    get:
      externalDocs:
        url: ''
      operationId: OutgoingWebhooksService_ListOutgoingWebhooks
      parameters:
        - in: query
          name: type
          required: false
          schema:
            enum:
              - UNKNOWN
              - GENERIC
              - SLACK
              - PAGERDUTY
              - SEND_LOG
              - EMAIL_GROUP
              - MICROSOFT_TEAMS
              - JIRA
              - OPSGENIE
              - DEMISTO
              - AWS_EVENT_BRIDGE
              - IBM_EVENT_NOTIFICATIONS
              - MS_TEAMS_WORKFLOW
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOutgoingWebhooksResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: List outgoing webhooks
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1?type=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1"


            querystring = {"type":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1?type=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: OutgoingWebhooksService_UpdateOutgoingWebhook
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                data:
                  $ref: '#/components/schemas/OutgoingWebhookInputData'
                id:
                  example: example_id
                  type: string
              required:
                - id
                - data
              title: Update outgoing webhook request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOutgoingWebhookResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Update an outgoing webhook
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"data":{"genericWebhook":{"headers":{"Content-Type":"application/json"},"method":"UNKNOWN","payload":{"key":"value"},"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0"},"name":"my_webhook","type":"UNKNOWN","url":"slack.webhook.com"},"id":"example_id"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1"


            payload = {
                "data": {
                    "genericWebhook": {
                        "headers": {"Content-Type": "application/json"},
                        "method": "UNKNOWN",
                        "payload": {"key": "value"},
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0"
                    },
                    "name": "my_webhook",
                    "type": "UNKNOWN",
                    "url": "slack.webhook.com"
                },
                "id": "example_id"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"data":{"genericWebhook":{"headers":{"Content-Type":"application/json"},"method":"UNKNOWN","payload":{"key":"value"},"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0"},"name":"my_webhook","type":"UNKNOWN","url":"slack.webhook.com"},"id":"example_id"}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: OutgoingWebhooksService_CreateOutgoingWebhook
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                data:
                  $ref: '#/components/schemas/OutgoingWebhookInputData'
              required:
                - data
              title: Create outgoing webhook request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOutgoingWebhookResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Create an outgoing webhook
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"data":{"genericWebhook":{"headers":{"Content-Type":"application/json"},"method":"UNKNOWN","payload":{"key":"value"},"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0"},"name":"my_webhook","type":"UNKNOWN","url":"slack.webhook.com"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1"


            payload = {"data": {
                    "genericWebhook": {
                        "headers": {"Content-Type": "application/json"},
                        "method": "UNKNOWN",
                        "payload": {"key": "value"},
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0"
                    },
                    "name": "my_webhook",
                    "type": "UNKNOWN",
                    "url": "slack.webhook.com"
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"data":{"genericWebhook":{"headers":{"Content-Type":"application/json"},"method":"UNKNOWN","payload":{"key":"value"},"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0"},"name":"my_webhook","type":"UNKNOWN","url":"slack.webhook.com"}}'
      description: No description available
  /integrations/webhooks/v1/all:
    get:
      externalDocs:
        url: ''
      operationId: OutgoingWebhooksService_ListAllOutgoingWebhooks
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllOutgoingWebhooksResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: List all outgoing webhooks
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/all';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/all"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/all \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /integrations/webhooks/v1/summary:
    get:
      externalDocs:
        url: ''
      operationId: OutgoingWebhooksService_ListOutboundWebhooksSummary
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOutboundWebhooksSummaryResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: List outbound webhooks summary
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:ReadSummary
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/summary';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/summary"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/summary \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /integrations/webhooks/v1/test:
    post:
      externalDocs:
        url: ''
      operationId: OutgoingWebhooksService_TestOutgoingWebhook
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                data:
                  $ref: '#/components/schemas/OutgoingWebhookInputData'
              required:
                - data
              title: Test outgoing webhook request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestOutgoingWebhookResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Test an outgoing webhook
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/test';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"data":{"genericWebhook":{"headers":{"Content-Type":"application/json"},"method":"UNKNOWN","payload":{"key":"value"},"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0"},"name":"my_webhook","type":"UNKNOWN","url":"slack.webhook.com"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/test"


            payload = {"data": {
                    "genericWebhook": {
                        "headers": {"Content-Type": "application/json"},
                        "method": "UNKNOWN",
                        "payload": {"key": "value"},
                        "uuid": "d838cd7b-087b-40c6-bc33-80997020f5d0"
                    },
                    "name": "my_webhook",
                    "type": "UNKNOWN",
                    "url": "slack.webhook.com"
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/test \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"data":{"genericWebhook":{"headers":{"Content-Type":"application/json"},"method":"UNKNOWN","payload":{"key":"value"},"uuid":"d838cd7b-087b-40c6-bc33-80997020f5d0"},"name":"my_webhook","type":"UNKNOWN","url":"slack.webhook.com"}}'
      description: No description available
  /integrations/webhooks/v1/test-existing:
    post:
      externalDocs:
        url: ''
      operationId: OutgoingWebhooksService_TestExistingOutgoingWebhook
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                id:
                  example: example_id
                  type: string
              required:
                - id
              title: Test existing outgoing webhook request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestOutgoingWebhookResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Test an existing outgoing webhook
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/test-existing';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"id":"example_id"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/test-existing"


            payload = {"id": "example_id"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/test-existing \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"id":"example_id"}'
      description: No description available
  /integrations/webhooks/v1/types:
    get:
      externalDocs:
        url: ''
      operationId: OutgoingWebhooksService_ListOutgoingWebhookTypes
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOutgoingWebhookTypesResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get outgoing webhook types
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/types';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/types"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/types \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /integrations/webhooks/v1/types/{type}:
    get:
      externalDocs:
        url: ''
      operationId: OutgoingWebhooksService_GetOutgoingWebhookTypeDetails
      parameters:
        - in: path
          name: type
          required: true
          schema: &ref_0
            enum:
              - UNKNOWN
              - GENERIC
              - SLACK
              - PAGERDUTY
              - SEND_LOG
              - EMAIL_GROUP
              - MICROSOFT_TEAMS
              - JIRA
              - OPSGENIE
              - DEMISTO
              - AWS_EVENT_BRIDGE
              - IBM_EVENT_NOTIFICATIONS
              - MS_TEAMS_WORKFLOW
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOutgoingWebhookTypeDetailsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get outgoing webhook type details
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/types/%7Btype%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/types/%7Btype%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/types/%7Btype%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /integrations/webhooks/v1/{id}:
    get:
      externalDocs:
        url: ''
      operationId: OutgoingWebhooksService_GetOutgoingWebhook
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOutgoingWebhookResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get outgoing webhook
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: OutgoingWebhooksService_DeleteOutgoingWebhook
      parameters:
        - in: path
          name: id
          required: true
          schema:
            example: example_id
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteOutgoingWebhookResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Delete an outgoing webhook
      tags:
        - Outgoing webhooks service
      x-coralogixPermissions:
        - outbound-webhooks:UpdateConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/example_id';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/example_id"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/integrations/webhooks/v1/example_id \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /logs/data-setup/v2:
    get:
      externalDocs:
        url: ''
      operationId: S3TargetService_GetTarget
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/S3TargetServiceGetTargetResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get target
      tags:
        - Target Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/logs/data-setup/v2';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/logs/data-setup/v2"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/logs/data-setup/v2 \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: S3TargetService_SetTarget
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: This data structure is used to set a storage target for logs.
              properties:
                isActive:
                  example: true
                  type: boolean
                s3:
                  $ref: '#/components/schemas/S3TargetSpec'
              required:
                - isActive
                - targetSpec
              title: Set Target Response
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/S3TargetServiceSetTargetResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Set target
      tags:
        - Target Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/logs/data-setup/v2';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"isActive":true,"s3":{"bucket":"bucket","region":"us-west-2"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/logs/data-setup/v2"


            payload = {
                "isActive": True,
                "s3": {
                    "bucket": "bucket",
                    "region": "us-west-2"
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/logs/data-setup/v2 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"isActive":true,"s3":{"bucket":"bucket","region":"us-west-2"}}'
      description: No description available
  /metrics/data-setup/v1:
    get:
      externalDocs:
        url: ''
      operationId: MetricsConfiguratorPublicService_GetTenantConfig
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTenantConfigResponseV2'
          description: ''
      summary: GetTenantConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1 \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: MetricsConfiguratorPublicService_Update
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - additionalProperties: false
                  description: >-
                    This data structure is used to update the configuration of a
                    tenant.
                  properties:
                    ibm:
                      $ref: '#/components/schemas/IbmConfigV2'
                    retentionDays:
                      format: int64
                      type: integer
                  required:
                    - retentionDays
                    - storageConfig
                  title: Update Tenant Request
                  type: object
                - additionalProperties: false
                  description: >-
                    This data structure is used to update the configuration of a
                    tenant.
                  properties:
                    retentionDays:
                      format: int64
                      type: integer
                    s3:
                      $ref: '#/components/schemas/S3Config'
                  required:
                    - retentionDays
                    - storageConfig
                  title: Update Tenant Request
                  type: object
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: ''
      summary: Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"ibm":{"crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"},"retentionDays":0}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1"


            payload = {
                "ibm": {
                    "crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::",
                    "endpoint": "s3.us-south.cloud-object-storage.appdomain.cloud",
                    "serviceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"
                },
                "retentionDays": 0
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"ibm":{"crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"},"retentionDays":0}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: MetricsConfiguratorPublicService_ConfigureTenant
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - additionalProperties: false
                  description: This data structure is used to configure a tenant.
                  properties:
                    ibm:
                      $ref: '#/components/schemas/IbmConfigV2'
                    retentionPolicy:
                      $ref: '#/components/schemas/RetentionPolicyRequest'
                  required:
                    - retentionPolicy
                    - storageConfig
                  title: Configure Tenant Request
                  type: object
                - additionalProperties: false
                  description: This data structure is used to configure a tenant.
                  properties:
                    retentionPolicy:
                      $ref: '#/components/schemas/RetentionPolicyRequest'
                    s3:
                      $ref: '#/components/schemas/S3Config'
                  required:
                    - retentionPolicy
                    - storageConfig
                  title: Configure Tenant Request
                  type: object
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: ''
      summary: ConfigureTenant
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"ibm":{"crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"},"retentionPolicy":{"fiveMinutesResolution":2,"oneHourResolution":3,"rawResolution":1}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1"


            payload = {
                "ibm": {
                    "crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::",
                    "endpoint": "s3.us-south.cloud-object-storage.appdomain.cloud",
                    "serviceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"
                },
                "retentionPolicy": {
                    "fiveMinutesResolution": 2,
                    "oneHourResolution": 3,
                    "rawResolution": 1
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"ibm":{"crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"},"retentionPolicy":{"fiveMinutesResolution":2,"oneHourResolution":3,"rawResolution":1}}'
      description: No description available
  /metrics/data-setup/v1/disable:
    post:
      externalDocs:
        url: ''
      operationId: MetricsConfiguratorPublicService_DisableArchive
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: ''
      summary: DisableArchive
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1/disable';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1/disable"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1/disable \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /metrics/data-setup/v1/enable:
    post:
      externalDocs:
        url: ''
      operationId: MetricsConfiguratorPublicService_EnableArchive
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: ''
      summary: EnableArchive
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1/enable';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1/enable"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1/enable \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /metrics/data-setup/v1/validate:
    post:
      externalDocs:
        url: ''
      operationId: MetricsConfiguratorPublicService_ValidateBucket
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - additionalProperties: false
                  description: This data structure is used to validate a bucket.
                  properties:
                    ibm:
                      $ref: '#/components/schemas/IbmConfigV2'
                  required:
                    - storageConfig
                  title: Bucket Validation Request
                  type: object
                - additionalProperties: false
                  description: This data structure is used to validate a bucket.
                  properties:
                    s3:
                      $ref: '#/components/schemas/S3Config'
                  required:
                    - storageConfig
                  title: Bucket Validation Request
                  type: object
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: ''
      summary: ValidateBucket
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1/validate';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"ibm":{"crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1/validate"


            payload = {"ibm": {
                    "crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::",
                    "endpoint": "s3.us-south.cloud-object-storage.appdomain.cloud",
                    "serviceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/metrics/data-setup/v1/validate \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"ibm":{"crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::","endpoint":"s3.us-south.cloud-object-storage.appdomain.cloud","serviceCrn":"crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"}}'
      description: No description available
  /notifications/notification-center/v1/connector:
    put:
      externalDocs:
        url: ''
      operationId: ConnectorsService_ReplaceConnector
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: A connector configuration for sending notifications
              properties:
                configOverrides:
                  items:
                    $ref: '#/components/schemas/EntityTypeConfigOverrides'
                  type: array
                connectorConfig:
                  $ref: '#/components/schemas/ConnectorConfig'
                createTime:
                  format: date-time
                  type: string
                description:
                  example: Connector for team notifications
                  maxLength: 5000
                  type: string
                id:
                  example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
                  type: string
                name:
                  example: My Slack Connector
                  maxLength: 200
                  type: string
                teamId:
                  example: '12345'
                  format: int64
                  type: integer
                type:
                  $ref: '#/components/schemas/ConnectorType'
                updateTime:
                  format: date-time
                  type: string
              required:
                - type
                - name
                - connectorConfigs
              title: Connector
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceConnectorResponse'
          description: ''
      summary: Replace a Connector
      tags:
        - Connectors service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connector';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"configOverrides":[{"entityType":"ENTITY_TYPE_UNSPECIFIED","fields":[{"fieldName":"string","template":"string"}]}],"connectorConfig":{"fields":[{"fieldName":"string","value":"string"}]},"createTime":"2019-08-24T14:15:22Z","description":"Connector for team notifications","id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","name":"My Slack Connector","teamId":"12345","type":"CONNECTOR_TYPE_UNSPECIFIED","updateTime":"2019-08-24T14:15:22Z"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connector"


            payload = {
                "configOverrides": [
                    {
                        "entityType": "ENTITY_TYPE_UNSPECIFIED",
                        "fields": [
                            {
                                "fieldName": "string",
                                "template": "string"
                            }
                        ]
                    }
                ],
                "connectorConfig": {"fields": [
                        {
                            "fieldName": "string",
                            "value": "string"
                        }
                    ]},
                "createTime": "2019-08-24T14:15:22Z",
                "description": "Connector for team notifications",
                "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "name": "My Slack Connector",
                "teamId": "12345",
                "type": "CONNECTOR_TYPE_UNSPECIFIED",
                "updateTime": "2019-08-24T14:15:22Z"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connector \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"configOverrides":[{"entityType":"ENTITY_TYPE_UNSPECIFIED","fields":[{"fieldName":"string","template":"string"}]}],"connectorConfig":{"fields":[{"fieldName":"string","value":"string"}]},"createTime":"2019-08-24T14:15:22Z","description":"Connector for team notifications","id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","name":"My Slack Connector","teamId":"12345","type":"CONNECTOR_TYPE_UNSPECIFIED","updateTime":"2019-08-24T14:15:22Z"}'
      description: No description available
  /notifications/notification-center/v1/connectors:
    get:
      externalDocs:
        url: ''
      operationId: ConnectorsService_ListConnectors
      parameters:
        - in: query
          name: connector_type
          required: false
          schema:
            enum:
              - CONNECTOR_TYPE_UNSPECIFIED
              - SLACK
              - GENERIC_HTTPS
              - PAGERDUTY
              - IBM_EVENT_NOTIFICATIONS
            type: string
        - in: query
          name: supported_by_entity_type
          required: false
          schema:
            enum:
              - ENTITY_TYPE_UNSPECIFIED
              - ALERTS
              - TEST_NOTIFICATIONS
              - CASES
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectorsResponse'
          description: ''
      summary: List Connectors
      tags:
        - Connectors service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors?connector_type=SOME_STRING_VALUE&supported_by_entity_type=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors"


            querystring =
            {"connector_type":"SOME_STRING_VALUE","supported_by_entity_type":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors?connector_type=SOME_STRING_VALUE&supported_by_entity_type=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: ConnectorsService_CreateConnector
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: A connector configuration for sending notifications
              properties:
                configOverrides:
                  items:
                    $ref: '#/components/schemas/EntityTypeConfigOverrides'
                  type: array
                connectorConfig:
                  $ref: '#/components/schemas/ConnectorConfig'
                createTime:
                  format: date-time
                  type: string
                description:
                  example: Connector for team notifications
                  maxLength: 5000
                  type: string
                id:
                  example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
                  type: string
                name:
                  example: My Slack Connector
                  maxLength: 200
                  type: string
                teamId:
                  example: '12345'
                  format: int64
                  type: integer
                type:
                  $ref: '#/components/schemas/ConnectorType'
                updateTime:
                  format: date-time
                  type: string
              required:
                - type
                - name
                - connectorConfigs
              title: Connector
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateConnectorResponse'
          description: ''
      summary: Create a Connector
      tags:
        - Connectors service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"configOverrides":[{"entityType":"ENTITY_TYPE_UNSPECIFIED","fields":[{"fieldName":"string","template":"string"}]}],"connectorConfig":{"fields":[{"fieldName":"string","value":"string"}]},"createTime":"2019-08-24T14:15:22Z","description":"Connector for team notifications","id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","name":"My Slack Connector","teamId":"12345","type":"CONNECTOR_TYPE_UNSPECIFIED","updateTime":"2019-08-24T14:15:22Z"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors"


            payload = {
                "configOverrides": [
                    {
                        "entityType": "ENTITY_TYPE_UNSPECIFIED",
                        "fields": [
                            {
                                "fieldName": "string",
                                "template": "string"
                            }
                        ]
                    }
                ],
                "connectorConfig": {"fields": [
                        {
                            "fieldName": "string",
                            "value": "string"
                        }
                    ]},
                "createTime": "2019-08-24T14:15:22Z",
                "description": "Connector for team notifications",
                "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "name": "My Slack Connector",
                "teamId": "12345",
                "type": "CONNECTOR_TYPE_UNSPECIFIED",
                "updateTime": "2019-08-24T14:15:22Z"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"configOverrides":[{"entityType":"ENTITY_TYPE_UNSPECIFIED","fields":[{"fieldName":"string","template":"string"}]}],"connectorConfig":{"fields":[{"fieldName":"string","value":"string"}]},"createTime":"2019-08-24T14:15:22Z","description":"Connector for team notifications","id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","name":"My Slack Connector","teamId":"12345","type":"CONNECTOR_TYPE_UNSPECIFIED","updateTime":"2019-08-24T14:15:22Z"}'
      description: No description available
  /notifications/notification-center/v1/connectors/{id}:
    get:
      externalDocs:
        url: ''
      operationId: ConnectorsService_GetConnector
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConnectorResponse'
          description: ''
      summary: Get a Connector
      tags:
        - Connectors service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: ConnectorsService_DeleteConnector
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteConnectorResponse'
          description: ''
      summary: Delete a Connector
      tags:
        - Connectors service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /notifications/notification-center/v1/connectors:batchGet:
    get:
      externalDocs:
        url: ''
      operationId: ConnectorsService_BatchGetConnectors
      parameters:
        - in: query
          name: connector_ids
          required: false
          schema:
            items:
              example:
                - connector-id-1
                - connector-id-2
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetConnectorsResponse'
          description: ''
      summary: Batch Get Connectors
      tags:
        - Connectors service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors:batchGet?connector_ids=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors:batchGet"


            querystring = {"connector_ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors:batchGet?connector_ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /notifications/notification-center/v1/connectors:batchGetSummaries:
    get:
      externalDocs:
        url: ''
      operationId: ConnectorsService_BatchGetConnectorSummaries
      parameters:
        - in: query
          name: connector_ids
          required: false
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetConnectorSummariesResponse'
          description: ''
      summary: Batch Get Connectors Summaries
      tags:
        - Connectors service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors:batchGetSummaries?connector_ids=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors:batchGetSummaries"


            querystring = {"connector_ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors:batchGetSummaries?connector_ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /notifications/notification-center/v1/connectors:getTypeSummaries:
    get:
      externalDocs:
        url: ''
      operationId: ConnectorsService_GetConnectorTypeSummaries
      parameters:
        - in: query
          name: supported_by_entity_type
          required: false
          schema:
            enum:
              - ENTITY_TYPE_UNSPECIFIED
              - ALERTS
              - TEST_NOTIFICATIONS
              - CASES
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConnectorTypeSummariesResponse'
          description: ''
      summary: Get Connector Type Summaries
      tags:
        - Connectors service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors:getTypeSummaries?supported_by_entity_type=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors:getTypeSummaries"


            querystring = {"supported_by_entity_type":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors:getTypeSummaries?supported_by_entity_type=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /notifications/notification-center/v1/connectors:listSummaries:
    get:
      externalDocs:
        url: ''
      operationId: ConnectorsService_ListConnectorSummaries
      parameters:
        - in: query
          name: connector_type
          required: false
          schema:
            enum:
              - CONNECTOR_TYPE_UNSPECIFIED
              - SLACK
              - GENERIC_HTTPS
              - PAGERDUTY
              - IBM_EVENT_NOTIFICATIONS
            type: string
        - in: query
          name: supported_by_entity_type
          required: false
          schema:
            enum:
              - ENTITY_TYPE_UNSPECIFIED
              - ALERTS
              - TEST_NOTIFICATIONS
              - CASES
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectorSummariesResponse'
          description: ''
      summary: List Connector Summaries
      tags:
        - Connectors service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors:listSummaries?connector_type=SOME_STRING_VALUE&supported_by_entity_type=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors:listSummaries"


            querystring =
            {"connector_type":"SOME_STRING_VALUE","supported_by_entity_type":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/connectors:listSummaries?connector_type=SOME_STRING_VALUE&supported_by_entity_type=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /notifications/notification-center/v1/entity-types:
    get:
      externalDocs:
        url: ''
      operationId: EntitiesService_ListEntityTypes
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEntityTypesResponse'
          description: ''
      summary: List Entity Types
      tags:
        - Entities service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/entity-types';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/entity-types"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/entity-types \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /notifications/notification-center/v1/entity-types/{entity_type}/entity-subtypes:
    get:
      externalDocs:
        url: ''
      operationId: EntitiesService_ListEntitySubTypes
      parameters:
        - in: path
          name: entity_type
          required: true
          schema: &ref_1
            enum:
              - ENTITY_TYPE_UNSPECIFIED
              - ALERTS
              - TEST_NOTIFICATIONS
              - CASES
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEntitySubTypesResponse'
          description: ''
      summary: List Entity Subtypes
      tags:
        - Entities service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/entity-types/%7Bentity_type%7D/entity-subtypes';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/entity-types/%7Bentity_type%7D/entity-subtypes"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/entity-types/%7Bentity_type%7D/entity-subtypes \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /notifications/notification-center/v1/notifications/testing:testConnectorConfiguration:
    post:
      externalDocs:
        url: ''
      operationId: TestingService_TestConnectorConfig
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: Request to test a connector configuration
              properties:
                entityType:
                  $ref: '#/components/schemas/notification_center.EntityType'
                fields:
                  items:
                    $ref: >-
                      #/components/schemas/notification_center.ConnectorConfigField
                  type: array
                payloadType:
                  example: default
                  type: string
                type:
                  $ref: '#/components/schemas/ConnectorType'
              title: Test Connector Config Request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestConnectorConfigResponse'
          description: ''
      summary: TestConnectorConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testConnectorConfiguration';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"entityType":"ENTITY_TYPE_UNSPECIFIED","fields":[{"fieldName":"string","value":"string"}],"payloadType":"default","type":"CONNECTOR_TYPE_UNSPECIFIED"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testConnectorConfiguration"


            payload = {
                "entityType": "ENTITY_TYPE_UNSPECIFIED",
                "fields": [
                    {
                        "fieldName": "string",
                        "value": "string"
                    }
                ],
                "payloadType": "default",
                "type": "CONNECTOR_TYPE_UNSPECIFIED"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testConnectorConfiguration \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"entityType":"ENTITY_TYPE_UNSPECIFIED","fields":[{"fieldName":"string","value":"string"}],"payloadType":"default","type":"CONNECTOR_TYPE_UNSPECIFIED"}'
      description: No description available
  /notifications/notification-center/v1/notifications/testing:testDestination:
    post:
      externalDocs:
        url: ''
      operationId: TestingService_TestDestination
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                connectorConfigFields:
                  items:
                    $ref: '#/components/schemas/TemplatedConnectorConfigField'
                  type: array
                connectorId:
                  type: string
                entitySubType:
                  example: logsImmediateResolved
                  type: string
                entityType:
                  $ref: '#/components/schemas/notification_center.EntityType'
                messageConfigFields:
                  items:
                    $ref: >-
                      #/components/schemas/notification_center.MessageConfigField
                  type: array
                payloadType:
                  example: default
                  type: string
                presetId:
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestDestinationResponse'
          description: ''
      summary: TestDestination
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testDestination';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"connectorConfigFields":[{"fieldName":"string","template":"string"}],"connectorId":"string","entitySubType":"logsImmediateResolved","entityType":"ENTITY_TYPE_UNSPECIFIED","messageConfigFields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}],"payloadType":"default","presetId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testDestination"


            payload = {
                "connectorConfigFields": [
                    {
                        "fieldName": "string",
                        "template": "string"
                    }
                ],
                "connectorId": "string",
                "entitySubType": "logsImmediateResolved",
                "entityType": "ENTITY_TYPE_UNSPECIFIED",
                "messageConfigFields": [
                    {
                        "fieldName": "title",
                        "template": "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                    }
                ],
                "payloadType": "default",
                "presetId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testDestination \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"connectorConfigFields":[{"fieldName":"string","template":"string"}],"connectorId":"string","entitySubType":"logsImmediateResolved","entityType":"ENTITY_TYPE_UNSPECIFIED","messageConfigFields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}],"payloadType":"default","presetId":"string"}'
      description: No description available
  /notifications/notification-center/v1/notifications/testing:testExistingConnector:
    post:
      externalDocs:
        url: ''
      operationId: TestingService_TestExistingConnector
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                connectorId:
                  type: string
                payloadType:
                  example: default
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestExistingConnectorResponse'
          description: ''
      summary: TestExistingConnector
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testExistingConnector';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"connectorId":"string","payloadType":"default"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testExistingConnector"


            payload = {
                "connectorId": "string",
                "payloadType": "default"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testExistingConnector \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"connectorId":"string","payloadType":"default"}'
      description: No description available
  /notifications/notification-center/v1/notifications/testing:testExistingPreset:
    post:
      externalDocs:
        url: ''
      operationId: TestingService_TestExistingPreset
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                connectorId:
                  type: string
                entitySubType:
                  example: logsImmediateResolved
                  type: string
                entityType:
                  $ref: '#/components/schemas/notification_center.EntityType'
                presetId:
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestExistingPresetResponse'
          description: ''
      summary: TestExistingPreset
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testExistingPreset';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"connectorId":"string","entitySubType":"logsImmediateResolved","entityType":"ENTITY_TYPE_UNSPECIFIED","presetId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testExistingPreset"


            payload = {
                "connectorId": "string",
                "entitySubType": "logsImmediateResolved",
                "entityType": "ENTITY_TYPE_UNSPECIFIED",
                "presetId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testExistingPreset \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"connectorId":"string","entitySubType":"logsImmediateResolved","entityType":"ENTITY_TYPE_UNSPECIFIED","presetId":"string"}'
      description: No description available
  /notifications/notification-center/v1/notifications/testing:testPresetConfiguration:
    post:
      externalDocs:
        url: ''
      operationId: TestingService_TestPresetConfig
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                configOverrides:
                  items:
                    $ref: '#/components/schemas/ConfigOverrides'
                  type: array
                connectorId:
                  type: string
                entitySubType:
                  example: metric
                  type: string
                entityType:
                  $ref: '#/components/schemas/notification_center.EntityType'
                parentPresetId:
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestPresetConfigResponse'
          description: ''
      summary: TestPresetConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testPresetConfiguration';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"configOverrides":[{"conditionType":{"matchEntityType":{}},"messageConfig":{"fields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}]},"payloadType":"string"}],"connectorId":"string","entitySubType":"metric","entityType":"ENTITY_TYPE_UNSPECIFIED","parentPresetId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testPresetConfiguration"


            payload = {
                "configOverrides": [
                    {
                        "conditionType": {"matchEntityType": {}},
                        "messageConfig": {"fields": [
                                {
                                    "fieldName": "title",
                                    "template": "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                                }
                            ]},
                        "payloadType": "string"
                    }
                ],
                "connectorId": "string",
                "entitySubType": "metric",
                "entityType": "ENTITY_TYPE_UNSPECIFIED",
                "parentPresetId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testPresetConfiguration \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"configOverrides":[{"conditionType":{"matchEntityType":{}},"messageConfig":{"fields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}]},"payloadType":"string"}],"connectorId":"string","entitySubType":"metric","entityType":"ENTITY_TYPE_UNSPECIFIED","parentPresetId":"string"}'
      description: No description available
  /notifications/notification-center/v1/notifications/testing:testRoutingConditionValid:
    post:
      externalDocs:
        url: ''
      operationId: TestingService_TestRoutingConditionValid
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: Request to check that provided routing condition is valid
              properties:
                entityType:
                  $ref: '#/components/schemas/notification_center.EntityType'
                template:
                  example: alertDef.priority == 'P1'
                  type: string
              title: Test Routing Condition Valid Request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestRoutingConditionValidResponse'
          description: ''
      summary: TestRoutingConditionValid
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testRoutingConditionValid';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"entityType":"ENTITY_TYPE_UNSPECIFIED","template":"alertDef.priority == \'P1\'"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testRoutingConditionValid"


            payload = {
                "entityType": "ENTITY_TYPE_UNSPECIFIED",
                "template": "alertDef.priority == 'P1'"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testRoutingConditionValid \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"entityType":"ENTITY_TYPE_UNSPECIFIED","template":"alertDef.priority == '\''P1'\''"}'
      description: No description available
  /notifications/notification-center/v1/notifications/testing:testTemplateRender:
    post:
      externalDocs:
        url: ''
      operationId: TestingService_TestTemplateRender
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                entitySubType:
                  example: logsImmediateResolved
                  type: string
                entityType:
                  $ref: '#/components/schemas/notification_center.EntityType'
                template:
                  example: '{{ alertDef.name }}'
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestTemplateRenderResponse'
          description: ''
      summary: TestTemplateRender
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testTemplateRender';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"entitySubType":"logsImmediateResolved","entityType":"ENTITY_TYPE_UNSPECIFIED","template":"{{ alertDef.name }}"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testTemplateRender"


            payload = {
                "entitySubType": "logsImmediateResolved",
                "entityType": "ENTITY_TYPE_UNSPECIFIED",
                "template": "{{ alertDef.name }}"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/notifications/testing:testTemplateRender \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"entitySubType":"logsImmediateResolved","entityType":"ENTITY_TYPE_UNSPECIFIED","template":"{{ alertDef.name }}"}'
      description: No description available
  /notifications/notification-center/v1/presets/custom:
    put:
      externalDocs:
        url: ''
      operationId: PresetsService_ReplaceCustomPreset
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                Set of preconfigured templates for notification content
                rendering
              properties:
                configOverrides:
                  items:
                    $ref: '#/components/schemas/ConfigOverrides'
                  type: array
                connectorType:
                  $ref: '#/components/schemas/ConnectorType'
                createTime:
                  format: date-time
                  type: string
                description:
                  example: Custom preset for alerts
                  type: string
                entityType:
                  $ref: '#/components/schemas/notification_center.EntityType'
                id:
                  example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
                  type: string
                name:
                  example: My Preset
                  type: string
                parentId:
                  example: preset_system_slack_alerts_basic
                  type: string
                presetType:
                  $ref: '#/components/schemas/PresetType'
                updateTime:
                  format: date-time
                  type: string
              required:
                - entityType
                - configOverrides
                - name
              title: Preset
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceCustomPresetResponse'
          description: ''
      summary: Replace Custom Preset
      tags:
        - Presets service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"configOverrides":[{"conditionType":{"matchEntityType":{}},"messageConfig":{"fields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}]},"payloadType":"string"}],"connectorType":"CONNECTOR_TYPE_UNSPECIFIED","createTime":"2019-08-24T14:15:22Z","description":"Custom preset for alerts","entityType":"ENTITY_TYPE_UNSPECIFIED","id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","name":"My Preset","parentId":"preset_system_slack_alerts_basic","presetType":"PRESET_TYPE_UNSPECIFIED","updateTime":"2019-08-24T14:15:22Z"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom"


            payload = {
                "configOverrides": [
                    {
                        "conditionType": {"matchEntityType": {}},
                        "messageConfig": {"fields": [
                                {
                                    "fieldName": "title",
                                    "template": "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                                }
                            ]},
                        "payloadType": "string"
                    }
                ],
                "connectorType": "CONNECTOR_TYPE_UNSPECIFIED",
                "createTime": "2019-08-24T14:15:22Z",
                "description": "Custom preset for alerts",
                "entityType": "ENTITY_TYPE_UNSPECIFIED",
                "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "name": "My Preset",
                "parentId": "preset_system_slack_alerts_basic",
                "presetType": "PRESET_TYPE_UNSPECIFIED",
                "updateTime": "2019-08-24T14:15:22Z"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"configOverrides":[{"conditionType":{"matchEntityType":{}},"messageConfig":{"fields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}]},"payloadType":"string"}],"connectorType":"CONNECTOR_TYPE_UNSPECIFIED","createTime":"2019-08-24T14:15:22Z","description":"Custom preset for alerts","entityType":"ENTITY_TYPE_UNSPECIFIED","id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","name":"My Preset","parentId":"preset_system_slack_alerts_basic","presetType":"PRESET_TYPE_UNSPECIFIED","updateTime":"2019-08-24T14:15:22Z"}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: PresetsService_CreateCustomPreset
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                Set of preconfigured templates for notification content
                rendering
              properties:
                configOverrides:
                  items:
                    $ref: '#/components/schemas/ConfigOverrides'
                  type: array
                connectorType:
                  $ref: '#/components/schemas/ConnectorType'
                createTime:
                  format: date-time
                  type: string
                description:
                  example: Custom preset for alerts
                  type: string
                entityType:
                  $ref: '#/components/schemas/notification_center.EntityType'
                id:
                  example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
                  type: string
                name:
                  example: My Preset
                  type: string
                parentId:
                  example: preset_system_slack_alerts_basic
                  type: string
                presetType:
                  $ref: '#/components/schemas/PresetType'
                updateTime:
                  format: date-time
                  type: string
              required:
                - entityType
                - configOverrides
                - name
              title: Preset
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCustomPresetResponse'
          description: ''
      summary: Create Custom Preset
      tags:
        - Presets service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"configOverrides":[{"conditionType":{"matchEntityType":{}},"messageConfig":{"fields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}]},"payloadType":"string"}],"connectorType":"CONNECTOR_TYPE_UNSPECIFIED","createTime":"2019-08-24T14:15:22Z","description":"Custom preset for alerts","entityType":"ENTITY_TYPE_UNSPECIFIED","id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","name":"My Preset","parentId":"preset_system_slack_alerts_basic","presetType":"PRESET_TYPE_UNSPECIFIED","updateTime":"2019-08-24T14:15:22Z"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom"


            payload = {
                "configOverrides": [
                    {
                        "conditionType": {"matchEntityType": {}},
                        "messageConfig": {"fields": [
                                {
                                    "fieldName": "title",
                                    "template": "{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"
                                }
                            ]},
                        "payloadType": "string"
                    }
                ],
                "connectorType": "CONNECTOR_TYPE_UNSPECIFIED",
                "createTime": "2019-08-24T14:15:22Z",
                "description": "Custom preset for alerts",
                "entityType": "ENTITY_TYPE_UNSPECIFIED",
                "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "name": "My Preset",
                "parentId": "preset_system_slack_alerts_basic",
                "presetType": "PRESET_TYPE_UNSPECIFIED",
                "updateTime": "2019-08-24T14:15:22Z"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"configOverrides":[{"conditionType":{"matchEntityType":{}},"messageConfig":{"fields":[{"fieldName":"title","template":"{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}"}]},"payloadType":"string"}],"connectorType":"CONNECTOR_TYPE_UNSPECIFIED","createTime":"2019-08-24T14:15:22Z","description":"Custom preset for alerts","entityType":"ENTITY_TYPE_UNSPECIFIED","id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","name":"My Preset","parentId":"preset_system_slack_alerts_basic","presetType":"PRESET_TYPE_UNSPECIFIED","updateTime":"2019-08-24T14:15:22Z"}'
      description: No description available
  /notifications/notification-center/v1/presets/custom/{id}:
    delete:
      externalDocs:
        url: ''
      operationId: PresetsService_DeleteCustomPreset
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCustomPresetResponse'
          description: ''
      summary: Delete Custom Preset
      tags:
        - Presets service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /notifications/notification-center/v1/presets/custom/{id}:defaultSet:
    post:
      externalDocs:
        url: ''
      operationId: PresetsService_SetCustomPresetAsDefault
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetCustomPresetAsDefaultResponse'
          description: ''
      summary: Set Custom Preset As Default
      tags:
        - Presets service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom/%7Bid%7D:defaultSet';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom/%7Bid%7D:defaultSet"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/custom/%7Bid%7D:defaultSet \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /notifications/notification-center/v1/presets/{id}:
    get:
      externalDocs:
        url: ''
      operationId: PresetsService_GetPreset
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPresetResponse'
          description: ''
      summary: Get Preset
      tags:
        - Presets service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /notifications/notification-center/v1/presets/{id}:defaultSet:
    post:
      externalDocs:
        url: ''
      operationId: PresetsService_SetPresetAsDefault
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPresetAsDefaultResponse'
          description: ''
      summary: Set Preset As Default
      tags:
        - Presets service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/%7Bid%7D:defaultSet';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/%7Bid%7D:defaultSet"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets/%7Bid%7D:defaultSet \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /notifications/notification-center/v1/presets:batchGet:
    get:
      externalDocs:
        url: ''
      operationId: PresetsService_BatchGetPresets
      parameters:
        - in: query
          name: preset_ids
          required: false
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetPresetsResponse'
          description: ''
      summary: Batch Get Presets
      tags:
        - Presets service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:batchGet?preset_ids=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:batchGet"


            querystring = {"preset_ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:batchGet?preset_ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /notifications/notification-center/v1/presets:defaultSummaryGet:
    get:
      externalDocs:
        url: ''
      operationId: PresetsService_GetDefaultPresetSummary
      parameters:
        - in: query
          name: connector_type
          required: false
          schema:
            enum:
              - CONNECTOR_TYPE_UNSPECIFIED
              - SLACK
              - GENERIC_HTTPS
              - PAGERDUTY
              - IBM_EVENT_NOTIFICATIONS
            type: string
        - in: query
          name: entity_type
          required: false
          schema:
            enum:
              - ENTITY_TYPE_UNSPECIFIED
              - ALERTS
              - TEST_NOTIFICATIONS
              - CASES
            example: ALERTS
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDefaultPresetSummaryResponse'
          description: ''
      summary: Get Default Preset Summary
      tags:
        - Presets service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:defaultSummaryGet?connector_type=SOME_STRING_VALUE&entity_type=ALERTS';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:defaultSummaryGet"


            querystring =
            {"connector_type":"SOME_STRING_VALUE","entity_type":"ALERTS"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:defaultSummaryGet?connector_type=SOME_STRING_VALUE&entity_type=ALERTS' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /notifications/notification-center/v1/presets:summariesList:
    get:
      externalDocs:
        url: ''
      operationId: PresetsService_ListPresetSummaries
      parameters:
        - in: query
          name: connector_type
          required: false
          schema:
            enum:
              - CONNECTOR_TYPE_UNSPECIFIED
              - SLACK
              - GENERIC_HTTPS
              - PAGERDUTY
              - IBM_EVENT_NOTIFICATIONS
            type: string
        - in: query
          name: entity_type
          required: false
          schema:
            enum:
              - ENTITY_TYPE_UNSPECIFIED
              - ALERTS
              - TEST_NOTIFICATIONS
              - CASES
            example: ALERTS
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPresetSummariesResponse'
          description: ''
      summary: List Preset Summaries
      tags:
        - Presets service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:summariesList?connector_type=SOME_STRING_VALUE&entity_type=ALERTS';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:summariesList"


            querystring =
            {"connector_type":"SOME_STRING_VALUE","entity_type":"ALERTS"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:summariesList?connector_type=SOME_STRING_VALUE&entity_type=ALERTS' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /notifications/notification-center/v1/presets:systemDefaultSummaryGet:
    get:
      externalDocs:
        url: ''
      operationId: PresetsService_GetSystemDefaultPresetSummary
      parameters:
        - in: query
          name: connector_type
          required: false
          schema:
            enum:
              - CONNECTOR_TYPE_UNSPECIFIED
              - SLACK
              - GENERIC_HTTPS
              - PAGERDUTY
              - IBM_EVENT_NOTIFICATIONS
            type: string
        - in: query
          name: entity_type
          required: false
          schema:
            enum:
              - ENTITY_TYPE_UNSPECIFIED
              - ALERTS
              - TEST_NOTIFICATIONS
              - CASES
            example: ALERTS
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSystemDefaultPresetSummaryResponse'
          description: ''
      summary: Get System Default Preset Summary
      tags:
        - Presets service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:systemDefaultSummaryGet?connector_type=SOME_STRING_VALUE&entity_type=ALERTS';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:systemDefaultSummaryGet"


            querystring =
            {"connector_type":"SOME_STRING_VALUE","entity_type":"ALERTS"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/presets:systemDefaultSummaryGet?connector_type=SOME_STRING_VALUE&entity_type=ALERTS' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /notifications/notification-center/v1/routers:
    get:
      externalDocs:
        url: ''
      operationId: GlobalRoutersService_ListGlobalRouters
      parameters:
        - in: query
          name: entity_type
          required: false
          schema:
            deprecated: true
            enum:
              - ENTITY_TYPE_UNSPECIFIED
              - ALERTS
              - TEST_NOTIFICATIONS
              - CASES
            type: string
        - in: query
          name: source_entity_labels
          required: false
          schema:
            additionalProperties:
              properties:
                values:
                  items:
                    type: string
                  type: array
              type: object
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGlobalRoutersResponse'
          description: ''
      summary: List Global Routers
      tags:
        - Global routers service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers?entity_type=SOME_STRING_VALUE&source_entity_labels=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers"


            querystring =
            {"entity_type":"SOME_STRING_VALUE","source_entity_labels":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers?entity_type=SOME_STRING_VALUE&source_entity_labels=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: GlobalRoutersService_ReplaceGlobalRouter
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                Defines a set of pre-configured routing rules for directing
                notifications
              properties:
                createTime:
                  format: date-time
                  type: string
                description:
                  type: string
                entityLabelMatcher:
                  additionalProperties:
                    type: string
                  type: object
                entityLabels:
                  additionalProperties:
                    type: string
                  type: object
                entityType:
                  $ref: '#/components/schemas/notification_center.EntityType'
                fallback:
                  items:
                    $ref: '#/components/schemas/RoutingTarget'
                  type: array
                id:
                  example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
                  type: string
                name:
                  example: My Router
                  type: string
                rules:
                  items:
                    $ref: '#/components/schemas/RoutingRule'
                  type: array
                updateTime:
                  format: date-time
                  type: string
              required:
                - entityType
                - name
              title: Global Router
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceGlobalRouterResponse'
          description: ''
      summary: Replace Global Router
      tags:
        - Global routers service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"createTime":"2019-08-24T14:15:22Z","description":"string","entityLabelMatcher":{"property1":"string","property2":"string"},"entityLabels":{"property1":"string","property2":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED","fallback":[{"connectorId":"string","customDetails":{"property1":"string","property2":"string"},"presetId":"string"}],"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","name":"My Router","rules":[{"condition":"alertDef.priority == \'P3\'","customDetails":{"property1":"string","property2":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED","name":"string","targets":[{"connectorId":"string","customDetails":{"property1":"string","property2":"string"},"presetId":"string"}]}],"updateTime":"2019-08-24T14:15:22Z"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers"


            payload = {
                "createTime": "2019-08-24T14:15:22Z",
                "description": "string",
                "entityLabelMatcher": {
                    "property1": "string",
                    "property2": "string"
                },
                "entityLabels": {
                    "property1": "string",
                    "property2": "string"
                },
                "entityType": "ENTITY_TYPE_UNSPECIFIED",
                "fallback": [
                    {
                        "connectorId": "string",
                        "customDetails": {
                            "property1": "string",
                            "property2": "string"
                        },
                        "presetId": "string"
                    }
                ],
                "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "name": "My Router",
                "rules": [
                    {
                        "condition": "alertDef.priority == 'P3'",
                        "customDetails": {
                            "property1": "string",
                            "property2": "string"
                        },
                        "entityType": "ENTITY_TYPE_UNSPECIFIED",
                        "name": "string",
                        "targets": [
                            {
                                "connectorId": "string",
                                "customDetails": {
                                    "property1": "string",
                                    "property2": "string"
                                },
                                "presetId": "string"
                            }
                        ]
                    }
                ],
                "updateTime": "2019-08-24T14:15:22Z"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"createTime":"2019-08-24T14:15:22Z","description":"string","entityLabelMatcher":{"property1":"string","property2":"string"},"entityLabels":{"property1":"string","property2":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED","fallback":[{"connectorId":"string","customDetails":{"property1":"string","property2":"string"},"presetId":"string"}],"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","name":"My Router","rules":[{"condition":"alertDef.priority == '\''P3'\''","customDetails":{"property1":"string","property2":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED","name":"string","targets":[{"connectorId":"string","customDetails":{"property1":"string","property2":"string"},"presetId":"string"}]}],"updateTime":"2019-08-24T14:15:22Z"}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: GlobalRoutersService_CreateGlobalRouter
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                Defines a set of pre-configured routing rules for directing
                notifications
              properties:
                createTime:
                  format: date-time
                  type: string
                description:
                  type: string
                entityLabelMatcher:
                  additionalProperties:
                    type: string
                  type: object
                entityLabels:
                  additionalProperties:
                    type: string
                  type: object
                entityType:
                  $ref: '#/components/schemas/notification_center.EntityType'
                fallback:
                  items:
                    $ref: '#/components/schemas/RoutingTarget'
                  type: array
                id:
                  example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
                  type: string
                name:
                  example: My Router
                  type: string
                rules:
                  items:
                    $ref: '#/components/schemas/RoutingRule'
                  type: array
                updateTime:
                  format: date-time
                  type: string
              required:
                - entityType
                - name
              title: Global Router
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateGlobalRouterResponse'
          description: ''
      summary: Create Global Router
      tags:
        - Global routers service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"createTime":"2019-08-24T14:15:22Z","description":"string","entityLabelMatcher":{"property1":"string","property2":"string"},"entityLabels":{"property1":"string","property2":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED","fallback":[{"connectorId":"string","customDetails":{"property1":"string","property2":"string"},"presetId":"string"}],"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","name":"My Router","rules":[{"condition":"alertDef.priority == \'P3\'","customDetails":{"property1":"string","property2":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED","name":"string","targets":[{"connectorId":"string","customDetails":{"property1":"string","property2":"string"},"presetId":"string"}]}],"updateTime":"2019-08-24T14:15:22Z"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers"


            payload = {
                "createTime": "2019-08-24T14:15:22Z",
                "description": "string",
                "entityLabelMatcher": {
                    "property1": "string",
                    "property2": "string"
                },
                "entityLabels": {
                    "property1": "string",
                    "property2": "string"
                },
                "entityType": "ENTITY_TYPE_UNSPECIFIED",
                "fallback": [
                    {
                        "connectorId": "string",
                        "customDetails": {
                            "property1": "string",
                            "property2": "string"
                        },
                        "presetId": "string"
                    }
                ],
                "id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
                "name": "My Router",
                "rules": [
                    {
                        "condition": "alertDef.priority == 'P3'",
                        "customDetails": {
                            "property1": "string",
                            "property2": "string"
                        },
                        "entityType": "ENTITY_TYPE_UNSPECIFIED",
                        "name": "string",
                        "targets": [
                            {
                                "connectorId": "string",
                                "customDetails": {
                                    "property1": "string",
                                    "property2": "string"
                                },
                                "presetId": "string"
                            }
                        ]
                    }
                ],
                "updateTime": "2019-08-24T14:15:22Z"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"createTime":"2019-08-24T14:15:22Z","description":"string","entityLabelMatcher":{"property1":"string","property2":"string"},"entityLabels":{"property1":"string","property2":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED","fallback":[{"connectorId":"string","customDetails":{"property1":"string","property2":"string"},"presetId":"string"}],"id":"a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9","name":"My Router","rules":[{"condition":"alertDef.priority == '\''P3'\''","customDetails":{"property1":"string","property2":"string"},"entityType":"ENTITY_TYPE_UNSPECIFIED","name":"string","targets":[{"connectorId":"string","customDetails":{"property1":"string","property2":"string"},"presetId":"string"}]}],"updateTime":"2019-08-24T14:15:22Z"}'
      description: No description available
  /notifications/notification-center/v1/routers/{id}:
    get:
      externalDocs:
        url: ''
      operationId: GlobalRoutersService_GetGlobalRouter
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGlobalRouterResponse'
          description: ''
      summary: Get Global Router
      tags:
        - Global routers service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: GlobalRoutersService_DeleteGlobalRouter
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteGlobalRouterResponse'
          description: ''
      summary: Delete Global Router
      tags:
        - Global routers service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /notifications/notification-center/v1/routers:batchGetSummaries:
    get:
      externalDocs:
        url: ''
      operationId: GlobalRoutersService_BatchGetGlobalRouters
      parameters:
        - in: query
          name: global_router_ids
          required: false
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetGlobalRoutersResponse'
          description: ''
      summary: Batch Get Global Routers
      tags:
        - Global routers service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers:batchGetSummaries?global_router_ids=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers:batchGetSummaries"


            querystring = {"global_router_ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers:batchGetSummaries?global_router_ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /notifications/notification-center/v1/routers:validateEntityLabelMatcher:
    post:
      externalDocs:
        url: ''
      operationId: GlobalRoutersService_ValidateEntityLabelMatcher
      parameters:
        - in: query
          name: entity_label_matcher
          required: false
          schema:
            additionalProperties: null
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateEntityLabelMatcherResponse'
          description: ''
      summary: ValidateEntityLabelMatcher
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers:validateEntityLabelMatcher?entity_label_matcher=SOME_OBJECT_VALUE';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers:validateEntityLabelMatcher"


            querystring = {"entity_label_matcher":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/notifications/notification-center/v1/routers:validateEntityLabelMatcher?entity_label_matcher=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /parsing-rules/rule-groups/v1:
    get:
      externalDocs:
        url: ''
      operationId: RuleGroupsService_ListRuleGroups
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRuleGroupsResponse'
          description: ''
      summary: ListRuleGroups
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1 \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: RuleGroupsService_CreateRuleGroup
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                creator:
                  type: string
                description:
                  type: string
                enabled:
                  type: boolean
                hidden:
                  type: boolean
                name:
                  type: string
                order:
                  format: int64
                  type: integer
                ruleMatchers:
                  items:
                    $ref: '#/components/schemas/RuleMatcher'
                  type: array
                ruleSubgroups:
                  items:
                    $ref: >-
                      #/components/schemas/CreateRuleGroupRequest.CreateRuleSubgroup
                  type: array
                teamId:
                  $ref: '#/components/schemas/rules.v1.TeamId'
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRuleGroupResponse'
          description: ''
      summary: CreateRuleGroup
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"creator":"string","description":"string","enabled":true,"hidden":true,"name":"string","order":0,"ruleMatchers":[{"applicationName":{"value":"string"}}],"ruleSubgroups":[{"enabled":true,"order":0,"rules":[{"description":"string","enabled":true,"name":"string","order":0,"parameters":{"extractParameters":{"rule":"string"}},"sourceField":"string"}]}],"teamId":{"id":0}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1"


            payload = {
                "creator": "string",
                "description": "string",
                "enabled": True,
                "hidden": True,
                "name": "string",
                "order": 0,
                "ruleMatchers": [{"applicationName": {"value": "string"}}],
                "ruleSubgroups": [
                    {
                        "enabled": True,
                        "order": 0,
                        "rules": [
                            {
                                "description": "string",
                                "enabled": True,
                                "name": "string",
                                "order": 0,
                                "parameters": {"extractParameters": {"rule": "string"}},
                                "sourceField": "string"
                            }
                        ]
                    }
                ],
                "teamId": {"id": 0}
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"creator":"string","description":"string","enabled":true,"hidden":true,"name":"string","order":0,"ruleMatchers":[{"applicationName":{"value":"string"}}],"ruleSubgroups":[{"enabled":true,"order":0,"rules":[{"description":"string","enabled":true,"name":"string","order":0,"parameters":{"extractParameters":{"rule":"string"}},"sourceField":"string"}]}],"teamId":{"id":0}}'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: RuleGroupsService_BulkDeleteRuleGroup
      parameters:
        - in: query
          name: group_ids
          required: false
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkDeleteRuleGroupResponse'
          description: ''
      summary: BulkDeleteRuleGroup
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1?group_ids=SOME_ARRAY_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1"


            querystring = {"group_ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1?group_ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /parsing-rules/rule-groups/v1/limits:
    post:
      externalDocs:
        url: ''
      operationId: RuleGroupsService_GetCompanyUsageLimits
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCompanyUsageLimitsResponse'
          description: ''
      summary: GetCompanyUsageLimits
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1/limits';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1/limits"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1/limits \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /parsing-rules/rule-groups/v1/mapping:
    post:
      externalDocs:
        url: ''
      operationId: RuleGroupsService_GetRuleGroupModelMapping
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                creator:
                  type: string
                description:
                  type: string
                enabled:
                  type: boolean
                hidden:
                  type: boolean
                name:
                  type: string
                order:
                  format: int64
                  type: integer
                ruleMatchers:
                  items:
                    $ref: '#/components/schemas/RuleMatcher'
                  type: array
                ruleSubgroups:
                  items:
                    $ref: >-
                      #/components/schemas/GetRuleGroupModelMappingRequest.CreateRuleSubgroup
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRuleGroupModelMappingResponse'
          description: ''
      summary: GetRuleGroupModelMapping
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1/mapping';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"creator":"string","description":"string","enabled":true,"hidden":true,"name":"string","order":0,"ruleMatchers":[{"applicationName":{"value":"string"}}],"ruleSubgroups":[{"enabled":true,"order":0,"rules":[{"description":"string","enabled":true,"name":"string","order":0,"parameters":{"extractParameters":{"rule":"string"}},"sourceField":"string"}]}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1/mapping"


            payload = {
                "creator": "string",
                "description": "string",
                "enabled": True,
                "hidden": True,
                "name": "string",
                "order": 0,
                "ruleMatchers": [{"applicationName": {"value": "string"}}],
                "ruleSubgroups": [
                    {
                        "enabled": True,
                        "order": 0,
                        "rules": [
                            {
                                "description": "string",
                                "enabled": True,
                                "name": "string",
                                "order": 0,
                                "parameters": {"extractParameters": {"rule": "string"}},
                                "sourceField": "string"
                            }
                        ]
                    }
                ]
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1/mapping \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"creator":"string","description":"string","enabled":true,"hidden":true,"name":"string","order":0,"ruleMatchers":[{"applicationName":{"value":"string"}}],"ruleSubgroups":[{"enabled":true,"order":0,"rules":[{"description":"string","enabled":true,"name":"string","order":0,"parameters":{"extractParameters":{"rule":"string"}},"sourceField":"string"}]}]}'
      description: No description available
  /parsing-rules/rule-groups/v1/{group_id}:
    get:
      externalDocs:
        url: ''
      operationId: RuleGroupsService_GetRuleGroup
      parameters:
        - in: path
          name: group_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRuleGroupResponse'
          description: ''
      summary: GetRuleGroup
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1/%7Bgroup_id%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1/%7Bgroup_id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1/%7Bgroup_id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: RuleGroupsService_UpdateRuleGroup
      parameters:
        - in: path
          name: group_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                creator:
                  type: string
                description:
                  type: string
                enabled:
                  type: boolean
                hidden:
                  type: boolean
                name:
                  type: string
                order:
                  format: int64
                  type: integer
                ruleMatchers:
                  items:
                    $ref: '#/components/schemas/RuleMatcher'
                  type: array
                ruleSubgroups:
                  items:
                    $ref: >-
                      #/components/schemas/CreateRuleGroupRequest.CreateRuleSubgroup
                  type: array
                teamId:
                  $ref: '#/components/schemas/rules.v1.TeamId'
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRuleGroupResponse'
          description: ''
      summary: UpdateRuleGroup
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1/%7Bgroup_id%7D';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"creator":"string","description":"string","enabled":true,"hidden":true,"name":"string","order":0,"ruleMatchers":[{"applicationName":{"value":"string"}}],"ruleSubgroups":[{"enabled":true,"order":0,"rules":[{"description":"string","enabled":true,"name":"string","order":0,"parameters":{"extractParameters":{"rule":"string"}},"sourceField":"string"}]}],"teamId":{"id":0}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1/%7Bgroup_id%7D"


            payload = {
                "creator": "string",
                "description": "string",
                "enabled": True,
                "hidden": True,
                "name": "string",
                "order": 0,
                "ruleMatchers": [{"applicationName": {"value": "string"}}],
                "ruleSubgroups": [
                    {
                        "enabled": True,
                        "order": 0,
                        "rules": [
                            {
                                "description": "string",
                                "enabled": True,
                                "name": "string",
                                "order": 0,
                                "parameters": {"extractParameters": {"rule": "string"}},
                                "sourceField": "string"
                            }
                        ]
                    }
                ],
                "teamId": {"id": 0}
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1/%7Bgroup_id%7D \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"creator":"string","description":"string","enabled":true,"hidden":true,"name":"string","order":0,"ruleMatchers":[{"applicationName":{"value":"string"}}],"ruleSubgroups":[{"enabled":true,"order":0,"rules":[{"description":"string","enabled":true,"name":"string","order":0,"parameters":{"extractParameters":{"rule":"string"}},"sourceField":"string"}]}],"teamId":{"id":0}}'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: RuleGroupsService_DeleteRuleGroup
      parameters:
        - in: path
          name: group_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRuleGroupResponse'
          description: ''
      summary: DeleteRuleGroup
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1/%7Bgroup_id%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1/%7Bgroup_id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/parsing-rules/rule-groups/v1/%7Bgroup_id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/alert-scheduler-rules:
    put:
      externalDocs:
        url: ''
      operationId: AlertSchedulerRuleService_UpdateAlertSchedulerRule
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: This is a request sent to update an alert scheduler rule
              properties:
                alertSchedulerRule:
                  $ref: '#/components/schemas/AlertSchedulerRule'
              required:
                - alertSchedulerRule
              title: Update alert scheduler rule request data structure
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAlertSchedulerRuleResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Update an alert scheduler rule
      tags:
        - Alert Scheduler Rule service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"alertSchedulerRule":{"createdAt":"string","description":"string","enabled":true,"filter":{"alertMetaLabels":{"value":[{"id":"string","key":"string","value":"string"}]},"whatExpression":"string"},"id":"string","metaLabels":[{"id":"string","key":"string","value":"string"}],"name":"string","schedule":{"oneTime":{"timeframe":{"endTime":"string","startTime":"string","timezone":"string"}},"scheduleOperation":"SCHEDULE_OPERATION_UNSPECIFIED"},"uniqueIdentifier":"string","updatedAt":"string"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules"


            payload = {"alertSchedulerRule": {
                    "createdAt": "string",
                    "description": "string",
                    "enabled": True,
                    "filter": {
                        "alertMetaLabels": {"value": [
                                {
                                    "id": "string",
                                    "key": "string",
                                    "value": "string"
                                }
                            ]},
                        "whatExpression": "string"
                    },
                    "id": "string",
                    "metaLabels": [
                        {
                            "id": "string",
                            "key": "string",
                            "value": "string"
                        }
                    ],
                    "name": "string",
                    "schedule": {
                        "oneTime": {"timeframe": {
                                "endTime": "string",
                                "startTime": "string",
                                "timezone": "string"
                            }},
                        "scheduleOperation": "SCHEDULE_OPERATION_UNSPECIFIED"
                    },
                    "uniqueIdentifier": "string",
                    "updatedAt": "string"
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"alertSchedulerRule":{"createdAt":"string","description":"string","enabled":true,"filter":{"alertMetaLabels":{"value":[{"id":"string","key":"string","value":"string"}]},"whatExpression":"string"},"id":"string","metaLabels":[{"id":"string","key":"string","value":"string"}],"name":"string","schedule":{"oneTime":{"timeframe":{"endTime":"string","startTime":"string","timezone":"string"}},"scheduleOperation":"SCHEDULE_OPERATION_UNSPECIFIED"},"uniqueIdentifier":"string","updatedAt":"string"}}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: AlertSchedulerRuleService_CreateAlertSchedulerRule
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: This is a request sent to create an alert scheduler rule
              properties:
                alertSchedulerRule:
                  $ref: '#/components/schemas/AlertSchedulerRule'
              required:
                - alertSchedulerRule
              title: Create alert scheduler rule request data structure
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAlertSchedulerRuleResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Create an alert scheduler rule
      tags:
        - Alert Scheduler Rule service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"alertSchedulerRule":{"createdAt":"string","description":"string","enabled":true,"filter":{"alertMetaLabels":{"value":[{"id":"string","key":"string","value":"string"}]},"whatExpression":"string"},"id":"string","metaLabels":[{"id":"string","key":"string","value":"string"}],"name":"string","schedule":{"oneTime":{"timeframe":{"endTime":"string","startTime":"string","timezone":"string"}},"scheduleOperation":"SCHEDULE_OPERATION_UNSPECIFIED"},"uniqueIdentifier":"string","updatedAt":"string"}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules"


            payload = {"alertSchedulerRule": {
                    "createdAt": "string",
                    "description": "string",
                    "enabled": True,
                    "filter": {
                        "alertMetaLabels": {"value": [
                                {
                                    "id": "string",
                                    "key": "string",
                                    "value": "string"
                                }
                            ]},
                        "whatExpression": "string"
                    },
                    "id": "string",
                    "metaLabels": [
                        {
                            "id": "string",
                            "key": "string",
                            "value": "string"
                        }
                    ],
                    "name": "string",
                    "schedule": {
                        "oneTime": {"timeframe": {
                                "endTime": "string",
                                "startTime": "string",
                                "timezone": "string"
                            }},
                        "scheduleOperation": "SCHEDULE_OPERATION_UNSPECIFIED"
                    },
                    "uniqueIdentifier": "string",
                    "updatedAt": "string"
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"alertSchedulerRule":{"createdAt":"string","description":"string","enabled":true,"filter":{"alertMetaLabels":{"value":[{"id":"string","key":"string","value":"string"}]},"whatExpression":"string"},"id":"string","metaLabels":[{"id":"string","key":"string","value":"string"}],"name":"string","schedule":{"oneTime":{"timeframe":{"endTime":"string","startTime":"string","timezone":"string"}},"scheduleOperation":"SCHEDULE_OPERATION_UNSPECIFIED"},"uniqueIdentifier":"string","updatedAt":"string"}}'
      description: No description available
  /v1/alert-scheduler-rules/bulk:
    get:
      externalDocs:
        url: ''
      operationId: AlertSchedulerRuleService_GetBulkAlertSchedulerRule
      parameters:
        - in: query
          name: active_timeframe
          required: false
          schema:
            properties:
              endTime:
                type: string
              startTime:
                type: string
              timezone:
                type: string
            type: object
        - in: query
          name: enabled
          required: false
          schema:
            type: boolean
        - in: query
          name: alert_scheduler_rules_ids
          required: false
          schema:
            oneOf:
              - additionalProperties: false
                properties:
                  alertSchedulerIds:
                    properties:
                      alertSchedulerRuleIds:
                        items:
                          type: string
                        type: array
                    type: object
                type: object
              - additionalProperties: false
                properties:
                  alertSchedulerVersionIds:
                    properties:
                      alertSchedulerRuleVersionIds:
                        items:
                          type: string
                        type: array
                    type: object
                type: object
        - in: query
          name: next_page_token
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBulkAlertSchedulerRuleResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get multiple alert scheduler rules
      tags:
        - Alert Scheduler Rule service
    put:
      externalDocs:
        url: ''
      operationId: AlertSchedulerRuleService_UpdateBulkAlertSchedulerRule
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: This is a request sent to update multiple alert scheduler rules
              properties:
                updateAlertSchedulerRuleRequests:
                  items:
                    $ref: '#/components/schemas/UpdateAlertSchedulerRuleRequest'
                  type: array
              required:
                - updateAlertSchedulerRuleRequests
              title: Update bulk alert scheduler rule request data structure
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBulkAlertSchedulerRuleResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Update multiple alert scheduler rules
      tags:
        - Alert Scheduler Rule service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules/bulk';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"updateAlertSchedulerRuleRequests":[{"alertSchedulerRule":{"createdAt":"string","description":"string","enabled":true,"filter":{"alertMetaLabels":{"value":[{"id":"string","key":"string","value":"string"}]},"whatExpression":"string"},"id":"string","metaLabels":[{"id":"string","key":"string","value":"string"}],"name":"string","schedule":{"oneTime":{"timeframe":{"endTime":"string","startTime":"string","timezone":"string"}},"scheduleOperation":"SCHEDULE_OPERATION_UNSPECIFIED"},"uniqueIdentifier":"string","updatedAt":"string"}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules/bulk"


            payload = {"updateAlertSchedulerRuleRequests":
            [{"alertSchedulerRule": {
                            "createdAt": "string",
                            "description": "string",
                            "enabled": True,
                            "filter": {
                                "alertMetaLabels": {"value": [
                                        {
                                            "id": "string",
                                            "key": "string",
                                            "value": "string"
                                        }
                                    ]},
                                "whatExpression": "string"
                            },
                            "id": "string",
                            "metaLabels": [
                                {
                                    "id": "string",
                                    "key": "string",
                                    "value": "string"
                                }
                            ],
                            "name": "string",
                            "schedule": {
                                "oneTime": {"timeframe": {
                                        "endTime": "string",
                                        "startTime": "string",
                                        "timezone": "string"
                                    }},
                                "scheduleOperation": "SCHEDULE_OPERATION_UNSPECIFIED"
                            },
                            "uniqueIdentifier": "string",
                            "updatedAt": "string"
                        }}]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules/bulk \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"updateAlertSchedulerRuleRequests":[{"alertSchedulerRule":{"createdAt":"string","description":"string","enabled":true,"filter":{"alertMetaLabels":{"value":[{"id":"string","key":"string","value":"string"}]},"whatExpression":"string"},"id":"string","metaLabels":[{"id":"string","key":"string","value":"string"}],"name":"string","schedule":{"oneTime":{"timeframe":{"endTime":"string","startTime":"string","timezone":"string"}},"scheduleOperation":"SCHEDULE_OPERATION_UNSPECIFIED"},"uniqueIdentifier":"string","updatedAt":"string"}}]}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: AlertSchedulerRuleService_CreateBulkAlertSchedulerRule
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: This is a request sent to create multiple alert scheduler rules
              properties:
                createAlertSchedulerRuleRequests:
                  items:
                    $ref: '#/components/schemas/CreateAlertSchedulerRuleRequest'
                  type: array
              required:
                - createAlertSchedulerRuleRequests
              title: Create bulk alert scheduler rule request data structure
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBulkAlertSchedulerRuleResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Create multiple alert scheduler rules
      tags:
        - Alert Scheduler Rule service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules/bulk';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"createAlertSchedulerRuleRequests":[{"alertSchedulerRule":{"createdAt":"string","description":"string","enabled":true,"filter":{"alertMetaLabels":{"value":[{"id":"string","key":"string","value":"string"}]},"whatExpression":"string"},"id":"string","metaLabels":[{"id":"string","key":"string","value":"string"}],"name":"string","schedule":{"oneTime":{"timeframe":{"endTime":"string","startTime":"string","timezone":"string"}},"scheduleOperation":"SCHEDULE_OPERATION_UNSPECIFIED"},"uniqueIdentifier":"string","updatedAt":"string"}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules/bulk"


            payload = {"createAlertSchedulerRuleRequests":
            [{"alertSchedulerRule": {
                            "createdAt": "string",
                            "description": "string",
                            "enabled": True,
                            "filter": {
                                "alertMetaLabels": {"value": [
                                        {
                                            "id": "string",
                                            "key": "string",
                                            "value": "string"
                                        }
                                    ]},
                                "whatExpression": "string"
                            },
                            "id": "string",
                            "metaLabels": [
                                {
                                    "id": "string",
                                    "key": "string",
                                    "value": "string"
                                }
                            ],
                            "name": "string",
                            "schedule": {
                                "oneTime": {"timeframe": {
                                        "endTime": "string",
                                        "startTime": "string",
                                        "timezone": "string"
                                    }},
                                "scheduleOperation": "SCHEDULE_OPERATION_UNSPECIFIED"
                            },
                            "uniqueIdentifier": "string",
                            "updatedAt": "string"
                        }}]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules/bulk \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"createAlertSchedulerRuleRequests":[{"alertSchedulerRule":{"createdAt":"string","description":"string","enabled":true,"filter":{"alertMetaLabels":{"value":[{"id":"string","key":"string","value":"string"}]},"whatExpression":"string"},"id":"string","metaLabels":[{"id":"string","key":"string","value":"string"}],"name":"string","schedule":{"oneTime":{"timeframe":{"endTime":"string","startTime":"string","timezone":"string"}},"scheduleOperation":"SCHEDULE_OPERATION_UNSPECIFIED"},"uniqueIdentifier":"string","updatedAt":"string"}}]}'
      description: No description available
  /v1/alert-scheduler-rules/{alert_scheduler_rule_id}:
    get:
      externalDocs:
        url: ''
      operationId: AlertSchedulerRuleService_GetAlertSchedulerRule
      parameters:
        - in: path
          name: alert_scheduler_rule_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAlertSchedulerRuleResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get an alert scheduler rule
      tags:
        - Alert Scheduler Rule service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules/%7Balert_scheduler_rule_id%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules/%7Balert_scheduler_rule_id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules/%7Balert_scheduler_rule_id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: AlertSchedulerRuleService_DeleteAlertSchedulerRule
      parameters:
        - in: path
          name: alert_scheduler_rule_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAlertSchedulerRuleResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Delete an alert scheduler rule
      tags:
        - Alert Scheduler Rule service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules/%7Balert_scheduler_rule_id%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules/%7Balert_scheduler_rule_id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/alert-scheduler-rules/%7Balert_scheduler_rule_id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/custom_enrichment:
    get:
      externalDocs:
        url: ''
      operationId: CustomEnrichmentService_GetCustomEnrichments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCustomEnrichmentsResponse'
          description: ''
      summary: Get Custom Enrichments
      tags:
        - Custom Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: CustomEnrichmentService_UpdateCustomEnrichment
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                This request data structure is used to update a custom
                enrichment
              properties:
                customEnrichmentId:
                  example: 1
                  format: int64
                  type: integer
                description:
                  example: custom_enrichment_description
                  type: string
                file:
                  $ref: '#/components/schemas/File'
                name:
                  example: custom_enrichment_name
                  type: string
              required:
                - customEnrichmentId
                - name
                - description
                - file
              title: Update Custom Enrichment Request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCustomEnrichmentResponse'
          description: ''
      summary: Update Custom Enrichment
      tags:
        - Custom Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"customEnrichmentId":1,"description":"custom_enrichment_description","file":{"extension":"csv","name":"file_name","size":100,"textual":"row1,row2 value1,value2"},"name":"custom_enrichment_name"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment"


            payload = {
                "customEnrichmentId": 1,
                "description": "custom_enrichment_description",
                "file": {
                    "extension": "csv",
                    "name": "file_name",
                    "size": 100,
                    "textual": "row1,row2 value1,value2"
                },
                "name": "custom_enrichment_name"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"customEnrichmentId":1,"description":"custom_enrichment_description","file":{"extension":"csv","name":"file_name","size":100,"textual":"row1,row2 value1,value2"},"name":"custom_enrichment_name"}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: CustomEnrichmentService_CreateCustomEnrichment
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                This request data structure is used to create a custom
                enrichment
              properties:
                description:
                  example: custom_enrichment_description
                  type: string
                file:
                  $ref: '#/components/schemas/File'
                name:
                  example: custom_enrichment_name
                  type: string
              required:
                - name
                - description
                - file
              title: Create Custom Enrichment Request
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCustomEnrichmentResponse'
          description: ''
      summary: Create Custom Enrichments
      tags:
        - Custom Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"description":"custom_enrichment_description","file":{"extension":"csv","name":"file_name","size":100,"textual":"row1,row2 value1,value2"},"name":"custom_enrichment_name"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment"


            payload = {
                "description": "custom_enrichment_description",
                "file": {
                    "extension": "csv",
                    "name": "file_name",
                    "size": 100,
                    "textual": "row1,row2 value1,value2"
                },
                "name": "custom_enrichment_name"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"description":"custom_enrichment_description","file":{"extension":"csv","name":"file_name","size":100,"textual":"row1,row2 value1,value2"},"name":"custom_enrichment_name"}'
      description: No description available
  /v1/custom_enrichment/search:
    post:
      externalDocs:
        url: ''
      operationId: CustomEnrichmentService_SearchCustomEnrichmentData
      parameters:
        - in: query
          name: search_clauses
          required: false
          schema:
            items:
              oneOf:
                - additionalProperties: false
                  description: This data structure represents a search clause
                  externalDocs:
                    description: Find out more about enrichments
                    url: >-
                      https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
                  properties:
                    id:
                      example: 1
                      format: int64
                      type: integer
                  required:
                    - searchBy
                  title: Search Clause
                  type: object
                - additionalProperties: false
                  description: This data structure represents a search clause
                  externalDocs:
                    description: Find out more about enrichments
                    url: >-
                      https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
                  properties:
                    name:
                      example: custom_enrichment_name
                      type: string
                  required:
                    - searchBy
                  title: Search Clause
                  type: object
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchCustomEnrichmentDataResponse'
          description: ''
      summary: Search Custom Enrichment Data
      tags:
        - Custom Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/search?search_clauses=SOME_ARRAY_VALUE';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/search"


            querystring = {"search_clauses":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/search?search_clauses=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/custom_enrichment/{custom_enrichment_id}:
    delete:
      externalDocs:
        url: ''
      operationId: CustomEnrichmentService_DeleteCustomEnrichment
      parameters:
        - in: path
          name: custom_enrichment_id
          required: true
          schema:
            example: 1
            format: int64
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCustomEnrichmentResponse'
          description: ''
      summary: Delete Custom Enrichments
      tags:
        - Custom Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/1';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/1"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/1 \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/custom_enrichment/{id}:
    get:
      externalDocs:
        url: ''
      operationId: CustomEnrichmentService_GetCustomEnrichment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            example: 1
            format: int64
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCustomEnrichmentResponse'
          description: ''
      summary: Get Custom Enrichment
      tags:
        - Custom Enrichments Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/1';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/1"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/1 \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/dashboards/by-slug/{slug}:
    get:
      externalDocs:
        url: ''
      operationId: DashboardsService_GetDashboardBySlug
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDashboardBySlugResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get a dashboard by URL slug
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/by-slug/%7Bslug%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/by-slug/%7Bslug%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/by-slug/%7Bslug%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/dashboards/dashboards:
    put:
      externalDocs:
        url: ''
      operationId: DashboardsService_ReplaceDashboard
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                This is a request sent to update an existing dashboard with new
                information
              properties:
                dashboard:
                  $ref: '#/components/schemas/Dashboard'
                isLocked:
                  type: boolean
                requestId:
                  type: string
              required:
                - requestId
                - dashboard
              title: Replace dashboard request data structure
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceDashboardResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Replace a dashboard
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"dashboard":{"absoluteTimeFrame":{"from":"2019-08-24T14:15:22Z","to":"2019-08-24T14:15:22Z"},"actions":[{"dataSource":"ACTION_DATA_SOURCE_TYPE_NONE_UNSPECIFIED","definition":{"customAction":{"url":"string"}},"id":"string","name":"string","shouldOpenInNewWindow":true,"widgetId":"string"}],"annotations":[{"description":"string","enabled":true,"id":"string","name":"string","scope":{"allWidgets":{}},"source":{"metrics":{"labels":["string"],"messageTemplate":"string","orientation":"ANNOTATION_ORIENTATION_VERTICAL_UNSPECIFIED","promqlQuery":{"value":"string"},"strategy":{"startTimeMetric":{}}}}}],"description":"Sample description","filters":[{"collapsed":true,"displayName":"string","enabled":true,"source":{"logs":{"field":"string","observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"operator":{"equals":{"selection":{"all":{}}}}}}}],"folderId":{"value":"string"},"id":"GZLHSeqelCbD3I7HbIDtL","layout":{"sections":[{"id":{"value":"string"},"options":{"internal":{}},"rows":[{"appearance":{"height":{"value":16}},"id":{"value":"string"},"widgets":[{"appearance":{"width":0},"createdAt":"2019-08-24T14:15:22Z","definition":{"lineChart":{"connectNulls":false,"legend":{"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"isVisible":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"queryDefinitions":[{"colorScheme":{"value":"classic"},"customUnit":{"value":"rpm"},"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","decimal":4,"decimalPrecision":false,"hashColors":false,"id":{"value":"73c65643-91d5-dba2-35cd-baa49dc65331"},"isVisible":true,"name":{"value":"Query A"},"query":{"logs":{"aggregations":[],"filters":[],"groupBy":[],"groupBys":[]}},"resolution":{"bucketsPresented":0,"interval":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","seriesCountLimit":{"value":50},"seriesNameTemplate":{"value":"Trace of {{ application }}"},"unit":"UNIT_UNSPECIFIED","yAxisMax":1000,"yAxisMin":-1000}],"stackedLine":"STACKED_LINE_UNSPECIFIED","tooltip":{"showLabels":true,"type":"TOOLTIP_TYPE_UNSPECIFIED"}}},"description":{"value":"Average delay of application"},"id":{"value":"string"},"title":{"value":"Gauge"},"updatedAt":"2019-08-24T14:15:22Z"}]}]}]},"name":"Example Name","off":{},"slugName":"system-health-monitoring","variables":[{"definition":{"constant":{"value":"string"}},"description":"string","displayName":"string","displayType":"VARIABLE_DISPLAY_TYPE_UNSPECIFIED","name":"string"}],"variablesV2":[{"description":"string","displayFullRow":true,"displayName":"string","displayType":"VARIABLE_DISPLAY_TYPE_V2_UNSPECIFIED","name":"string","source":{"static":{"allOption":{"includeAll":true,"label":"string"},"values":[{"isDefault":true,"label":"string","value":"string"}],"valuesOrderDirection":"ORDER_DIRECTION_UNSPECIFIED"}},"value":{"multiString":{"all":{}}}}]},"isLocked":true,"requestId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards"


            payload = {
                "dashboard": {
                    "absoluteTimeFrame": {
                        "from": "2019-08-24T14:15:22Z",
                        "to": "2019-08-24T14:15:22Z"
                    },
                    "actions": [
                        {
                            "dataSource": "ACTION_DATA_SOURCE_TYPE_NONE_UNSPECIFIED",
                            "definition": {"customAction": {"url": "string"}},
                            "id": "string",
                            "name": "string",
                            "shouldOpenInNewWindow": True,
                            "widgetId": "string"
                        }
                    ],
                    "annotations": [
                        {
                            "description": "string",
                            "enabled": True,
                            "id": "string",
                            "name": "string",
                            "scope": {"allWidgets": {}},
                            "source": {"metrics": {
                                    "labels": ["string"],
                                    "messageTemplate": "string",
                                    "orientation": "ANNOTATION_ORIENTATION_VERTICAL_UNSPECIFIED",
                                    "promqlQuery": {"value": "string"},
                                    "strategy": {"startTimeMetric": {}}
                                }}
                        }
                    ],
                    "description": "Sample description",
                    "filters": [
                        {
                            "collapsed": True,
                            "displayName": "string",
                            "enabled": True,
                            "source": {"logs": {
                                    "field": "string",
                                    "observationField": {
                                        "keypath": ["string"],
                                        "scope": "DATASET_SCOPE_UNSPECIFIED"
                                    },
                                    "operator": {"equals": {"selection": {"all": {}}}}
                                }}
                        }
                    ],
                    "folderId": {"value": "string"},
                    "id": "GZLHSeqelCbD3I7HbIDtL",
                    "layout": {"sections": [
                            {
                                "id": {"value": "string"},
                                "options": {"internal": {}},
                                "rows": [
                                    {
                                        "appearance": {"height": {"value": 16}},
                                        "id": {"value": "string"},
                                        "widgets": [
                                            {
                                                "appearance": {"width": 0},
                                                "createdAt": "2019-08-24T14:15:22Z",
                                                "definition": {"lineChart": {
                                                        "connectNulls": False,
                                                        "legend": {
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "isVisible": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "queryDefinitions": [
                                                            {
                                                                "colorScheme": {"value": "classic"},
                                                                "customUnit": {"value": "rpm"},
                                                                "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                                "decimal": 4,
                                                                "decimalPrecision": False,
                                                                "hashColors": False,
                                                                "id": {"value": "73c65643-91d5-dba2-35cd-baa49dc65331"},
                                                                "isVisible": True,
                                                                "name": {"value": "Query A"},
                                                                "query": {"logs": {
                                                                        "aggregations": [],
                                                                        "filters": [],
                                                                        "groupBy": [],
                                                                        "groupBys": []
                                                                    }},
                                                                "resolution": {
                                                                    "bucketsPresented": 0,
                                                                    "interval": "string"
                                                                },
                                                                "scaleType": "SCALE_TYPE_UNSPECIFIED",
                                                                "seriesCountLimit": {"value": 50},
                                                                "seriesNameTemplate": {"value": "Trace of {{ application }}"},
                                                                "unit": "UNIT_UNSPECIFIED",
                                                                "yAxisMax": 1000,
                                                                "yAxisMin": -1000
                                                            }
                                                        ],
                                                        "stackedLine": "STACKED_LINE_UNSPECIFIED",
                                                        "tooltip": {
                                                            "showLabels": True,
                                                            "type": "TOOLTIP_TYPE_UNSPECIFIED"
                                                        }
                                                    }},
                                                "description": {"value": "Average delay of application"},
                                                "id": {"value": "string"},
                                                "title": {"value": "Gauge"},
                                                "updatedAt": "2019-08-24T14:15:22Z"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]},
                    "name": "Example Name",
                    "off": {},
                    "slugName": "system-health-monitoring",
                    "variables": [
                        {
                            "definition": {"constant": {"value": "string"}},
                            "description": "string",
                            "displayName": "string",
                            "displayType": "VARIABLE_DISPLAY_TYPE_UNSPECIFIED",
                            "name": "string"
                        }
                    ],
                    "variablesV2": [
                        {
                            "description": "string",
                            "displayFullRow": True,
                            "displayName": "string",
                            "displayType": "VARIABLE_DISPLAY_TYPE_V2_UNSPECIFIED",
                            "name": "string",
                            "source": {"static": {
                                    "allOption": {
                                        "includeAll": True,
                                        "label": "string"
                                    },
                                    "values": [
                                        {
                                            "isDefault": True,
                                            "label": "string",
                                            "value": "string"
                                        }
                                    ],
                                    "valuesOrderDirection": "ORDER_DIRECTION_UNSPECIFIED"
                                }},
                            "value": {"multiString": {"all": {}}}
                        }
                    ]
                },
                "isLocked": True,
                "requestId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"dashboard":{"absoluteTimeFrame":{"from":"2019-08-24T14:15:22Z","to":"2019-08-24T14:15:22Z"},"actions":[{"dataSource":"ACTION_DATA_SOURCE_TYPE_NONE_UNSPECIFIED","definition":{"customAction":{"url":"string"}},"id":"string","name":"string","shouldOpenInNewWindow":true,"widgetId":"string"}],"annotations":[{"description":"string","enabled":true,"id":"string","name":"string","scope":{"allWidgets":{}},"source":{"metrics":{"labels":["string"],"messageTemplate":"string","orientation":"ANNOTATION_ORIENTATION_VERTICAL_UNSPECIFIED","promqlQuery":{"value":"string"},"strategy":{"startTimeMetric":{}}}}}],"description":"Sample description","filters":[{"collapsed":true,"displayName":"string","enabled":true,"source":{"logs":{"field":"string","observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"operator":{"equals":{"selection":{"all":{}}}}}}}],"folderId":{"value":"string"},"id":"GZLHSeqelCbD3I7HbIDtL","layout":{"sections":[{"id":{"value":"string"},"options":{"internal":{}},"rows":[{"appearance":{"height":{"value":16}},"id":{"value":"string"},"widgets":[{"appearance":{"width":0},"createdAt":"2019-08-24T14:15:22Z","definition":{"lineChart":{"connectNulls":false,"legend":{"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"isVisible":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"queryDefinitions":[{"colorScheme":{"value":"classic"},"customUnit":{"value":"rpm"},"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","decimal":4,"decimalPrecision":false,"hashColors":false,"id":{"value":"73c65643-91d5-dba2-35cd-baa49dc65331"},"isVisible":true,"name":{"value":"Query A"},"query":{"logs":{"aggregations":[],"filters":[],"groupBy":[],"groupBys":[]}},"resolution":{"bucketsPresented":0,"interval":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","seriesCountLimit":{"value":50},"seriesNameTemplate":{"value":"Trace of {{ application }}"},"unit":"UNIT_UNSPECIFIED","yAxisMax":1000,"yAxisMin":-1000}],"stackedLine":"STACKED_LINE_UNSPECIFIED","tooltip":{"showLabels":true,"type":"TOOLTIP_TYPE_UNSPECIFIED"}}},"description":{"value":"Average delay of application"},"id":{"value":"string"},"title":{"value":"Gauge"},"updatedAt":"2019-08-24T14:15:22Z"}]}]}]},"name":"Example Name","off":{},"slugName":"system-health-monitoring","variables":[{"definition":{"constant":{"value":"string"}},"description":"string","displayName":"string","displayType":"VARIABLE_DISPLAY_TYPE_UNSPECIFIED","name":"string"}],"variablesV2":[{"description":"string","displayFullRow":true,"displayName":"string","displayType":"VARIABLE_DISPLAY_TYPE_V2_UNSPECIFIED","name":"string","source":{"static":{"allOption":{"includeAll":true,"label":"string"},"values":[{"isDefault":true,"label":"string","value":"string"}],"valuesOrderDirection":"ORDER_DIRECTION_UNSPECIFIED"}},"value":{"multiString":{"all":{}}}}]},"isLocked":true,"requestId":"string"}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: DashboardsService_CreateDashboard
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: This is a request used to create a new custom dashboard
              properties:
                dashboard:
                  $ref: '#/components/schemas/Dashboard'
                isLocked:
                  type: boolean
                requestId:
                  type: string
              required:
                - requestId
                - dashboard
              title: Create dashboard request data structure
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDashboardResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Create a new dashboard
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"dashboard":{"absoluteTimeFrame":{"from":"2019-08-24T14:15:22Z","to":"2019-08-24T14:15:22Z"},"actions":[{"dataSource":"ACTION_DATA_SOURCE_TYPE_NONE_UNSPECIFIED","definition":{"customAction":{"url":"string"}},"id":"string","name":"string","shouldOpenInNewWindow":true,"widgetId":"string"}],"annotations":[{"description":"string","enabled":true,"id":"string","name":"string","scope":{"allWidgets":{}},"source":{"metrics":{"labels":["string"],"messageTemplate":"string","orientation":"ANNOTATION_ORIENTATION_VERTICAL_UNSPECIFIED","promqlQuery":{"value":"string"},"strategy":{"startTimeMetric":{}}}}}],"description":"Sample description","filters":[{"collapsed":true,"displayName":"string","enabled":true,"source":{"logs":{"field":"string","observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"operator":{"equals":{"selection":{"all":{}}}}}}}],"folderId":{"value":"string"},"id":"GZLHSeqelCbD3I7HbIDtL","layout":{"sections":[{"id":{"value":"string"},"options":{"internal":{}},"rows":[{"appearance":{"height":{"value":16}},"id":{"value":"string"},"widgets":[{"appearance":{"width":0},"createdAt":"2019-08-24T14:15:22Z","definition":{"lineChart":{"connectNulls":false,"legend":{"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"isVisible":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"queryDefinitions":[{"colorScheme":{"value":"classic"},"customUnit":{"value":"rpm"},"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","decimal":4,"decimalPrecision":false,"hashColors":false,"id":{"value":"73c65643-91d5-dba2-35cd-baa49dc65331"},"isVisible":true,"name":{"value":"Query A"},"query":{"logs":{"aggregations":[],"filters":[],"groupBy":[],"groupBys":[]}},"resolution":{"bucketsPresented":0,"interval":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","seriesCountLimit":{"value":50},"seriesNameTemplate":{"value":"Trace of {{ application }}"},"unit":"UNIT_UNSPECIFIED","yAxisMax":1000,"yAxisMin":-1000}],"stackedLine":"STACKED_LINE_UNSPECIFIED","tooltip":{"showLabels":true,"type":"TOOLTIP_TYPE_UNSPECIFIED"}}},"description":{"value":"Average delay of application"},"id":{"value":"string"},"title":{"value":"Gauge"},"updatedAt":"2019-08-24T14:15:22Z"}]}]}]},"name":"Example Name","off":{},"slugName":"system-health-monitoring","variables":[{"definition":{"constant":{"value":"string"}},"description":"string","displayName":"string","displayType":"VARIABLE_DISPLAY_TYPE_UNSPECIFIED","name":"string"}],"variablesV2":[{"description":"string","displayFullRow":true,"displayName":"string","displayType":"VARIABLE_DISPLAY_TYPE_V2_UNSPECIFIED","name":"string","source":{"static":{"allOption":{"includeAll":true,"label":"string"},"values":[{"isDefault":true,"label":"string","value":"string"}],"valuesOrderDirection":"ORDER_DIRECTION_UNSPECIFIED"}},"value":{"multiString":{"all":{}}}}]},"isLocked":true,"requestId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards"


            payload = {
                "dashboard": {
                    "absoluteTimeFrame": {
                        "from": "2019-08-24T14:15:22Z",
                        "to": "2019-08-24T14:15:22Z"
                    },
                    "actions": [
                        {
                            "dataSource": "ACTION_DATA_SOURCE_TYPE_NONE_UNSPECIFIED",
                            "definition": {"customAction": {"url": "string"}},
                            "id": "string",
                            "name": "string",
                            "shouldOpenInNewWindow": True,
                            "widgetId": "string"
                        }
                    ],
                    "annotations": [
                        {
                            "description": "string",
                            "enabled": True,
                            "id": "string",
                            "name": "string",
                            "scope": {"allWidgets": {}},
                            "source": {"metrics": {
                                    "labels": ["string"],
                                    "messageTemplate": "string",
                                    "orientation": "ANNOTATION_ORIENTATION_VERTICAL_UNSPECIFIED",
                                    "promqlQuery": {"value": "string"},
                                    "strategy": {"startTimeMetric": {}}
                                }}
                        }
                    ],
                    "description": "Sample description",
                    "filters": [
                        {
                            "collapsed": True,
                            "displayName": "string",
                            "enabled": True,
                            "source": {"logs": {
                                    "field": "string",
                                    "observationField": {
                                        "keypath": ["string"],
                                        "scope": "DATASET_SCOPE_UNSPECIFIED"
                                    },
                                    "operator": {"equals": {"selection": {"all": {}}}}
                                }}
                        }
                    ],
                    "folderId": {"value": "string"},
                    "id": "GZLHSeqelCbD3I7HbIDtL",
                    "layout": {"sections": [
                            {
                                "id": {"value": "string"},
                                "options": {"internal": {}},
                                "rows": [
                                    {
                                        "appearance": {"height": {"value": 16}},
                                        "id": {"value": "string"},
                                        "widgets": [
                                            {
                                                "appearance": {"width": 0},
                                                "createdAt": "2019-08-24T14:15:22Z",
                                                "definition": {"lineChart": {
                                                        "connectNulls": False,
                                                        "legend": {
                                                            "columns": ["LEGEND_COLUMN_UNSPECIFIED"],
                                                            "groupByQuery": True,
                                                            "isVisible": True,
                                                            "placement": "LEGEND_PLACEMENT_UNSPECIFIED"
                                                        },
                                                        "queryDefinitions": [
                                                            {
                                                                "colorScheme": {"value": "classic"},
                                                                "customUnit": {"value": "rpm"},
                                                                "dataModeType": "DATA_MODE_TYPE_HIGH_UNSPECIFIED",
                                                                "decimal": 4,
                                                                "decimalPrecision": False,
                                                                "hashColors": False,
                                                                "id": {"value": "73c65643-91d5-dba2-35cd-baa49dc65331"},
                                                                "isVisible": True,
                                                                "name": {"value": "Query A"},
                                                                "query": {"logs": {
                                                                        "aggregations": [],
                                                                        "filters": [],
                                                                        "groupBy": [],
                                                                        "groupBys": []
                                                                    }},
                                                                "resolution": {
                                                                    "bucketsPresented": 0,
                                                                    "interval": "string"
                                                                },
                                                                "scaleType": "SCALE_TYPE_UNSPECIFIED",
                                                                "seriesCountLimit": {"value": 50},
                                                                "seriesNameTemplate": {"value": "Trace of {{ application }}"},
                                                                "unit": "UNIT_UNSPECIFIED",
                                                                "yAxisMax": 1000,
                                                                "yAxisMin": -1000
                                                            }
                                                        ],
                                                        "stackedLine": "STACKED_LINE_UNSPECIFIED",
                                                        "tooltip": {
                                                            "showLabels": True,
                                                            "type": "TOOLTIP_TYPE_UNSPECIFIED"
                                                        }
                                                    }},
                                                "description": {"value": "Average delay of application"},
                                                "id": {"value": "string"},
                                                "title": {"value": "Gauge"},
                                                "updatedAt": "2019-08-24T14:15:22Z"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]},
                    "name": "Example Name",
                    "off": {},
                    "slugName": "system-health-monitoring",
                    "variables": [
                        {
                            "definition": {"constant": {"value": "string"}},
                            "description": "string",
                            "displayName": "string",
                            "displayType": "VARIABLE_DISPLAY_TYPE_UNSPECIFIED",
                            "name": "string"
                        }
                    ],
                    "variablesV2": [
                        {
                            "description": "string",
                            "displayFullRow": True,
                            "displayName": "string",
                            "displayType": "VARIABLE_DISPLAY_TYPE_V2_UNSPECIFIED",
                            "name": "string",
                            "source": {"static": {
                                    "allOption": {
                                        "includeAll": True,
                                        "label": "string"
                                    },
                                    "values": [
                                        {
                                            "isDefault": True,
                                            "label": "string",
                                            "value": "string"
                                        }
                                    ],
                                    "valuesOrderDirection": "ORDER_DIRECTION_UNSPECIFIED"
                                }},
                            "value": {"multiString": {"all": {}}}
                        }
                    ]
                },
                "isLocked": True,
                "requestId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"dashboard":{"absoluteTimeFrame":{"from":"2019-08-24T14:15:22Z","to":"2019-08-24T14:15:22Z"},"actions":[{"dataSource":"ACTION_DATA_SOURCE_TYPE_NONE_UNSPECIFIED","definition":{"customAction":{"url":"string"}},"id":"string","name":"string","shouldOpenInNewWindow":true,"widgetId":"string"}],"annotations":[{"description":"string","enabled":true,"id":"string","name":"string","scope":{"allWidgets":{}},"source":{"metrics":{"labels":["string"],"messageTemplate":"string","orientation":"ANNOTATION_ORIENTATION_VERTICAL_UNSPECIFIED","promqlQuery":{"value":"string"},"strategy":{"startTimeMetric":{}}}}}],"description":"Sample description","filters":[{"collapsed":true,"displayName":"string","enabled":true,"source":{"logs":{"field":"string","observationField":{"keypath":["string"],"scope":"DATASET_SCOPE_UNSPECIFIED"},"operator":{"equals":{"selection":{"all":{}}}}}}}],"folderId":{"value":"string"},"id":"GZLHSeqelCbD3I7HbIDtL","layout":{"sections":[{"id":{"value":"string"},"options":{"internal":{}},"rows":[{"appearance":{"height":{"value":16}},"id":{"value":"string"},"widgets":[{"appearance":{"width":0},"createdAt":"2019-08-24T14:15:22Z","definition":{"lineChart":{"connectNulls":false,"legend":{"columns":["LEGEND_COLUMN_UNSPECIFIED"],"groupByQuery":true,"isVisible":true,"placement":"LEGEND_PLACEMENT_UNSPECIFIED"},"queryDefinitions":[{"colorScheme":{"value":"classic"},"customUnit":{"value":"rpm"},"dataModeType":"DATA_MODE_TYPE_HIGH_UNSPECIFIED","decimal":4,"decimalPrecision":false,"hashColors":false,"id":{"value":"73c65643-91d5-dba2-35cd-baa49dc65331"},"isVisible":true,"name":{"value":"Query A"},"query":{"logs":{"aggregations":[],"filters":[],"groupBy":[],"groupBys":[]}},"resolution":{"bucketsPresented":0,"interval":"string"},"scaleType":"SCALE_TYPE_UNSPECIFIED","seriesCountLimit":{"value":50},"seriesNameTemplate":{"value":"Trace of {{ application }}"},"unit":"UNIT_UNSPECIFIED","yAxisMax":1000,"yAxisMin":-1000}],"stackedLine":"STACKED_LINE_UNSPECIFIED","tooltip":{"showLabels":true,"type":"TOOLTIP_TYPE_UNSPECIFIED"}}},"description":{"value":"Average delay of application"},"id":{"value":"string"},"title":{"value":"Gauge"},"updatedAt":"2019-08-24T14:15:22Z"}]}]}]},"name":"Example Name","off":{},"slugName":"system-health-monitoring","variables":[{"definition":{"constant":{"value":"string"}},"description":"string","displayName":"string","displayType":"VARIABLE_DISPLAY_TYPE_UNSPECIFIED","name":"string"}],"variablesV2":[{"description":"string","displayFullRow":true,"displayName":"string","displayType":"VARIABLE_DISPLAY_TYPE_V2_UNSPECIFIED","name":"string","source":{"static":{"allOption":{"includeAll":true,"label":"string"},"values":[{"isDefault":true,"label":"string","value":"string"}],"valuesOrderDirection":"ORDER_DIRECTION_UNSPECIFIED"}},"value":{"multiString":{"all":{}}}}]},"isLocked":true,"requestId":"string"}'
      description: No description available
  /v1/dashboards/dashboards/{dashboard_id}:
    get:
      externalDocs:
        url: ''
      operationId: DashboardsService_GetDashboard
      parameters:
        - in: path
          name: dashboard_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDashboardResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get a dashboard
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: DashboardsService_DeleteDashboard
      parameters:
        - in: path
          name: dashboard_id
          required: true
          schema:
            type: string
        - in: query
          name: request_id
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDashboardResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Delete a dashboard
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D?request_id=SOME_STRING_VALUE';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D"


            querystring = {"request_id":"SOME_STRING_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D?request_id=SOME_STRING_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/dashboards/dashboards/{dashboard_id}/default:
    put:
      externalDocs:
        url: ''
      operationId: DashboardsService_ReplaceDefaultDashboard
      parameters:
        - in: path
          name: dashboard_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: This is a request to replace a default dashboard
              properties:
                requestId:
                  type: string
              required:
                - requestId
                - dashboardId
              title: Replace default dashboard request data structure
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceDefaultDashboardResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Replace the default dashboard
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D/default';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D/default"


            payload = {"requestId": "string"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D/default \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string"}'
      description: No description available
  /v1/dashboards/dashboards/{dashboard_id}/folder:
    post:
      externalDocs:
        url: ''
      operationId: DashboardsService_AssignDashboardFolder
      parameters:
        - in: path
          name: dashboard_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: This is a request for assigning a folder to a dashboard
              properties:
                folderId:
                  type: string
                requestId:
                  type: string
              required:
                - requestId
                - dashboardId
              title: Assign dashboard to folder request data structure
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignDashboardFolderResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Assign a dashboard to a folder
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D/folder';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"folderId":"string","requestId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D/folder"


            payload = {
                "folderId": "string",
                "requestId": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D/folder \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"folderId":"string","requestId":"string"}'
      description: No description available
  /v1/dashboards/dashboards/{dashboard_id}:pin:
    patch:
      externalDocs:
        url: ''
      operationId: DashboardsService_PinDashboard
      parameters:
        - in: path
          name: dashboard_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: This is a request used to mark certain dashboard as pinned
              properties:
                requestId:
                  type: string
              required:
                - requestId
                - dashboardId
              title: Pin dashboard request data structure
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinDashboardResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Add dashboard to favorites
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D:pin';


            let options = {
              method: 'PATCH',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D:pin"


            payload = {"requestId": "string"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PATCH", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PATCH \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D:pin \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string"}'
      description: No description available
  /v1/dashboards/dashboards/{dashboard_id}:unpin:
    patch:
      externalDocs:
        url: ''
      operationId: DashboardsService_UnpinDashboard
      parameters:
        - in: path
          name: dashboard_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: This is a request used to unpin a certain dashboard
              properties:
                requestId:
                  type: string
              required:
                - requestId
                - dashboardId
              title: Unpin dashboard request data structure
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnpinDashboardResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Remove dashboard from favorites
      tags:
        - Dashboard service
      x-coralogixPermissions:
        - team-dashboards:Read
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D:unpin';


            let options = {
              method: 'PATCH',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requestId":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D:unpin"


            payload = {"requestId": "string"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PATCH", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PATCH \
              --url https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7Bdashboard_id%7D:unpin \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requestId":"string"}'
      description: No description available
  /v1/rule-group-sets:
    get:
      externalDocs:
        url: ''
      operationId: RuleGroupSets_List
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleGroupSetListing'
          description: ''
      summary: List
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: RuleGroupSets_Create
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                groups:
                  items:
                    $ref: '#/components/schemas/InRuleGroup'
                  type: array
                name:
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRuleGroupSetResult'
          description: ''
      summary: Create
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"groups":[{"id":"string","interval":0,"limit":"string","name":"string","rules":[{"expr":"string","labels":{"property1":"string","property2":"string"},"record":"string"}],"version":0}],"name":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets"


            payload = {
                "groups": [
                    {
                        "id": "string",
                        "interval": 0,
                        "limit": "string",
                        "name": "string",
                        "rules": [
                            {
                                "expr": "string",
                                "labels": {
                                    "property1": "string",
                                    "property2": "string"
                                },
                                "record": "string"
                            }
                        ],
                        "version": 0
                    }
                ],
                "name": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"groups":[{"id":"string","interval":0,"limit":"string","name":"string","rules":[{"expr":"string","labels":{"property1":"string","property2":"string"},"record":"string"}],"version":0}],"name":"string"}'
      description: No description available
  /v1/rule-group-sets/{id}:
    get:
      externalDocs:
        url: ''
      operationId: RuleGroupSets_Fetch
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutRuleGroupSet'
          description: ''
      summary: Fetch
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: RuleGroupSets_Update
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                groups:
                  items:
                    $ref: '#/components/schemas/InRuleGroup'
                  type: array
                name:
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: ''
      summary: Update
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"groups":[{"id":"string","interval":0,"limit":"string","name":"string","rules":[{"expr":"string","labels":{"property1":"string","property2":"string"},"record":"string"}],"version":0}],"name":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D"


            payload = {
                "groups": [
                    {
                        "id": "string",
                        "interval": 0,
                        "limit": "string",
                        "name": "string",
                        "rules": [
                            {
                                "expr": "string",
                                "labels": {
                                    "property1": "string",
                                    "property2": "string"
                                },
                                "record": "string"
                            }
                        ],
                        "version": 0
                    }
                ],
                "name": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"groups":[{"id":"string","interval":0,"limit":"string","name":"string","rules":[{"expr":"string","labels":{"property1":"string","property2":"string"},"record":"string"}],"version":0}],"name":"string"}'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: RuleGroupSets_Delete
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: ''
      summary: Delete
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/slo/slos:
    get:
      externalDocs:
        url: ''
      operationId: SlosService_ListSlos
      parameters:
        - in: query
          name: filters
          required: false
          schema:
            description: A collection of filters for SLOs
            externalDocs:
              url: ''
            properties:
              filters:
                items:
                  description: A filter for SLOs, consisting of a field and a predicate
                  externalDocs:
                    url: ''
                  properties:
                    field:
                      oneOf:
                        - additionalProperties: false
                          description: Field used for filtering SLOs
                          externalDocs:
                            url: ''
                          properties:
                            constFilter:
                              enum:
                                - SLO_CONST_FILTER_FIELD_UNSPECIFIED
                                - SLO_CONST_FILTER_FIELD_USER_NAME
                                - SLO_CONST_FILTER_FIELD_SLO_NAME
                              type: string
                          title: SloFilterField
                          type: object
                        - additionalProperties: false
                          description: Field used for filtering SLOs
                          externalDocs:
                            url: ''
                          properties:
                            labelName:
                              example: environment
                              type: string
                          title: SloFilterField
                          type: object
                    predicate:
                      additionalProperties: false
                      description: Predicate used for filtering SLOs
                      externalDocs:
                        url: ''
                      properties:
                        is:
                          description: >-
                            Predicate for SLO filters that checks if a field is
                            equal to one of multiple values
                          externalDocs:
                            url: ''
                          properties:
                            is:
                              items:
                                type: string
                              type: array
                          title: IsFilterPredicate
                          type: object
                      title: SloFilterPredicate
                      type: object
                  required:
                    - field
                    - predicate
                  title: SloFilter
                  type: object
                type: array
            title: SloFilters
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSlosResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: List Slos
      tags:
        - Slos Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/slo/slos?filters=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/slo/slos"


            querystring = {"filters":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/slo/slos?filters=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: SlosService_ReplaceSlo
      parameters:
        - in: query
          name: silence_data_validations
          required: false
          schema:
            deprecated: true
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - additionalProperties: false
                  description: Definition of an SLO
                  properties:
                    createTime:
                      format: date-time
                      type: string
                    creator:
                      example: test@domain.com
                      type: string
                    description:
                      example: A brief description of my SLO
                      type: string
                    grouping:
                      $ref: '#/components/schemas/v1.Grouping'
                    id:
                      example: b11919d5-ef85-4bb1-8655-02640dbe94d9
                      type: string
                    labels:
                      additionalProperties:
                        type: string
                      type: object
                    name:
                      example: Example Slo Name
                      type: string
                    requestBasedMetricSli:
                      $ref: '#/components/schemas/RequestBasedMetricSli'
                    revision:
                      $ref: '#/components/schemas/v1.Revision'
                    sloTimeFrame:
                      $ref: '#/components/schemas/SloTimeFrame'
                    targetThresholdPercentage:
                      example: 99.999
                      format: float
                      type: number
                    type:
                      example: request
                      type: string
                    updateTime:
                      format: date-time
                      type: string
                  required:
                    - name
                    - targetThresholdPercentage
                    - window
                    - sli
                  title: Slo
                  type: object
                - additionalProperties: false
                  description: Definition of an SLO
                  properties:
                    createTime:
                      format: date-time
                      type: string
                    creator:
                      example: test@domain.com
                      type: string
                    description:
                      example: A brief description of my SLO
                      type: string
                    grouping:
                      $ref: '#/components/schemas/v1.Grouping'
                    id:
                      example: b11919d5-ef85-4bb1-8655-02640dbe94d9
                      type: string
                    labels:
                      additionalProperties:
                        type: string
                      type: object
                    name:
                      example: Example Slo Name
                      type: string
                    revision:
                      $ref: '#/components/schemas/v1.Revision'
                    sloTimeFrame:
                      $ref: '#/components/schemas/SloTimeFrame'
                    targetThresholdPercentage:
                      example: 99.999
                      format: float
                      type: number
                    type:
                      example: request
                      type: string
                    updateTime:
                      format: date-time
                      type: string
                    windowBasedMetricSli:
                      $ref: '#/components/schemas/WindowBasedMetricSli'
                  required:
                    - name
                    - targetThresholdPercentage
                    - window
                    - sli
                  title: Slo
                  type: object
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceSloResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Replace Slo
      tags:
        - Slos Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/slo/slos?silence_data_validations=SOME_BOOLEAN_VALUE';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"createTime":"2019-08-24T14:15:22Z","creator":"test@domain.com","description":"A brief description of my SLO","grouping":{"labels":["string"]},"id":"b11919d5-ef85-4bb1-8655-02640dbe94d9","labels":{"property1":"string","property2":"string"},"name":"Example Slo Name","requestBasedMetricSli":{"goodEvents":{"query":"sum(rate(http_requests_total{status=\"200\"}[5m]))"},"totalEvents":{"query":"sum(rate(http_requests_total{status=\"200\"}[5m]))"}},"revision":{"revision":1,"updateTime":"2019-08-24T14:15:22Z"},"sloTimeFrame":"SLO_TIME_FRAME_UNSPECIFIED","targetThresholdPercentage":99.999,"type":"request","updateTime":"2019-08-24T14:15:22Z"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/slo/slos"


            querystring = {"silence_data_validations":"SOME_BOOLEAN_VALUE"}


            payload = {
                "createTime": "2019-08-24T14:15:22Z",
                "creator": "test@domain.com",
                "description": "A brief description of my SLO",
                "grouping": {"labels": ["string"]},
                "id": "b11919d5-ef85-4bb1-8655-02640dbe94d9",
                "labels": {
                    "property1": "string",
                    "property2": "string"
                },
                "name": "Example Slo Name",
                "requestBasedMetricSli": {
                    "goodEvents": {"query": "sum(rate(http_requests_total{status=\"200\"}[5m]))"},
                    "totalEvents": {"query": "sum(rate(http_requests_total{status=\"200\"}[5m]))"}
                },
                "revision": {
                    "revision": 1,
                    "updateTime": "2019-08-24T14:15:22Z"
                },
                "sloTimeFrame": "SLO_TIME_FRAME_UNSPECIFIED",
                "targetThresholdPercentage": 99.999,
                "type": "request",
                "updateTime": "2019-08-24T14:15:22Z"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers, params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/slo/slos?silence_data_validations=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"createTime":"2019-08-24T14:15:22Z","creator":"test@domain.com","description":"A brief description of my SLO","grouping":{"labels":["string"]},"id":"b11919d5-ef85-4bb1-8655-02640dbe94d9","labels":{"property1":"string","property2":"string"},"name":"Example Slo Name","requestBasedMetricSli":{"goodEvents":{"query":"sum(rate(http_requests_total{status=\"200\"}[5m]))"},"totalEvents":{"query":"sum(rate(http_requests_total{status=\"200\"}[5m]))"}},"revision":{"revision":1,"updateTime":"2019-08-24T14:15:22Z"},"sloTimeFrame":"SLO_TIME_FRAME_UNSPECIFIED","targetThresholdPercentage":99.999,"type":"request","updateTime":"2019-08-24T14:15:22Z"}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: SlosService_CreateSlo
      parameters:
        - in: query
          name: silence_data_validations
          required: false
          schema:
            deprecated: true
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - additionalProperties: false
                  description: Definition of an SLO
                  properties:
                    createTime:
                      format: date-time
                      type: string
                    creator:
                      example: test@domain.com
                      type: string
                    description:
                      example: A brief description of my SLO
                      type: string
                    grouping:
                      $ref: '#/components/schemas/v1.Grouping'
                    id:
                      example: b11919d5-ef85-4bb1-8655-02640dbe94d9
                      type: string
                    labels:
                      additionalProperties:
                        type: string
                      type: object
                    name:
                      example: Example Slo Name
                      type: string
                    requestBasedMetricSli:
                      $ref: '#/components/schemas/RequestBasedMetricSli'
                    revision:
                      $ref: '#/components/schemas/v1.Revision'
                    sloTimeFrame:
                      $ref: '#/components/schemas/SloTimeFrame'
                    targetThresholdPercentage:
                      example: 99.999
                      format: float
                      type: number
                    type:
                      example: request
                      type: string
                    updateTime:
                      format: date-time
                      type: string
                  required:
                    - name
                    - targetThresholdPercentage
                    - window
                    - sli
                  title: Slo
                  type: object
                - additionalProperties: false
                  description: Definition of an SLO
                  properties:
                    createTime:
                      format: date-time
                      type: string
                    creator:
                      example: test@domain.com
                      type: string
                    description:
                      example: A brief description of my SLO
                      type: string
                    grouping:
                      $ref: '#/components/schemas/v1.Grouping'
                    id:
                      example: b11919d5-ef85-4bb1-8655-02640dbe94d9
                      type: string
                    labels:
                      additionalProperties:
                        type: string
                      type: object
                    name:
                      example: Example Slo Name
                      type: string
                    revision:
                      $ref: '#/components/schemas/v1.Revision'
                    sloTimeFrame:
                      $ref: '#/components/schemas/SloTimeFrame'
                    targetThresholdPercentage:
                      example: 99.999
                      format: float
                      type: number
                    type:
                      example: request
                      type: string
                    updateTime:
                      format: date-time
                      type: string
                    windowBasedMetricSli:
                      $ref: '#/components/schemas/WindowBasedMetricSli'
                  required:
                    - name
                    - targetThresholdPercentage
                    - window
                    - sli
                  title: Slo
                  type: object
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSloResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Create Slo
      tags:
        - Slos Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/slo/slos?silence_data_validations=SOME_BOOLEAN_VALUE';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"createTime":"2019-08-24T14:15:22Z","creator":"test@domain.com","description":"A brief description of my SLO","grouping":{"labels":["string"]},"id":"b11919d5-ef85-4bb1-8655-02640dbe94d9","labels":{"property1":"string","property2":"string"},"name":"Example Slo Name","requestBasedMetricSli":{"goodEvents":{"query":"sum(rate(http_requests_total{status=\"200\"}[5m]))"},"totalEvents":{"query":"sum(rate(http_requests_total{status=\"200\"}[5m]))"}},"revision":{"revision":1,"updateTime":"2019-08-24T14:15:22Z"},"sloTimeFrame":"SLO_TIME_FRAME_UNSPECIFIED","targetThresholdPercentage":99.999,"type":"request","updateTime":"2019-08-24T14:15:22Z"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/slo/slos"


            querystring = {"silence_data_validations":"SOME_BOOLEAN_VALUE"}


            payload = {
                "createTime": "2019-08-24T14:15:22Z",
                "creator": "test@domain.com",
                "description": "A brief description of my SLO",
                "grouping": {"labels": ["string"]},
                "id": "b11919d5-ef85-4bb1-8655-02640dbe94d9",
                "labels": {
                    "property1": "string",
                    "property2": "string"
                },
                "name": "Example Slo Name",
                "requestBasedMetricSli": {
                    "goodEvents": {"query": "sum(rate(http_requests_total{status=\"200\"}[5m]))"},
                    "totalEvents": {"query": "sum(rate(http_requests_total{status=\"200\"}[5m]))"}
                },
                "revision": {
                    "revision": 1,
                    "updateTime": "2019-08-24T14:15:22Z"
                },
                "sloTimeFrame": "SLO_TIME_FRAME_UNSPECIFIED",
                "targetThresholdPercentage": 99.999,
                "type": "request",
                "updateTime": "2019-08-24T14:15:22Z"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers, params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/slo/slos?silence_data_validations=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"createTime":"2019-08-24T14:15:22Z","creator":"test@domain.com","description":"A brief description of my SLO","grouping":{"labels":["string"]},"id":"b11919d5-ef85-4bb1-8655-02640dbe94d9","labels":{"property1":"string","property2":"string"},"name":"Example Slo Name","requestBasedMetricSli":{"goodEvents":{"query":"sum(rate(http_requests_total{status=\"200\"}[5m]))"},"totalEvents":{"query":"sum(rate(http_requests_total{status=\"200\"}[5m]))"}},"revision":{"revision":1,"updateTime":"2019-08-24T14:15:22Z"},"sloTimeFrame":"SLO_TIME_FRAME_UNSPECIFIED","targetThresholdPercentage":99.999,"type":"request","updateTime":"2019-08-24T14:15:22Z"}'
      description: No description available
  /v1/slo/slos/validate:
    post:
      externalDocs:
        url: ''
      operationId: SlosService_ValidateReplaceSloAlerts
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - additionalProperties: false
                  description: Definition of an SLO
                  properties:
                    createTime:
                      format: date-time
                      type: string
                    creator:
                      example: test@domain.com
                      type: string
                    description:
                      example: A brief description of my SLO
                      type: string
                    grouping:
                      $ref: '#/components/schemas/v1.Grouping'
                    id:
                      example: b11919d5-ef85-4bb1-8655-02640dbe94d9
                      type: string
                    labels:
                      additionalProperties:
                        type: string
                      type: object
                    name:
                      example: Example Slo Name
                      type: string
                    requestBasedMetricSli:
                      $ref: '#/components/schemas/RequestBasedMetricSli'
                    revision:
                      $ref: '#/components/schemas/v1.Revision'
                    sloTimeFrame:
                      $ref: '#/components/schemas/SloTimeFrame'
                    targetThresholdPercentage:
                      example: 99.999
                      format: float
                      type: number
                    type:
                      example: request
                      type: string
                    updateTime:
                      format: date-time
                      type: string
                  required:
                    - name
                    - targetThresholdPercentage
                    - window
                    - sli
                  title: Slo
                  type: object
                - additionalProperties: false
                  description: Definition of an SLO
                  properties:
                    createTime:
                      format: date-time
                      type: string
                    creator:
                      example: test@domain.com
                      type: string
                    description:
                      example: A brief description of my SLO
                      type: string
                    grouping:
                      $ref: '#/components/schemas/v1.Grouping'
                    id:
                      example: b11919d5-ef85-4bb1-8655-02640dbe94d9
                      type: string
                    labels:
                      additionalProperties:
                        type: string
                      type: object
                    name:
                      example: Example Slo Name
                      type: string
                    revision:
                      $ref: '#/components/schemas/v1.Revision'
                    sloTimeFrame:
                      $ref: '#/components/schemas/SloTimeFrame'
                    targetThresholdPercentage:
                      example: 99.999
                      format: float
                      type: number
                    type:
                      example: request
                      type: string
                    updateTime:
                      format: date-time
                      type: string
                    windowBasedMetricSli:
                      $ref: '#/components/schemas/WindowBasedMetricSli'
                  required:
                    - name
                    - targetThresholdPercentage
                    - window
                    - sli
                  title: Slo
                  type: object
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceSloAlertsValidationsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Replace Slo Pre-Validate Alerts
      tags:
        - Slos Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/slo/slos/validate';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"createTime":"2019-08-24T14:15:22Z","creator":"test@domain.com","description":"A brief description of my SLO","grouping":{"labels":["string"]},"id":"b11919d5-ef85-4bb1-8655-02640dbe94d9","labels":{"property1":"string","property2":"string"},"name":"Example Slo Name","requestBasedMetricSli":{"goodEvents":{"query":"sum(rate(http_requests_total{status=\"200\"}[5m]))"},"totalEvents":{"query":"sum(rate(http_requests_total{status=\"200\"}[5m]))"}},"revision":{"revision":1,"updateTime":"2019-08-24T14:15:22Z"},"sloTimeFrame":"SLO_TIME_FRAME_UNSPECIFIED","targetThresholdPercentage":99.999,"type":"request","updateTime":"2019-08-24T14:15:22Z"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/slo/slos/validate"


            payload = {
                "createTime": "2019-08-24T14:15:22Z",
                "creator": "test@domain.com",
                "description": "A brief description of my SLO",
                "grouping": {"labels": ["string"]},
                "id": "b11919d5-ef85-4bb1-8655-02640dbe94d9",
                "labels": {
                    "property1": "string",
                    "property2": "string"
                },
                "name": "Example Slo Name",
                "requestBasedMetricSli": {
                    "goodEvents": {"query": "sum(rate(http_requests_total{status=\"200\"}[5m]))"},
                    "totalEvents": {"query": "sum(rate(http_requests_total{status=\"200\"}[5m]))"}
                },
                "revision": {
                    "revision": 1,
                    "updateTime": "2019-08-24T14:15:22Z"
                },
                "sloTimeFrame": "SLO_TIME_FRAME_UNSPECIFIED",
                "targetThresholdPercentage": 99.999,
                "type": "request",
                "updateTime": "2019-08-24T14:15:22Z"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/slo/slos/validate \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"createTime":"2019-08-24T14:15:22Z","creator":"test@domain.com","description":"A brief description of my SLO","grouping":{"labels":["string"]},"id":"b11919d5-ef85-4bb1-8655-02640dbe94d9","labels":{"property1":"string","property2":"string"},"name":"Example Slo Name","requestBasedMetricSli":{"goodEvents":{"query":"sum(rate(http_requests_total{status=\"200\"}[5m]))"},"totalEvents":{"query":"sum(rate(http_requests_total{status=\"200\"}[5m]))"}},"revision":{"revision":1,"updateTime":"2019-08-24T14:15:22Z"},"sloTimeFrame":"SLO_TIME_FRAME_UNSPECIFIED","targetThresholdPercentage":99.999,"type":"request","updateTime":"2019-08-24T14:15:22Z"}'
      description: No description available
  /v1/slo/slos/zeroState:
    get:
      externalDocs:
        url: ''
      operationId: SlosService_GetZeroState
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetZeroStateResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Slo Zero State
      tags:
        - Slos Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/slo/slos/zeroState';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/slo/slos/zeroState"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/slo/slos/zeroState \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/slo/slos/{id}:
    get:
      externalDocs:
        url: ''
      operationId: SlosService_GetSlo
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSloResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Slo
      tags:
        - Slos Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/slo/slos/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/slo/slos/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/slo/slos/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: SlosService_DeleteSlo
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSloResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Delete Slo
      tags:
        - Slos Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/slo/slos/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/slo/slos/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/slo/slos/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/slo/slos:batchExecute:
    post:
      externalDocs:
        url: ''
      operationId: SlosService_BatchExecuteSlo
      parameters:
        - in: query
          name: requests
          required: false
          schema:
            items:
              oneOf:
                - additionalProperties: false
                  description: Request for executing an SLO operation.
                  externalDocs:
                    url: ''
                  properties:
                    createSloRequest:
                      additionalProperties: false
                      description: Request to create a new SLO.
                      externalDocs:
                        url: ''
                      properties:
                        silenceDataValidations:
                          deprecated: true
                          type: boolean
                        slo:
                          oneOf:
                            - additionalProperties: false
                              description: Definition of an SLO
                              externalDocs:
                                url: ''
                              properties:
                                createTime:
                                  format: date-time
                                  type: string
                                creator:
                                  example: test@domain.com
                                  type: string
                                description:
                                  example: A brief description of my SLO
                                  type: string
                                grouping:
                                  description: Definition of the SLO grouping fields
                                  externalDocs:
                                    url: ''
                                  properties:
                                    labels:
                                      items:
                                        type: string
                                      type: array
                                  title: Grouping
                                  type: object
                                id:
                                  example: b11919d5-ef85-4bb1-8655-02640dbe94d9
                                  type: string
                                labels:
                                  additionalProperties: null
                                  type: object
                                name:
                                  example: Example Slo Name
                                  type: string
                                requestBasedMetricSli:
                                  description: >-
                                    Definition of a request-based SLI based on
                                    metrics
                                  externalDocs:
                                    url: ''
                                  properties:
                                    goodEvents:
                                      description: Definition of a metric used in SLOs
                                      externalDocs:
                                        url: ''
                                      properties:
                                        query:
                                          example: >-
                                            sum(rate(http_requests_total{status="200"}[5m]))
                                          type: string
                                      required:
                                        - query
                                      title: Metric
                                      type: object
                                    totalEvents:
                                      description: Definition of a metric used in SLOs
                                      externalDocs:
                                        url: ''
                                      properties:
                                        query:
                                          example: >-
                                            sum(rate(http_requests_total{status="200"}[5m]))
                                          type: string
                                      required:
                                        - query
                                      title: Metric
                                      type: object
                                  required:
                                    - goodEvents
                                    - totalEvents
                                  title: RequestBasedMetricSli
                                  type: object
                                revision:
                                  description: >-
                                    The revision of the slo, used to
                                    differentiate between different versions of
                                    the same SLO
                                  externalDocs:
                                    url: ''
                                  properties:
                                    revision:
                                      example: 1
                                      format: int32
                                      type: integer
                                    updateTime:
                                      format: date-time
                                      type: string
                                  title: Revision
                                  type: object
                                sloTimeFrame:
                                  enum:
                                    - SLO_TIME_FRAME_UNSPECIFIED
                                    - SLO_TIME_FRAME_7_DAYS
                                    - SLO_TIME_FRAME_14_DAYS
                                    - SLO_TIME_FRAME_21_DAYS
                                    - SLO_TIME_FRAME_28_DAYS
                                  type: string
                                targetThresholdPercentage:
                                  example: 99.999
                                  format: float
                                  type: number
                                type:
                                  example: request
                                  type: string
                                updateTime:
                                  format: date-time
                                  type: string
                              required:
                                - name
                                - targetThresholdPercentage
                                - window
                                - sli
                              title: Slo
                              type: object
                            - additionalProperties: false
                              description: Definition of an SLO
                              externalDocs:
                                url: ''
                              properties:
                                createTime:
                                  format: date-time
                                  type: string
                                creator:
                                  example: test@domain.com
                                  type: string
                                description:
                                  example: A brief description of my SLO
                                  type: string
                                grouping:
                                  description: Definition of the SLO grouping fields
                                  externalDocs:
                                    url: ''
                                  properties:
                                    labels:
                                      items:
                                        type: string
                                      type: array
                                  title: Grouping
                                  type: object
                                id:
                                  example: b11919d5-ef85-4bb1-8655-02640dbe94d9
                                  type: string
                                labels:
                                  additionalProperties: null
                                  type: object
                                name:
                                  example: Example Slo Name
                                  type: string
                                revision:
                                  description: >-
                                    The revision of the slo, used to
                                    differentiate between different versions of
                                    the same SLO
                                  externalDocs:
                                    url: ''
                                  properties:
                                    revision:
                                      example: 1
                                      format: int32
                                      type: integer
                                    updateTime:
                                      format: date-time
                                      type: string
                                  title: Revision
                                  type: object
                                sloTimeFrame:
                                  enum:
                                    - SLO_TIME_FRAME_UNSPECIFIED
                                    - SLO_TIME_FRAME_7_DAYS
                                    - SLO_TIME_FRAME_14_DAYS
                                    - SLO_TIME_FRAME_21_DAYS
                                    - SLO_TIME_FRAME_28_DAYS
                                  type: string
                                targetThresholdPercentage:
                                  example: 99.999
                                  format: float
                                  type: number
                                type:
                                  example: request
                                  type: string
                                updateTime:
                                  format: date-time
                                  type: string
                                windowBasedMetricSli:
                                  description: >-
                                    Definition of a window-based SLI based on
                                    metrics
                                  externalDocs:
                                    url: ''
                                  properties:
                                    comparisonOperator:
                                      enum:
                                        - COMPARISON_OPERATOR_UNSPECIFIED
                                        - COMPARISON_OPERATOR_GREATER_THAN
                                        - >-
                                          COMPARISON_OPERATOR_GREATER_THAN_OR_EQUALS
                                        - COMPARISON_OPERATOR_LESS_THAN
                                        - COMPARISON_OPERATOR_LESS_THAN_OR_EQUALS
                                      type: string
                                    missingDataStrategy:
                                      enum:
                                        - MISSING_DATA_STRATEGY_UNCOUNTED
                                        - MISSING_DATA_STRATEGY_GOOD
                                        - MISSING_DATA_STRATEGY_BAD
                                      type: string
                                    query:
                                      description: Definition of a metric used in SLOs
                                      externalDocs:
                                        url: ''
                                      properties:
                                        query:
                                          example: >-
                                            sum(rate(http_requests_total{status="200"}[5m]))
                                          type: string
                                      required:
                                        - query
                                      title: Metric
                                      type: object
                                    threshold:
                                      example: 0.95
                                      format: float
                                      type: number
                                    window:
                                      enum:
                                        - WINDOW_SLO_WINDOW_UNSPECIFIED
                                        - WINDOW_SLO_WINDOW_1_MINUTE
                                        - WINDOW_SLO_WINDOW_5_MINUTES
                                      type: string
                                  required:
                                    - query
                                    - window
                                    - comparisonOperator
                                    - threshold
                                  title: WindowBasedMetricSli
                                  type: object
                              required:
                                - name
                                - targetThresholdPercentage
                                - window
                                - sli
                              title: Slo
                              type: object
                      required:
                        - slo
                      title: CreateSloRequest
                      type: object
                  required:
                    - request
                  title: SloExecutionRequest
                  type: object
                - additionalProperties: false
                  description: Request for executing an SLO operation.
                  externalDocs:
                    url: ''
                  properties:
                    replaceSloRequest:
                      additionalProperties: false
                      description: Request to replace an existing SLO.
                      externalDocs:
                        url: ''
                      properties:
                        silenceDataValidations:
                          deprecated: true
                          type: boolean
                        slo:
                          oneOf:
                            - additionalProperties: false
                              description: Definition of an SLO
                              externalDocs:
                                url: ''
                              properties:
                                createTime:
                                  format: date-time
                                  type: string
                                creator:
                                  example: test@domain.com
                                  type: string
                                description:
                                  example: A brief description of my SLO
                                  type: string
                                grouping:
                                  description: Definition of the SLO grouping fields
                                  externalDocs:
                                    url: ''
                                  properties:
                                    labels:
                                      items:
                                        type: string
                                      type: array
                                  title: Grouping
                                  type: object
                                id:
                                  example: b11919d5-ef85-4bb1-8655-02640dbe94d9
                                  type: string
                                labels:
                                  additionalProperties: null
                                  type: object
                                name:
                                  example: Example Slo Name
                                  type: string
                                requestBasedMetricSli:
                                  description: >-
                                    Definition of a request-based SLI based on
                                    metrics
                                  externalDocs:
                                    url: ''
                                  properties:
                                    goodEvents:
                                      description: Definition of a metric used in SLOs
                                      externalDocs:
                                        url: ''
                                      properties:
                                        query:
                                          example: >-
                                            sum(rate(http_requests_total{status="200"}[5m]))
                                          type: string
                                      required:
                                        - query
                                      title: Metric
                                      type: object
                                    totalEvents:
                                      description: Definition of a metric used in SLOs
                                      externalDocs:
                                        url: ''
                                      properties:
                                        query:
                                          example: >-
                                            sum(rate(http_requests_total{status="200"}[5m]))
                                          type: string
                                      required:
                                        - query
                                      title: Metric
                                      type: object
                                  required:
                                    - goodEvents
                                    - totalEvents
                                  title: RequestBasedMetricSli
                                  type: object
                                revision:
                                  description: >-
                                    The revision of the slo, used to
                                    differentiate between different versions of
                                    the same SLO
                                  externalDocs:
                                    url: ''
                                  properties:
                                    revision:
                                      example: 1
                                      format: int32
                                      type: integer
                                    updateTime:
                                      format: date-time
                                      type: string
                                  title: Revision
                                  type: object
                                sloTimeFrame:
                                  enum:
                                    - SLO_TIME_FRAME_UNSPECIFIED
                                    - SLO_TIME_FRAME_7_DAYS
                                    - SLO_TIME_FRAME_14_DAYS
                                    - SLO_TIME_FRAME_21_DAYS
                                    - SLO_TIME_FRAME_28_DAYS
                                  type: string
                                targetThresholdPercentage:
                                  example: 99.999
                                  format: float
                                  type: number
                                type:
                                  example: request
                                  type: string
                                updateTime:
                                  format: date-time
                                  type: string
                              required:
                                - name
                                - targetThresholdPercentage
                                - window
                                - sli
                              title: Slo
                              type: object
                            - additionalProperties: false
                              description: Definition of an SLO
                              externalDocs:
                                url: ''
                              properties:
                                createTime:
                                  format: date-time
                                  type: string
                                creator:
                                  example: test@domain.com
                                  type: string
                                description:
                                  example: A brief description of my SLO
                                  type: string
                                grouping:
                                  description: Definition of the SLO grouping fields
                                  externalDocs:
                                    url: ''
                                  properties:
                                    labels:
                                      items:
                                        type: string
                                      type: array
                                  title: Grouping
                                  type: object
                                id:
                                  example: b11919d5-ef85-4bb1-8655-02640dbe94d9
                                  type: string
                                labels:
                                  additionalProperties: null
                                  type: object
                                name:
                                  example: Example Slo Name
                                  type: string
                                revision:
                                  description: >-
                                    The revision of the slo, used to
                                    differentiate between different versions of
                                    the same SLO
                                  externalDocs:
                                    url: ''
                                  properties:
                                    revision:
                                      example: 1
                                      format: int32
                                      type: integer
                                    updateTime:
                                      format: date-time
                                      type: string
                                  title: Revision
                                  type: object
                                sloTimeFrame:
                                  enum:
                                    - SLO_TIME_FRAME_UNSPECIFIED
                                    - SLO_TIME_FRAME_7_DAYS
                                    - SLO_TIME_FRAME_14_DAYS
                                    - SLO_TIME_FRAME_21_DAYS
                                    - SLO_TIME_FRAME_28_DAYS
                                  type: string
                                targetThresholdPercentage:
                                  example: 99.999
                                  format: float
                                  type: number
                                type:
                                  example: request
                                  type: string
                                updateTime:
                                  format: date-time
                                  type: string
                                windowBasedMetricSli:
                                  description: >-
                                    Definition of a window-based SLI based on
                                    metrics
                                  externalDocs:
                                    url: ''
                                  properties:
                                    comparisonOperator:
                                      enum:
                                        - COMPARISON_OPERATOR_UNSPECIFIED
                                        - COMPARISON_OPERATOR_GREATER_THAN
                                        - >-
                                          COMPARISON_OPERATOR_GREATER_THAN_OR_EQUALS
                                        - COMPARISON_OPERATOR_LESS_THAN
                                        - COMPARISON_OPERATOR_LESS_THAN_OR_EQUALS
                                      type: string
                                    missingDataStrategy:
                                      enum:
                                        - MISSING_DATA_STRATEGY_UNCOUNTED
                                        - MISSING_DATA_STRATEGY_GOOD
                                        - MISSING_DATA_STRATEGY_BAD
                                      type: string
                                    query:
                                      description: Definition of a metric used in SLOs
                                      externalDocs:
                                        url: ''
                                      properties:
                                        query:
                                          example: >-
                                            sum(rate(http_requests_total{status="200"}[5m]))
                                          type: string
                                      required:
                                        - query
                                      title: Metric
                                      type: object
                                    threshold:
                                      example: 0.95
                                      format: float
                                      type: number
                                    window:
                                      enum:
                                        - WINDOW_SLO_WINDOW_UNSPECIFIED
                                        - WINDOW_SLO_WINDOW_1_MINUTE
                                        - WINDOW_SLO_WINDOW_5_MINUTES
                                      type: string
                                  required:
                                    - query
                                    - window
                                    - comparisonOperator
                                    - threshold
                                  title: WindowBasedMetricSli
                                  type: object
                              required:
                                - name
                                - targetThresholdPercentage
                                - window
                                - sli
                              title: Slo
                              type: object
                      required:
                        - slo
                      title: ReplaceSloRequest
                      type: object
                  required:
                    - request
                  title: SloExecutionRequest
                  type: object
                - additionalProperties: false
                  description: Request for executing an SLO operation.
                  externalDocs:
                    url: ''
                  properties:
                    deleteSloRequest:
                      description: Request to delete an existing SLO.
                      externalDocs:
                        url: ''
                      properties:
                        id:
                          type: string
                      required:
                        - id
                      title: DeleteSloRequest
                      type: object
                  required:
                    - request
                  title: SloExecutionRequest
                  type: object
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchExecuteSloResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Batch Execute Slo
      tags:
        - Slos Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/slo/slos:batchExecute?requests=SOME_ARRAY_VALUE';


            let options = {method: 'POST', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/slo/slos:batchExecute"


            querystring = {"requests":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("POST", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/slo/slos:batchExecute?requests=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/slo/slos:batchGet:
    get:
      externalDocs:
        url: ''
      operationId: SlosService_BatchGetSlos
      parameters:
        - in: query
          name: ids
          required: false
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetSlosResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Batch Get Slo
      tags:
        - Slos Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/slo/slos:batchGet?ids=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/slo/slos:batchGet"


            querystring = {"ids":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v1/slo/slos:batchGet?ids=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v1/teams/groups/{group_id.id}/scope:
    get:
      externalDocs:
        url: ''
      operationId: TeamPermissionsMgmtService_GetTeamGroupScope
      parameters:
        - in: path
          name: group_id.id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTeamGroupScopeResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Team Group Scope
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7Bgroup_id.id%7D/scope';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7Bgroup_id.id%7D/scope"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7Bgroup_id.id%7D/scope \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: TeamPermissionsMgmtService_SetTeamGroupScope
      parameters:
        - in: path
          name: group_id.id
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: >-
                Request message for setting scope filters (subsystems and
                applications) for a team group to control access permissions
              properties:
                scopeFilters:
                  $ref: '#/components/schemas/ScopeFilters'
              title: SetTeamGroupScopeRequest
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetTeamGroupScopeResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Set Team Group Scope
      tags:
        - Team Permissions Management Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7Bgroup_id.id%7D/scope';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"scopeFilters":{"applications":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}],"subsystems":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}]}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7Bgroup_id.id%7D/scope"


            payload = {"scopeFilters": {
                    "applications": [
                        {
                            "filterType": "FILTER_TYPE_UNSPECIFIED",
                            "term": "string"
                        }
                    ],
                    "subsystems": [
                        {
                            "filterType": "FILTER_TYPE_UNSPECIFIED",
                            "term": "string"
                        }
                    ]
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7Bgroup_id.id%7D/scope \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"scopeFilters":{"applications":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}],"subsystems":[{"filterType":"FILTER_TYPE_UNSPECIFIED","term":"string"}]}}'
      description: No description available
  /v1/view_folders:
    get:
      description: List view's folders
      externalDocs:
        url: ''
      operationId: ViewsFoldersService_ListViewFolders
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListViewFoldersResponse'
          description: ''
      summary: List view folders service
      tags:
        - Folders for views service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/view_folders"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/view_folders \
              --header 'Authorization: Bearer <API_KEY>'
    post:
      description: Create view folder
      externalDocs:
        url: ''
      operationId: ViewsFoldersService_CreateViewFolder
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: Create view folder.
              properties:
                name:
                  description: Folder name
                  example: My Folder
                  minLength: 1
                  type: string
              title: CreateViewFolderRequest
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewFolder'
          description: ''
      summary: Create View Folder service
      tags:
        - Folders for views service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"My Folder"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/view_folders"


            payload = {"name": "My Folder"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/view_folders \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"My Folder"}'
  /v1/view_folders/{folder.id}:
    put:
      description: Replaces an existing view folder
      externalDocs:
        url: ''
      operationId: ViewsFoldersService_ReplaceViewFolder
      parameters:
        - in: path
          name: folder.id
          required: true
          schema:
            description: Unique identifier for folders
            example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
            maxLength: 36
            minLength: 36
            pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
            type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: View folder.
              properties:
                name:
                  description: Folder name
                  example: My Folder
                  minLength: 1
                  type: string
              required:
                - name
              title: ViewFolder
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewFolder'
          description: ''
      summary: Replace View Folder service
      tags:
        - Folders for views service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f';


            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"name":"My Folder"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f"


            payload = {"name": "My Folder"}

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"name":"My Folder"}'
  /v1/view_folders/{id}:
    get:
      description: Create view folder
      externalDocs:
        url: ''
      operationId: ViewsFoldersService_GetViewFolder
      parameters:
        - in: path
          name: id
          required: true
          schema:
            description: Unique identifier for folders
            example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
            maxLength: 36
            minLength: 36
            pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewFolder'
          description: ''
      summary: Get View Folder service
      tags:
        - Folders for views service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f \
              --header 'Authorization: Bearer <API_KEY>'
    delete:
      description: Deletes a view folder by ID
      externalDocs:
        url: ''
      operationId: ViewsFoldersService_DeleteViewFolder
      parameters:
        - in: path
          name: id
          required: true
          schema:
            description: Unique identifier for folders
            example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
            maxLength: 36
            minLength: 36
            pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteViewFolderResponse'
          description: ''
      summary: Delete View Folder service
      tags:
        - Folders for views service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f"


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f \
              --header 'Authorization: Bearer <API_KEY>'
  /v1/views:
    get:
      description: Lists all company public views
      externalDocs:
        url: ''
      operationId: ViewsService_ListViews
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListViewsResponse'
          description: ''
      summary: List views service
      tags:
        - Views service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v1/views';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/views"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/views \
              --header 'Authorization: Bearer <API_KEY>'
    post:
      description: Creates a new view
      externalDocs:
        url: ''
      operationId: ViewsService_CreateView
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: View folder.
              properties:
                filters:
                  $ref: '#/components/schemas/SelectedFilters'
                folderId:
                  description: Unique identifier for folders
                  example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
                  maxLength: 36
                  minLength: 36
                  pattern: >-
                    ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
                  type: string
                name:
                  description: View name
                  example: Logs view
                  minLength: 1
                  type: string
                searchQuery:
                  $ref: '#/components/schemas/SearchQuery'
                timeSelection:
                  $ref: '#/components/schemas/TimeSelection'
                viewType:
                  $ref: '#/components/schemas/ViewType'
              required:
                - name
                - timeSelection
              title: ViewFolder
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/View'
          description: ''
      summary: Create a view service
      tags:
        - Views service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/views';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"filters":{"filters":[{"name":"applicationName","selectedValues":{"demo":true,"cs-rest-test1":true}}]},"folderId":"3dc02998-0b50-4ea8-b68a-4779d716fa1f","name":"Logs view","searchQuery":{"query":"string"},"timeSelection":{"quickSelection":{"caption":"Last Hour","seconds":3600}},"viewType":"VIEW_TYPE_UNSPECIFIED"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/views"


            payload = {
                "filters": {"filters": [
                        {
                            "name": "applicationName",
                            "selectedValues": {
                                "demo": True,
                                "cs-rest-test1": True
                            }
                        }
                    ]},
                "folderId": "3dc02998-0b50-4ea8-b68a-4779d716fa1f",
                "name": "Logs view",
                "searchQuery": {"query": "string"},
                "timeSelection": {"quickSelection": {
                        "caption": "Last Hour",
                        "seconds": 3600
                    }},
                "viewType": "VIEW_TYPE_UNSPECIFIED"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v1/views \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"filters":{"filters":[{"name":"applicationName","selectedValues":{"demo":true,"cs-rest-test1":true}}]},"folderId":"3dc02998-0b50-4ea8-b68a-4779d716fa1f","name":"Logs view","searchQuery":{"query":"string"},"timeSelection":{"quickSelection":{"caption":"Last Hour","seconds":3600}},"viewType":"VIEW_TYPE_UNSPECIFIED"}'
  /v1/views/{id}:
    get:
      description: Gets a view by ID
      externalDocs:
        url: ''
      operationId: ViewsService_GetView
      parameters:
        - in: path
          name: id
          required: true
          schema:
            description: id
            example: 52
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/View'
          description: ''
      summary: Get view service
      tags:
        - Views service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v1/views/52';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/views/52"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v1/views/52 \
              --header 'Authorization: Bearer <API_KEY>'
    delete:
      description: Deletes a view by ID
      externalDocs:
        url: ''
      operationId: ViewsService_DeleteView
      parameters:
        - in: path
          name: id
          required: true
          schema:
            description: id
            example: 52
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteViewResponse'
          description: ''
      summary: Delete view service
      tags:
        - Views service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v1/views/52';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v1/views/52"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v1/views/52 \
              --header 'Authorization: Bearer <API_KEY>'
  /v1/views/{view.id}:
    put:
      description: Replaces an existing view
      externalDocs:
        url: ''
      operationId: ViewsService_ReplaceView
      parameters:
        - in: path
          name: view.id
          required: true
          schema:
            description: id
            example: 52
            format: int32
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              description: Response for views.
              properties:
                filters:
                  $ref: '#/components/schemas/SelectedFilters'
                folderId:
                  description: Unique identifier for folders
                  example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
                  maxLength: 36
                  minLength: 36
                  pattern: >-
                    ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
                  type: string
                isCompactMode:
                  type: boolean
                name:
                  description: View name
                  example: Logs view
                  minLength: 1
                  type: string
                searchQuery:
                  $ref: '#/components/schemas/SearchQuery'
                timeSelection:
                  $ref: '#/components/schemas/TimeSelection'
                viewType:
                  $ref: '#/components/schemas/ViewType'
              required:
                - name
                - id
                - timeSelection
              title: View
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/View'
          description: ''
      summary: Replace a view service
      tags:
        - Views service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v1/views/52';

            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"filters":{"filters":[{"name":"applicationName","selectedValues":{"demo":true,"cs-rest-test1":true}}]},"folderId":"3dc02998-0b50-4ea8-b68a-4779d716fa1f","isCompactMode":true,"name":"Logs view","searchQuery":{"query":"string"},"timeSelection":{"quickSelection":{"caption":"Last Hour","seconds":3600}},"viewType":"VIEW_TYPE_UNSPECIFIED"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v1/views/52"


            payload = {
                "filters": {"filters": [
                        {
                            "name": "applicationName",
                            "selectedValues": {
                                "demo": True,
                                "cs-rest-test1": True
                            }
                        }
                    ]},
                "folderId": "3dc02998-0b50-4ea8-b68a-4779d716fa1f",
                "isCompactMode": True,
                "name": "Logs view",
                "searchQuery": {"query": "string"},
                "timeSelection": {"quickSelection": {
                        "caption": "Last Hour",
                        "seconds": 3600
                    }},
                "viewType": "VIEW_TYPE_UNSPECIFIED"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v1/views/52 \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"filters":{"filters":[{"name":"applicationName","selectedValues":{"demo":true,"cs-rest-test1":true}}]},"folderId":"3dc02998-0b50-4ea8-b68a-4779d716fa1f","isCompactMode":true,"name":"Logs view","searchQuery":{"query":"string"},"timeSelection":{"quickSelection":{"caption":"Last Hour","seconds":3600}},"viewType":"VIEW_TYPE_UNSPECIFIED"}'
  /v2/actions:
    get:
      externalDocs:
        url: ''
      operationId: ActionsService_ListActions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListActionsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: List Actions
      tags:
        - Actions Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v2/actions"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    put:
      externalDocs:
        url: ''
      operationId: ActionsService_ReplaceAction
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                action:
                  $ref: '#/components/schemas/v2.Action'
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceActionResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Replace Action
      tags:
        - Actions Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions';

            let options = {
              method: 'PUT',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"action":{"applicationNames":["string"],"createdBy":"string","id":"string","isHidden":true,"isPrivate":true,"name":"string","sourceType":"SOURCE_TYPE_UNSPECIFIED","subsystemNames":["string"],"url":"string"}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v2/actions"


            payload = {"action": {
                    "applicationNames": ["string"],
                    "createdBy": "string",
                    "id": "string",
                    "isHidden": True,
                    "isPrivate": True,
                    "name": "string",
                    "sourceType": "SOURCE_TYPE_UNSPECIFIED",
                    "subsystemNames": ["string"],
                    "url": "string"
                }}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"action":{"applicationNames":["string"],"createdBy":"string","id":"string","isHidden":true,"isPrivate":true,"name":"string","sourceType":"SOURCE_TYPE_UNSPECIFIED","subsystemNames":["string"],"url":"string"}}'
      description: No description available
    post:
      externalDocs:
        url: ''
      operationId: ActionsService_CreateAction
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                applicationNames:
                  items:
                    type: string
                  type: array
                isPrivate:
                  type: boolean
                name:
                  type: string
                sourceType:
                  $ref: '#/components/schemas/v2.SourceType'
                subsystemNames:
                  items:
                    type: string
                  type: array
                url:
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateActionResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Create Action
      tags:
        - Actions Service
      x-codeSamples:
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions';

            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"applicationNames":["string"],"isPrivate":true,"name":"string","sourceType":"SOURCE_TYPE_UNSPECIFIED","subsystemNames":["string"],"url":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v2/actions"


            payload = {
                "applicationNames": ["string"],
                "isPrivate": True,
                "name": "string",
                "sourceType": "SOURCE_TYPE_UNSPECIFIED",
                "subsystemNames": ["string"],
                "url": "string"
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"applicationNames":["string"],"isPrivate":true,"name":"string","sourceType":"SOURCE_TYPE_UNSPECIFIED","subsystemNames":["string"],"url":"string"}'
      description: No description available
  /v2/actions/actions:atomicBatchExecute:
    post:
      externalDocs:
        url: ''
      operationId: ActionsService_AtomicBatchExecuteActions
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                requests:
                  items:
                    $ref: '#/components/schemas/ActionExecutionRequest'
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtomicBatchExecuteActionsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Atomic Batch Execute Actions
      tags:
        - Actions Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/actions/actions:atomicBatchExecute';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"requests":[{"create":{"applicationNames":["string"],"isPrivate":true,"name":"string","sourceType":"SOURCE_TYPE_UNSPECIFIED","subsystemNames":["string"],"url":"string"}}]}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v2/actions/actions:atomicBatchExecute"


            payload = {"requests": [{"create": {
                            "applicationNames": ["string"],
                            "isPrivate": True,
                            "name": "string",
                            "sourceType": "SOURCE_TYPE_UNSPECIFIED",
                            "subsystemNames": ["string"],
                            "url": "string"
                        }}]}
            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions/actions:atomicBatchExecute \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"requests":[{"create":{"applicationNames":["string"],"isPrivate":true,"name":"string","sourceType":"SOURCE_TYPE_UNSPECIFIED","subsystemNames":["string"],"url":"string"}}]}'
      description: No description available
  /v2/actions/actions:order:
    post:
      externalDocs:
        url: ''
      operationId: ActionsService_OrderActions
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                privateActionsOrder:
                  additionalProperties:
                    format: int64
                    type: integer
                  type: object
                sharedActionsOrder:
                  additionalProperties:
                    format: int64
                    type: integer
                  type: object
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderActionsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Order Actions
      tags:
        - Actions Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/actions/actions:order';


            let options = {
              method: 'POST',
              headers: {Authorization: 'Bearer <API_KEY>', 'content-type': 'application/json'},
              body: '{"privateActionsOrder":{"property1":0,"property2":0},"sharedActionsOrder":{"property1":0,"property2":0}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v2/actions/actions:order"


            payload = {
                "privateActionsOrder": {
                    "property1": 0,
                    "property2": 0
                },
                "sharedActionsOrder": {
                    "property1": 0,
                    "property2": 0
                }
            }

            headers = {
                "Authorization": "Bearer <API_KEY>",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions/actions:order \
              --header 'Authorization: Bearer <API_KEY>' \
              --header 'content-type: application/json' \
              --data '{"privateActionsOrder":{"property1":0,"property2":0},"sharedActionsOrder":{"property1":0,"property2":0}}'
      description: No description available
  /v2/actions/{id}:
    get:
      externalDocs:
        url: ''
      operationId: ActionsService_GetAction
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetActionResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Action
      tags:
        - Actions Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
    delete:
      externalDocs:
        url: ''
      operationId: ActionsService_DeleteAction
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteActionResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Delete Action
      tags:
        - Actions Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D';


            let options = {method: 'DELETE', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: |-
            import requests

            url = "https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D"

            headers = {"Authorization": "Bearer <API_KEY>"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v3/alert-event-stats:
    get:
      externalDocs:
        url: ''
      operationId: AlertEventService_GetAlertEventsStats
      parameters:
        - in: query
          name: ids
          required: false
          schema:
            items:
              type: string
            type: array
        - in: query
          name: order_bys
          required: false
          schema:
            items:
              properties:
                direction:
                  enum:
                    - ORDER_BY_ALERT_EVENT_DIRECTION_UNSPECIFIED
                    - ORDER_BY_ALERT_EVENT_DIRECTION_ASC
                    - ORDER_BY_ALERT_EVENT_DIRECTION_DESC
                  type: string
                fieldName:
                  enum:
                    - ORDER_BY_ALERT_EVENT_FIELDS_UNSPECIFIED
                    - ORDER_BY_ALERT_EVENT_FIELDS_TIMESTAMP
                  type: string
              type: object
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAlertEventStatsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get alert events statistics
      tags:
        - Alert events service
      x-coralogixPermissions:
        - alerts:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/alert-event-stats?ids=SOME_ARRAY_VALUE&order_bys=SOME_ARRAY_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v3/alert-event-stats"


            querystring =
            {"ids":"SOME_ARRAY_VALUE","order_bys":"SOME_ARRAY_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/alert-event-stats?ids=SOME_ARRAY_VALUE&order_bys=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v3/alert-event/{id}:
    get:
      externalDocs:
        url: ''
      operationId: AlertEventService_GetAlertEvent
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: order_bys
          required: false
          schema:
            items:
              properties:
                direction:
                  enum:
                    - ORDER_BY_ALERT_EVENT_DIRECTION_UNSPECIFIED
                    - ORDER_BY_ALERT_EVENT_DIRECTION_ASC
                    - ORDER_BY_ALERT_EVENT_DIRECTION_DESC
                  type: string
                fieldName:
                  enum:
                    - ORDER_BY_ALERT_EVENT_FIELDS_UNSPECIFIED
                    - ORDER_BY_ALERT_EVENT_FIELDS_TIMESTAMP
                  type: string
              type: object
            type: array
        - in: query
          name: pagination
          required: false
          schema:
            properties:
              pageSize:
                format: int64
                type: integer
              pageToken:
                type: string
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAlertEventResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get alert event by ID
      tags:
        - Alert events service
      x-coralogixPermissions:
        - alerts:ReadConfig
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/alert-event/%7Bid%7D?order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/alert-event/%7Bid%7D"


            querystring =
            {"order_bys":"SOME_ARRAY_VALUE","pagination":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/alert-event/%7Bid%7D?order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v3/events:
    get:
      externalDocs:
        url: ''
      operationId: EventsService_ListEvents
      parameters:
        - in: query
          name: filter
          required: false
          schema:
            description: This data structure represents an events filter
            externalDocs:
              url: ''
            properties:
              cxEventKeys:
                items:
                  example:
                    - test_key
                  type: string
                type: array
              cxEventLabelsFilters: {}
              cxEventMetadataFilters: {}
              cxEventTypes:
                items:
                  example:
                    - test_type
                  type: string
                type: array
              timestamp: {}
            required:
              - timestamp
              - cxEventTypes
              - cxEventKeys
            title: EventsFilter
            type: object
        - in: query
          name: order_bys
          required: false
          schema:
            items:
              properties:
                direction:
                  enum:
                    - ORDER_BY_DIRECTION_UNSPECIFIED
                    - ORDER_BY_DIRECTION_ASC
                    - ORDER_BY_DIRECTION_DESC
                  example: ORDER_BY_DIRECTION_ASC
                  type: string
                fieldName:
                  enum:
                    - ORDER_BY_FIELDS_UNSPECIFIED
                    - ORDER_BY_FIELDS_TIMESTAMP
                  example: ORDER_BY_FIELDS_TIMESTAMP
                  type: string
              type: object
            type: array
        - in: query
          name: pagination
          required: false
          schema:
            properties:
              pageSize:
                example: 10
                format: int64
                type: integer
              pageToken:
                example: test
                type: string
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEventsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: List Events
      tags:
        - Events Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/events?filter=SOME_OBJECT_VALUE&order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v3/events"


            querystring =
            {"filter":"SOME_OBJECT_VALUE","order_bys":"SOME_ARRAY_VALUE","pagination":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/events?filter=SOME_OBJECT_VALUE&order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v3/events/events:batchGet:
    get:
      externalDocs:
        url: ''
      operationId: EventsService_BatchGetEvent
      parameters:
        - in: query
          name: ids
          required: false
          schema:
            items:
              type: string
            type: array
        - in: query
          name: order_bys
          required: false
          schema:
            items:
              properties:
                direction:
                  enum:
                    - ORDER_BY_DIRECTION_UNSPECIFIED
                    - ORDER_BY_DIRECTION_ASC
                    - ORDER_BY_DIRECTION_DESC
                  example: ORDER_BY_DIRECTION_ASC
                  type: string
                fieldName:
                  enum:
                    - ORDER_BY_FIELDS_UNSPECIFIED
                    - ORDER_BY_FIELDS_TIMESTAMP
                  example: ORDER_BY_FIELDS_TIMESTAMP
                  type: string
              type: object
            type: array
        - in: query
          name: pagination
          required: false
          schema:
            properties:
              pageSize:
                example: 10
                format: int64
                type: integer
              pageToken:
                example: test
                type: string
            type: object
        - in: query
          name: filter
          required: false
          schema:
            properties:
              timestamp: {}
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetEventResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Batch Get Event
      tags:
        - Events Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/events/events:batchGet?ids=SOME_ARRAY_VALUE&order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE&filter=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url =
            "https://api.coralogix.com/mgmt/openapi/v3/events/events:batchGet"


            querystring =
            {"ids":"SOME_ARRAY_VALUE","order_bys":"SOME_ARRAY_VALUE","pagination":"SOME_OBJECT_VALUE","filter":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/events/events:batchGet?ids=SOME_ARRAY_VALUE&order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE&filter=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v3/events/{id}:
    get:
      externalDocs:
        url: ''
      operationId: EventsService_GetEvent
      parameters:
        - in: path
          name: id
          required: true
          schema:
            example: test
            type: string
        - in: query
          name: order_bys
          required: false
          schema:
            items:
              properties:
                direction:
                  enum:
                    - ORDER_BY_DIRECTION_UNSPECIFIED
                    - ORDER_BY_DIRECTION_ASC
                    - ORDER_BY_DIRECTION_DESC
                  example: ORDER_BY_DIRECTION_ASC
                  type: string
                fieldName:
                  enum:
                    - ORDER_BY_FIELDS_UNSPECIFIED
                    - ORDER_BY_FIELDS_TIMESTAMP
                  example: ORDER_BY_FIELDS_TIMESTAMP
                  type: string
              type: object
            type: array
        - in: query
          name: pagination
          required: false
          schema:
            properties:
              pageSize:
                example: 10
                format: int64
                type: integer
              pageToken:
                example: test
                type: string
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Event
      tags:
        - Events Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/events/test?order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v3/events/test"


            querystring =
            {"order_bys":"SOME_ARRAY_VALUE","pagination":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/events/test?order_bys=SOME_ARRAY_VALUE&pagination=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v3/events:count:
    get:
      externalDocs:
        url: ''
      operationId: EventsService_ListEventsCount
      parameters:
        - in: query
          name: filter
          required: false
          schema:
            description: This data structure represents an events filter
            externalDocs:
              url: ''
            properties:
              cxEventKeys:
                items:
                  example:
                    - test_key
                  type: string
                type: array
              cxEventLabelsFilters: {}
              cxEventMetadataFilters: {}
              cxEventTypes:
                items:
                  example:
                    - test_type
                  type: string
                type: array
              timestamp: {}
            required:
              - timestamp
              - cxEventTypes
              - cxEventKeys
            title: EventsFilter
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEventsCountResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: List Events Count
      tags:
        - Events Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/events:count?filter=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v3/events:count"


            querystring = {"filter":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/events:count?filter=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
  /v3/events:statistics:
    get:
      externalDocs:
        url: ''
      operationId: EventsService_GetEventsStatistics
      parameters:
        - in: query
          name: filter
          required: false
          schema:
            description: This data structure represents an events filter
            externalDocs:
              url: ''
            properties:
              cxEventKeys:
                items:
                  example:
                    - test_key
                  type: string
                type: array
              cxEventLabelsFilters: {}
              cxEventMetadataFilters: {}
              cxEventTypes:
                items:
                  example:
                    - test_type
                  type: string
                type: array
              timestamp: {}
            required:
              - timestamp
              - cxEventTypes
              - cxEventKeys
            title: EventsFilter
            type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventsStatisticsResponse'
          description: ''
        '400':
          content:
            application/json: {}
          description: Bad Request
        '401':
          content:
            application/json: {}
          description: Unauthorized request
        '500':
          content:
            application/json: {}
          description: Internal server error
      summary: Get Events Statistics
      tags:
        - Events Service
      x-codeSamples:
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'https://api.coralogix.com/mgmt/openapi/v3/events:statistics?filter=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {Authorization: 'Bearer
            <API_KEY>'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
        - lang: Python
          source: >-
            import requests


            url = "https://api.coralogix.com/mgmt/openapi/v3/events:statistics"


            querystring = {"filter":"SOME_OBJECT_VALUE"}


            headers = {"Authorization": "Bearer <API_KEY>"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.coralogix.com/mgmt/openapi/v3/events:statistics?filter=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer <API_KEY>'
      description: No description available
components:
  schemas:
    ARMStack:
      title: ARM stack
      type: object
      properties:
        resourceGroupName:
          type: string
        subscriptionId:
          type: string
      description: This data structure represents an Azure Resource Manager stack.
      externalDocs:
        description: >-
          Find out more about the Azure Resource Manager (ARM) integration in
          our documentation
        url: >-
          https://coralogix.com/docs/integrations/azure/azure-resource-manager-integration-packages/
    AcknowledgeIncidentByEventIdRequest:
      title: Acknowledge incident by event id request
      required:
        - eventId
      type: object
      properties:
        eventId:
          type: string
          description: Event ID associated to the Incident to acknowledge
          example: event_id_1
      description: Request to acknowledge incident
      externalDocs:
        url: ''
    AcknowledgeIncidentByEventIdResponse:
      title: Acknowledge incident by event id response
      required:
        - incident
      type: object
      properties:
        incident:
          $ref: '#/components/schemas/Incident'
      description: Response containing the updated incident after acknowledgment
      externalDocs:
        url: ''
    AcknowledgeIncidentsRequest:
      title: Acknowledge incidents request
      required:
        - incidentIds
      type: object
      properties:
        incidentIds:
          type: array
          items:
            type: string
            description: List of incident IDs to acknowledge
            example:
              - incident_id_1
              - incident_id_2
      description: Request to acknowledge one or more incidents
      externalDocs:
        url: ''
    AcknowledgeIncidentsResponse:
      title: Acknowledge incidents response
      required:
        - incidents
      type: object
      properties:
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/Incident'
      description: Response containing the updated incidents after acknowledgment
      externalDocs:
        url: ''
    ActionDataSourceType:
      enum:
        - ACTION_DATA_SOURCE_TYPE_NONE_UNSPECIFIED
        - ACTION_DATA_SOURCE_TYPE_LOGS
        - ACTION_DATA_SOURCE_TYPE_SPANS
        - ACTION_DATA_SOURCE_TYPE_METRICS
        - ACTION_DATA_SOURCE_TYPE_DATAPRIME
      type: string
    ActionDefinition:
      oneOf:
        - type: object
          properties:
            customAction:
              $ref: '#/components/schemas/CustomAction'
          additionalProperties: false
        - type: object
          properties:
            goToDashboardAction:
              $ref: '#/components/schemas/GoToDashboardTemplateAction'
          additionalProperties: false
    ActionExecutionRequest:
      oneOf:
        - type: object
          properties:
            create:
              $ref: '#/components/schemas/CreateActionRequest'
          additionalProperties: false
        - type: object
          properties:
            replace:
              $ref: '#/components/schemas/ReplaceActionRequest'
          additionalProperties: false
        - type: object
          properties:
            delete:
              $ref: '#/components/schemas/DeleteActionRequest'
          additionalProperties: false
    ActionExecutionResponse:
      oneOf:
        - type: object
          properties:
            create:
              $ref: '#/components/schemas/CreateActionResponse'
          additionalProperties: false
        - type: object
          properties:
            replace:
              $ref: '#/components/schemas/ReplaceActionResponse'
          additionalProperties: false
        - type: object
          properties:
            delete:
              $ref: '#/components/schemas/DeleteActionResponse'
          additionalProperties: false
    ActivateRetentionsRequest:
      type: object
    ActivateRetentionsResponse:
      title: Activate Retentions Response
      required:
        - retentions
      type: object
      properties:
        activateRetentions:
          type: boolean
          example: true
      description: >-
        This data structure is obtained after setting the active status of
        retentions
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    ActiveTimeframe:
      type: object
      properties:
        endTime:
          type: string
        startTime:
          type: string
        timezone:
          type: string
    ActivityAnalysis:
      title: Activity analysis data structure
      required:
        - rules
        - status
      type: object
      properties:
        rules:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/ActivityAnalysisStatus'
      description: Configuration for alert activity analysis, containing rules and status.
      externalDocs:
        url: ''
    ActivityAnalysisStats:
      title: Event activity analysis statistics
      type: object
      properties:
        isMutedCount:
          type: integer
          format: int64
        rules:
          type: array
          items:
            type: string
      externalDocs:
        url: ''
    ActivityAnalysisStatus:
      enum:
        - ACTIVITY_ANALYSIS_STATUS_ACTIVATE_OR_UNSPECIFIED
        - ACTIVITY_ANALYSIS_STATUS_MUTE
      type: string
    ActivitySchedule:
      title: Alert activity schedule
      required:
        - dayOfWeek
        - startTime
        - endTime
      type: object
      properties:
        dayOfWeek:
          type: array
          items:
            $ref: '#/components/schemas/DayOfWeek'
        endTime:
          $ref: '#/components/schemas/TimeOfDay'
        startTime:
          $ref: '#/components/schemas/TimeOfDay'
      description: >-
        Defines when an alert should be active based on days of the week and
        time windows
      externalDocs:
        url: ''
    AddEnrichmentsRequest:
      title: Enrichments Creation Request
      required:
        - requestEnrichments
      type: object
      properties:
        requestEnrichments:
          type: array
          items:
            $ref: '#/components/schemas/EnrichmentRequestModel'
      description: This response data structure represents a collection of enrichments
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    AddEnrichmentsResponse:
      title: Encrichments Creation Response
      required:
        - enrichments
      type: object
      properties:
        enrichments:
          type: array
          items:
            $ref: '#/components/schemas/Enrichment'
      description: Response data structure for enrichments creation
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    AddUsersToTeamGroup:
      title: AddUsersToTeamGroup
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/TeamGroupId'
        userIds:
          type: array
          items:
            $ref: '#/components/schemas/v1.UserId'
      description: >-
        This data structure represents the information associated with an API
        key.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    AddUsersToTeamGroupRequest:
      title: AddUsersToTeamGroupRequest
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/TeamGroupId'
        userIds:
          type: array
          items:
            $ref: '#/components/schemas/v1.UserId'
      description: >-
        Request to assign additional users to an existing team group, granting
        them the group's roles and scope permissions.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    AddUsersToTeamGroupResponse:
      title: AddUsersToTeamGroupResponse
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/permissions.v1.TeamId'
      description: >-
        Response confirming the successful addition of users to the specified
        team group.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    AddUsersToTeamGroupsRequest:
      title: AddUsersToTeamGroupsRequest
      type: object
      properties:
        addUsersToGroup:
          type: array
          items:
            $ref: '#/components/schemas/AddUsersToTeamGroup'
        teamId:
          $ref: '#/components/schemas/permissions.v1.TeamId'
      description: >-
        Bulk request to assign users to multiple team groups simultaneously,
        efficiently managing group memberships at scale.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    AddUsersToTeamGroupsResponse:
      title: AddUsersToTeamGroupsResponse
      type: object
      description: >-
        Response confirming the successful bulk addition of users to multiple
        team groups.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    AggType:
      enum:
        - AGG_TYPE_UNSPECIFIED
        - AGG_TYPE_MIN
        - AGG_TYPE_MAX
        - AGG_TYPE_COUNT
        - AGG_TYPE_AVG
        - AGG_TYPE_SUM
        - AGG_TYPE_HISTOGRAM
        - AGG_TYPE_SAMPLES
      type: string
    AggregateBy:
      enum:
        - AGGREGATE_BY_UNSPECIFIED
        - AGGREGATE_BY_APPLICATION
        - AGGREGATE_BY_SUBSYSTEM
        - AGGREGATE_BY_PILLAR
        - AGGREGATE_BY_PRIORITY
        - AGGREGATE_BY_POLICY_NAME
        - AGGREGATE_BY_SEVERITY
      type: string
    AggregationType:
      enum:
        - AGGREGATION_TYPE_UNSPECIFIED
        - AGGREGATION_TYPE_AVG
        - AGGREGATION_TYPE_MIN
        - AGGREGATION_TYPE_MAX
        - AGGREGATION_TYPE_SUM
        - AGGREGATION_TYPE_COUNT
      type: string
    AlertDef:
      title: Alert definition
      required:
        - alertDefProperties
        - id
        - alertVersionId
      type: object
      properties:
        alertDefProperties:
          $ref: '#/components/schemas/AlertDefProperties'
        alertVersionId:
          type: string
          description: The old alert ID
        createdTime:
          type: string
          description: The time when the alert definition was created
          format: date-time
          example: '2023-10-01T12:00:00.000Z'
        id:
          type: string
          description: The alert definition's persistent ID
          example: 123e4567-e89b-12d3-a456-426614174000
        lastTriggeredTime:
          type: string
          description: The last time the alert definition was triggered
          format: date-time
          example: '2023-10-01T12:00:00.000Z'
        status:
          $ref: '#/components/schemas/AlertDefStatus'
        updatedTime:
          type: string
          description: The time when the alert definition was last updated
          format: date-time
          example: '2023-10-01T12:00:00.000Z'
      additionalProperties: false
      description: This data structure represents an alert definition
      externalDocs:
        description: Find out more about alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/introduction-to-alerts/
    AlertDefEnabledFilter:
      title: AlertDef Enabled Filter
      required:
        - enabled
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether to filter for enabled (true) or disabled (false) alerts
      description: Filter by alert definition enabled status
      externalDocs:
        url: ''
    AlertDefEntityLabelsFilter:
      title: AlertDef Entity Labels Filter
      required:
        - entityLabels
        - valuesOperator
      type: object
      properties:
        entityLabels:
          type: object
          additionalProperties:
            type: string
          description: The entity label key-value pairs to filter by
          example:
            environment: production
            team: backend
        valuesOperator:
          $ref: '#/components/schemas/FilterValuesOperator'
      description: Filter by alert definition entity labels
      externalDocs:
        url: ''
    AlertDefEntityLabelsFilter.EntityLabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    AlertDefIncidentSettings:
      title: Alert definition incident settings
      type: object
      properties:
        minutes:
          type: integer
          description: The time in minutes before the alert can be retriggered
          format: int64
          example: 30
        notifyOn:
          $ref: '#/components/schemas/NotifyOn'
      additionalProperties: false
      externalDocs:
        url: ''
    AlertDefLastTriggeredTimeFilter:
      title: AlertDef Last Triggered Time Filter
      required:
        - lastTriggeredAtRange
      type: object
      properties:
        lastTriggeredAtRange:
          $ref: '#/components/schemas/v3.TimeRange'
      description: Filter by alert definition last triggered times
      externalDocs:
        url: ''
    AlertDefModifiedTimeFilter:
      title: AlertDef Modified Time Filter
      required:
        - modifiedAtRange
      type: object
      properties:
        modifiedAtRange:
          $ref: '#/components/schemas/v3.TimeRange'
      description: Filter by alert definition modification times
      externalDocs:
        url: ''
    AlertDefNameFilter:
      title: AlertDef Name Filter
      required:
        - name
        - matcher
      type: object
      properties:
        matcher:
          $ref: '#/components/schemas/alerts.v3.FilterMatcher'
        name:
          type: array
          items:
            type: string
            description: >-
              The name(s) of the alert definition - multiple values are OR'd
              together
      description: Filter by alert definition names
      externalDocs:
        url: ''
    AlertDefNotificationGroup:
      title: Alert definition notification group
      type: object
      properties:
        destinations:
          type: array
          items:
            $ref: '#/components/schemas/NotificationDestination'
        groupByKeys:
          type: array
          items:
            pattern: ^[a-zA-Z0-9_.]+$
            type: string
            description: The keys to group the alerts by
            example:
              - key1
              - key2
        router:
          $ref: '#/components/schemas/NotificationRouter'
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/AlertDefWebhooksSettings'
      additionalProperties: false
      externalDocs:
        url: ''
    AlertDefOrderBy:
      title: Alert definition order by
      required:
        - fieldName
        - direction
      type: object
      properties:
        direction:
          $ref: '#/components/schemas/AlertDefOrderByDirection'
        fieldName:
          $ref: '#/components/schemas/AlertDefOrderByFields'
      description: >-
        A data structure that specifies the field and direction for ordering
        alert definitions
      externalDocs:
        url: ''
    AlertDefOrderByDirection:
      enum:
        - ALERT_DEF_ORDER_BY_DIRECTION_ASC_OR_UNSPECIFIED
        - ALERT_DEF_ORDER_BY_DIRECTION_DESC
      type: string
    AlertDefOrderByFields:
      enum:
        - ALERT_DEF_ORDER_BY_FIELDS_UNSPECIFIED
        - ALERT_DEF_ORDER_BY_FIELDS_PRIORITY
        - ALERT_DEF_ORDER_BY_FIELDS_LAST_TRIGGERED_TIME
        - ALERT_DEF_ORDER_BY_FIELDS_UPDATED_TIME
        - ALERT_DEF_ORDER_BY_FIELDS_ENABLED
      type: string
    AlertDefOrderByList:
      title: Alert definition order by list
      required:
        - orderBys
      type: object
      properties:
        orderBys:
          type: array
          items:
            $ref: '#/components/schemas/AlertDefOrderBy'
      description: List of fields to order alert definitions by
      externalDocs:
        url: ''
    AlertDefOverride:
      title: Alert definition priority update
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/AlertDefPriority'
      externalDocs:
        url: ''
    AlertDefPriority:
      enum:
        - ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED
        - ALERT_DEF_PRIORITY_P4
        - ALERT_DEF_PRIORITY_P3
        - ALERT_DEF_PRIORITY_P2
        - ALERT_DEF_PRIORITY_P1
      type: string
    AlertDefPriorityFilter:
      title: AlertDef Priority Filter
      required:
        - priority
        - matcher
      type: object
      properties:
        matcher:
          $ref: '#/components/schemas/alerts.v3.FilterMatcher'
        priority:
          type: array
          items:
            $ref: '#/components/schemas/AlertDefPriority'
      description: Filter by alert definition priorities
      externalDocs:
        url: ''
    AlertDefProperties:
      oneOf:
        - title: Alert definition properties
          required:
            - name
            - priority
            - type
          type: object
          properties:
            activeOn:
              $ref: '#/components/schemas/ActivitySchedule'
            deleted:
              type: boolean
              description: Whether the alert has been marked as deleted
              example: false
            description:
              type: string
              description: >-
                A detailed description of what the alert monitors and when it
                triggers
              example: Alert description
            enabled:
              type: boolean
              description: Whether the alert is currently active and monitoring
              example: true
            entityLabels:
              type: object
              additionalProperties:
                type: string
              description: Labels used to identify and categorize the alert entity
              example:
                key: value
            groupByKeys:
              type: array
              items:
                type: string
                description: Keys used to group and aggregate alert data
                example:
                  - key1
                  - key2
            incidentsSettings:
              $ref: '#/components/schemas/AlertDefIncidentSettings'
            logsImmediate:
              $ref: '#/components/schemas/LogsImmediateType'
            name:
              type: string
              description: The name of the alert definition
              example: My Alert
            notificationGroup:
              $ref: '#/components/schemas/AlertDefNotificationGroup'
            notificationGroupExcess:
              type: array
              items:
                $ref: '#/components/schemas/AlertDefNotificationGroup'
            phantomMode:
              type: boolean
              description: Whether the alert is in phantom mode (creating incidents or not)
              example: false
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            type:
              $ref: '#/components/schemas/AlertDefType'
          additionalProperties: false
          description: User-configurable properties of an alert definition
          externalDocs:
            url: ''
        - title: Alert definition properties
          required:
            - name
            - priority
            - type
          type: object
          properties:
            activeOn:
              $ref: '#/components/schemas/ActivitySchedule'
            deleted:
              type: boolean
              description: Whether the alert has been marked as deleted
              example: false
            description:
              type: string
              description: >-
                A detailed description of what the alert monitors and when it
                triggers
              example: Alert description
            enabled:
              type: boolean
              description: Whether the alert is currently active and monitoring
              example: true
            entityLabels:
              type: object
              additionalProperties:
                type: string
              description: Labels used to identify and categorize the alert entity
              example:
                key: value
            groupByKeys:
              type: array
              items:
                type: string
                description: Keys used to group and aggregate alert data
                example:
                  - key1
                  - key2
            incidentsSettings:
              $ref: '#/components/schemas/AlertDefIncidentSettings'
            name:
              type: string
              description: The name of the alert definition
              example: My Alert
            notificationGroup:
              $ref: '#/components/schemas/AlertDefNotificationGroup'
            notificationGroupExcess:
              type: array
              items:
                $ref: '#/components/schemas/AlertDefNotificationGroup'
            phantomMode:
              type: boolean
              description: Whether the alert is in phantom mode (creating incidents or not)
              example: false
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            tracingImmediate:
              $ref: '#/components/schemas/TracingImmediateType'
            type:
              $ref: '#/components/schemas/AlertDefType'
          additionalProperties: false
          description: User-configurable properties of an alert definition
          externalDocs:
            url: ''
        - title: Alert definition properties
          required:
            - name
            - priority
            - type
          type: object
          properties:
            activeOn:
              $ref: '#/components/schemas/ActivitySchedule'
            deleted:
              type: boolean
              description: Whether the alert has been marked as deleted
              example: false
            description:
              type: string
              description: >-
                A detailed description of what the alert monitors and when it
                triggers
              example: Alert description
            enabled:
              type: boolean
              description: Whether the alert is currently active and monitoring
              example: true
            entityLabels:
              type: object
              additionalProperties:
                type: string
              description: Labels used to identify and categorize the alert entity
              example:
                key: value
            groupByKeys:
              type: array
              items:
                type: string
                description: Keys used to group and aggregate alert data
                example:
                  - key1
                  - key2
            incidentsSettings:
              $ref: '#/components/schemas/AlertDefIncidentSettings'
            logsThreshold:
              $ref: '#/components/schemas/LogsThresholdType'
            name:
              type: string
              description: The name of the alert definition
              example: My Alert
            notificationGroup:
              $ref: '#/components/schemas/AlertDefNotificationGroup'
            notificationGroupExcess:
              type: array
              items:
                $ref: '#/components/schemas/AlertDefNotificationGroup'
            phantomMode:
              type: boolean
              description: Whether the alert is in phantom mode (creating incidents or not)
              example: false
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            type:
              $ref: '#/components/schemas/AlertDefType'
          additionalProperties: false
          description: User-configurable properties of an alert definition
          externalDocs:
            url: ''
        - title: Alert definition properties
          required:
            - name
            - priority
            - type
          type: object
          properties:
            activeOn:
              $ref: '#/components/schemas/ActivitySchedule'
            deleted:
              type: boolean
              description: Whether the alert has been marked as deleted
              example: false
            description:
              type: string
              description: >-
                A detailed description of what the alert monitors and when it
                triggers
              example: Alert description
            enabled:
              type: boolean
              description: Whether the alert is currently active and monitoring
              example: true
            entityLabels:
              type: object
              additionalProperties:
                type: string
              description: Labels used to identify and categorize the alert entity
              example:
                key: value
            groupByKeys:
              type: array
              items:
                type: string
                description: Keys used to group and aggregate alert data
                example:
                  - key1
                  - key2
            incidentsSettings:
              $ref: '#/components/schemas/AlertDefIncidentSettings'
            logsRatioThreshold:
              $ref: '#/components/schemas/LogsRatioThresholdType'
            name:
              type: string
              description: The name of the alert definition
              example: My Alert
            notificationGroup:
              $ref: '#/components/schemas/AlertDefNotificationGroup'
            notificationGroupExcess:
              type: array
              items:
                $ref: '#/components/schemas/AlertDefNotificationGroup'
            phantomMode:
              type: boolean
              description: Whether the alert is in phantom mode (creating incidents or not)
              example: false
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            type:
              $ref: '#/components/schemas/AlertDefType'
          additionalProperties: false
          description: User-configurable properties of an alert definition
          externalDocs:
            url: ''
        - title: Alert definition properties
          required:
            - name
            - priority
            - type
          type: object
          properties:
            activeOn:
              $ref: '#/components/schemas/ActivitySchedule'
            deleted:
              type: boolean
              description: Whether the alert has been marked as deleted
              example: false
            description:
              type: string
              description: >-
                A detailed description of what the alert monitors and when it
                triggers
              example: Alert description
            enabled:
              type: boolean
              description: Whether the alert is currently active and monitoring
              example: true
            entityLabels:
              type: object
              additionalProperties:
                type: string
              description: Labels used to identify and categorize the alert entity
              example:
                key: value
            groupByKeys:
              type: array
              items:
                type: string
                description: Keys used to group and aggregate alert data
                example:
                  - key1
                  - key2
            incidentsSettings:
              $ref: '#/components/schemas/AlertDefIncidentSettings'
            logsTimeRelativeThreshold:
              $ref: '#/components/schemas/LogsTimeRelativeThresholdType'
            name:
              type: string
              description: The name of the alert definition
              example: My Alert
            notificationGroup:
              $ref: '#/components/schemas/AlertDefNotificationGroup'
            notificationGroupExcess:
              type: array
              items:
                $ref: '#/components/schemas/AlertDefNotificationGroup'
            phantomMode:
              type: boolean
              description: Whether the alert is in phantom mode (creating incidents or not)
              example: false
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            type:
              $ref: '#/components/schemas/AlertDefType'
          additionalProperties: false
          description: User-configurable properties of an alert definition
          externalDocs:
            url: ''
        - title: Alert definition properties
          required:
            - name
            - priority
            - type
          type: object
          properties:
            activeOn:
              $ref: '#/components/schemas/ActivitySchedule'
            deleted:
              type: boolean
              description: Whether the alert has been marked as deleted
              example: false
            description:
              type: string
              description: >-
                A detailed description of what the alert monitors and when it
                triggers
              example: Alert description
            enabled:
              type: boolean
              description: Whether the alert is currently active and monitoring
              example: true
            entityLabels:
              type: object
              additionalProperties:
                type: string
              description: Labels used to identify and categorize the alert entity
              example:
                key: value
            groupByKeys:
              type: array
              items:
                type: string
                description: Keys used to group and aggregate alert data
                example:
                  - key1
                  - key2
            incidentsSettings:
              $ref: '#/components/schemas/AlertDefIncidentSettings'
            metricThreshold:
              $ref: '#/components/schemas/MetricThresholdType'
            name:
              type: string
              description: The name of the alert definition
              example: My Alert
            notificationGroup:
              $ref: '#/components/schemas/AlertDefNotificationGroup'
            notificationGroupExcess:
              type: array
              items:
                $ref: '#/components/schemas/AlertDefNotificationGroup'
            phantomMode:
              type: boolean
              description: Whether the alert is in phantom mode (creating incidents or not)
              example: false
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            type:
              $ref: '#/components/schemas/AlertDefType'
          additionalProperties: false
          description: User-configurable properties of an alert definition
          externalDocs:
            url: ''
        - title: Alert definition properties
          required:
            - name
            - priority
            - type
          type: object
          properties:
            activeOn:
              $ref: '#/components/schemas/ActivitySchedule'
            deleted:
              type: boolean
              description: Whether the alert has been marked as deleted
              example: false
            description:
              type: string
              description: >-
                A detailed description of what the alert monitors and when it
                triggers
              example: Alert description
            enabled:
              type: boolean
              description: Whether the alert is currently active and monitoring
              example: true
            entityLabels:
              type: object
              additionalProperties:
                type: string
              description: Labels used to identify and categorize the alert entity
              example:
                key: value
            groupByKeys:
              type: array
              items:
                type: string
                description: Keys used to group and aggregate alert data
                example:
                  - key1
                  - key2
            incidentsSettings:
              $ref: '#/components/schemas/AlertDefIncidentSettings'
            name:
              type: string
              description: The name of the alert definition
              example: My Alert
            notificationGroup:
              $ref: '#/components/schemas/AlertDefNotificationGroup'
            notificationGroupExcess:
              type: array
              items:
                $ref: '#/components/schemas/AlertDefNotificationGroup'
            phantomMode:
              type: boolean
              description: Whether the alert is in phantom mode (creating incidents or not)
              example: false
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            tracingThreshold:
              $ref: '#/components/schemas/TracingThresholdType'
            type:
              $ref: '#/components/schemas/AlertDefType'
          additionalProperties: false
          description: User-configurable properties of an alert definition
          externalDocs:
            url: ''
        - title: Alert definition properties
          required:
            - name
            - priority
            - type
          type: object
          properties:
            activeOn:
              $ref: '#/components/schemas/ActivitySchedule'
            deleted:
              type: boolean
              description: Whether the alert has been marked as deleted
              example: false
            description:
              type: string
              description: >-
                A detailed description of what the alert monitors and when it
                triggers
              example: Alert description
            enabled:
              type: boolean
              description: Whether the alert is currently active and monitoring
              example: true
            entityLabels:
              type: object
              additionalProperties:
                type: string
              description: Labels used to identify and categorize the alert entity
              example:
                key: value
            flow:
              $ref: '#/components/schemas/FlowType'
            groupByKeys:
              type: array
              items:
                type: string
                description: Keys used to group and aggregate alert data
                example:
                  - key1
                  - key2
            incidentsSettings:
              $ref: '#/components/schemas/AlertDefIncidentSettings'
            name:
              type: string
              description: The name of the alert definition
              example: My Alert
            notificationGroup:
              $ref: '#/components/schemas/AlertDefNotificationGroup'
            notificationGroupExcess:
              type: array
              items:
                $ref: '#/components/schemas/AlertDefNotificationGroup'
            phantomMode:
              type: boolean
              description: Whether the alert is in phantom mode (creating incidents or not)
              example: false
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            type:
              $ref: '#/components/schemas/AlertDefType'
          additionalProperties: false
          description: User-configurable properties of an alert definition
          externalDocs:
            url: ''
        - title: Alert definition properties
          required:
            - name
            - priority
            - type
          type: object
          properties:
            activeOn:
              $ref: '#/components/schemas/ActivitySchedule'
            deleted:
              type: boolean
              description: Whether the alert has been marked as deleted
              example: false
            description:
              type: string
              description: >-
                A detailed description of what the alert monitors and when it
                triggers
              example: Alert description
            enabled:
              type: boolean
              description: Whether the alert is currently active and monitoring
              example: true
            entityLabels:
              type: object
              additionalProperties:
                type: string
              description: Labels used to identify and categorize the alert entity
              example:
                key: value
            groupByKeys:
              type: array
              items:
                type: string
                description: Keys used to group and aggregate alert data
                example:
                  - key1
                  - key2
            incidentsSettings:
              $ref: '#/components/schemas/AlertDefIncidentSettings'
            logsAnomaly:
              $ref: '#/components/schemas/LogsAnomalyType'
            name:
              type: string
              description: The name of the alert definition
              example: My Alert
            notificationGroup:
              $ref: '#/components/schemas/AlertDefNotificationGroup'
            notificationGroupExcess:
              type: array
              items:
                $ref: '#/components/schemas/AlertDefNotificationGroup'
            phantomMode:
              type: boolean
              description: Whether the alert is in phantom mode (creating incidents or not)
              example: false
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            type:
              $ref: '#/components/schemas/AlertDefType'
          additionalProperties: false
          description: User-configurable properties of an alert definition
          externalDocs:
            url: ''
        - title: Alert definition properties
          required:
            - name
            - priority
            - type
          type: object
          properties:
            activeOn:
              $ref: '#/components/schemas/ActivitySchedule'
            deleted:
              type: boolean
              description: Whether the alert has been marked as deleted
              example: false
            description:
              type: string
              description: >-
                A detailed description of what the alert monitors and when it
                triggers
              example: Alert description
            enabled:
              type: boolean
              description: Whether the alert is currently active and monitoring
              example: true
            entityLabels:
              type: object
              additionalProperties:
                type: string
              description: Labels used to identify and categorize the alert entity
              example:
                key: value
            groupByKeys:
              type: array
              items:
                type: string
                description: Keys used to group and aggregate alert data
                example:
                  - key1
                  - key2
            incidentsSettings:
              $ref: '#/components/schemas/AlertDefIncidentSettings'
            metricAnomaly:
              $ref: '#/components/schemas/MetricAnomalyType'
            name:
              type: string
              description: The name of the alert definition
              example: My Alert
            notificationGroup:
              $ref: '#/components/schemas/AlertDefNotificationGroup'
            notificationGroupExcess:
              type: array
              items:
                $ref: '#/components/schemas/AlertDefNotificationGroup'
            phantomMode:
              type: boolean
              description: Whether the alert is in phantom mode (creating incidents or not)
              example: false
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            type:
              $ref: '#/components/schemas/AlertDefType'
          additionalProperties: false
          description: User-configurable properties of an alert definition
          externalDocs:
            url: ''
        - title: Alert definition properties
          required:
            - name
            - priority
            - type
          type: object
          properties:
            activeOn:
              $ref: '#/components/schemas/ActivitySchedule'
            deleted:
              type: boolean
              description: Whether the alert has been marked as deleted
              example: false
            description:
              type: string
              description: >-
                A detailed description of what the alert monitors and when it
                triggers
              example: Alert description
            enabled:
              type: boolean
              description: Whether the alert is currently active and monitoring
              example: true
            entityLabels:
              type: object
              additionalProperties:
                type: string
              description: Labels used to identify and categorize the alert entity
              example:
                key: value
            groupByKeys:
              type: array
              items:
                type: string
                description: Keys used to group and aggregate alert data
                example:
                  - key1
                  - key2
            incidentsSettings:
              $ref: '#/components/schemas/AlertDefIncidentSettings'
            logsNewValue:
              $ref: '#/components/schemas/LogsNewValueType'
            name:
              type: string
              description: The name of the alert definition
              example: My Alert
            notificationGroup:
              $ref: '#/components/schemas/AlertDefNotificationGroup'
            notificationGroupExcess:
              type: array
              items:
                $ref: '#/components/schemas/AlertDefNotificationGroup'
            phantomMode:
              type: boolean
              description: Whether the alert is in phantom mode (creating incidents or not)
              example: false
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            type:
              $ref: '#/components/schemas/AlertDefType'
          additionalProperties: false
          description: User-configurable properties of an alert definition
          externalDocs:
            url: ''
        - title: Alert definition properties
          required:
            - name
            - priority
            - type
          type: object
          properties:
            activeOn:
              $ref: '#/components/schemas/ActivitySchedule'
            deleted:
              type: boolean
              description: Whether the alert has been marked as deleted
              example: false
            description:
              type: string
              description: >-
                A detailed description of what the alert monitors and when it
                triggers
              example: Alert description
            enabled:
              type: boolean
              description: Whether the alert is currently active and monitoring
              example: true
            entityLabels:
              type: object
              additionalProperties:
                type: string
              description: Labels used to identify and categorize the alert entity
              example:
                key: value
            groupByKeys:
              type: array
              items:
                type: string
                description: Keys used to group and aggregate alert data
                example:
                  - key1
                  - key2
            incidentsSettings:
              $ref: '#/components/schemas/AlertDefIncidentSettings'
            logsUniqueCount:
              $ref: '#/components/schemas/LogsUniqueCountType'
            name:
              type: string
              description: The name of the alert definition
              example: My Alert
            notificationGroup:
              $ref: '#/components/schemas/AlertDefNotificationGroup'
            notificationGroupExcess:
              type: array
              items:
                $ref: '#/components/schemas/AlertDefNotificationGroup'
            phantomMode:
              type: boolean
              description: Whether the alert is in phantom mode (creating incidents or not)
              example: false
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            type:
              $ref: '#/components/schemas/AlertDefType'
          additionalProperties: false
          description: User-configurable properties of an alert definition
          externalDocs:
            url: ''
        - title: Alert definition properties
          required:
            - name
            - priority
            - type
          type: object
          properties:
            activeOn:
              $ref: '#/components/schemas/ActivitySchedule'
            deleted:
              type: boolean
              description: Whether the alert has been marked as deleted
              example: false
            description:
              type: string
              description: >-
                A detailed description of what the alert monitors and when it
                triggers
              example: Alert description
            enabled:
              type: boolean
              description: Whether the alert is currently active and monitoring
              example: true
            entityLabels:
              type: object
              additionalProperties:
                type: string
              description: Labels used to identify and categorize the alert entity
              example:
                key: value
            groupByKeys:
              type: array
              items:
                type: string
                description: Keys used to group and aggregate alert data
                example:
                  - key1
                  - key2
            incidentsSettings:
              $ref: '#/components/schemas/AlertDefIncidentSettings'
            name:
              type: string
              description: The name of the alert definition
              example: My Alert
            notificationGroup:
              $ref: '#/components/schemas/AlertDefNotificationGroup'
            notificationGroupExcess:
              type: array
              items:
                $ref: '#/components/schemas/AlertDefNotificationGroup'
            phantomMode:
              type: boolean
              description: Whether the alert is in phantom mode (creating incidents or not)
              example: false
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            sloThreshold:
              $ref: '#/components/schemas/SloThresholdType'
            type:
              $ref: '#/components/schemas/AlertDefType'
          additionalProperties: false
          description: User-configurable properties of an alert definition
          externalDocs:
            url: ''
    AlertDefProperties.EntityLabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    AlertDefQueryFilter:
      title: AlertDef query filter
      type: object
      properties:
        enabledFilter:
          $ref: '#/components/schemas/AlertDefEnabledFilter'
        entityLabelsFilter:
          $ref: '#/components/schemas/AlertDefEntityLabelsFilter'
        lastTriggeredTimeRangeFilter:
          $ref: '#/components/schemas/AlertDefLastTriggeredTimeFilter'
        modifiedTimeRangeFilter:
          $ref: '#/components/schemas/AlertDefModifiedTimeFilter'
        nameFilter:
          $ref: '#/components/schemas/AlertDefNameFilter'
        priorityFilter:
          $ref: '#/components/schemas/AlertDefPriorityFilter'
        statusFilter:
          $ref: '#/components/schemas/AlertDefStatusFilter'
        typeFilter:
          $ref: '#/components/schemas/AlertDefTypeFilter'
        typeSpecificFilter:
          $ref: '#/components/schemas/AlertDefTypeSpecificFilter'
      description: Filter configuration for alert defs
      externalDocs:
        url: ''
    AlertDefSeverity:
      title: Alert definition severity
      required:
        - severity
        - priority
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/AlertDefPriority'
        severity:
          type: integer
          format: int32
          example: 3
      description: Defines the severity level and priority of an alert
      externalDocs:
        url: ''
    AlertDefSloSpecificFilter:
      title: AlertDef SLO Specific Filter
      required:
        - sloId
        - matcher
      type: object
      properties:
        matcher:
          $ref: '#/components/schemas/alerts.v3.FilterMatcher'
        sloId:
          type: array
          items:
            type: string
            description: The SLO ID(s) to filter by - multiple values are OR'd together
            example:
              - 123e4567-e89b-12d3-a456-426614174000
      description: Filter SLO-based alerts by SLO-specific fields
      externalDocs:
        url: ''
    AlertDefStatus:
      enum:
        - ALERT_DEF_STATUS_UNSPECIFIED
        - ALERT_DEF_STATUS_ALERTING
        - ALERT_DEF_STATUS_OK
        - ALERT_DEF_STATUS_NO_DATA
      type: string
    AlertDefStatusFilter:
      title: AlertDef Status Filter
      required:
        - status
        - matcher
      type: object
      properties:
        matcher:
          $ref: '#/components/schemas/alerts.v3.FilterMatcher'
        status:
          type: array
          items:
            $ref: '#/components/schemas/AlertDefStatus'
      description: Filter by alert definition status
      externalDocs:
        url: ''
    AlertDefToReplace:
      title: Alert definition to replace
      required:
        - id
        - alertDefProperties
      type: object
      properties:
        alertDefProperties:
          $ref: '#/components/schemas/AlertDefProperties'
        id:
          type: string
          description: The alert definition ID
          example: 123e4567-e89b-12d3-a456-426614174000
      description: An alert definition along with its ID for replacement
      externalDocs:
        url: ''
    AlertDefType:
      enum:
        - ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED
        - ALERT_DEF_TYPE_LOGS_THRESHOLD
        - ALERT_DEF_TYPE_LOGS_ANOMALY
        - ALERT_DEF_TYPE_LOGS_RATIO_THRESHOLD
        - ALERT_DEF_TYPE_LOGS_NEW_VALUE
        - ALERT_DEF_TYPE_LOGS_UNIQUE_COUNT
        - ALERT_DEF_TYPE_LOGS_TIME_RELATIVE_THRESHOLD
        - ALERT_DEF_TYPE_METRIC_THRESHOLD
        - ALERT_DEF_TYPE_METRIC_ANOMALY
        - ALERT_DEF_TYPE_TRACING_IMMEDIATE
        - ALERT_DEF_TYPE_TRACING_THRESHOLD
        - ALERT_DEF_TYPE_FLOW
        - ALERT_DEF_TYPE_SLO_THRESHOLD
      type: string
    AlertDefTypeFilter:
      title: AlertDef Type Filter
      required:
        - type
        - matcher
      type: object
      properties:
        matcher:
          $ref: '#/components/schemas/alerts.v3.FilterMatcher'
        type:
          type: array
          items:
            $ref: '#/components/schemas/AlertDefType'
      description: Filter by alert definition types
      externalDocs:
        url: ''
    AlertDefTypeSpecificFilter:
      title: AlertDef Type Specific Filter
      type: object
      properties:
        sloFilter:
          $ref: '#/components/schemas/AlertDefSloSpecificFilter'
      additionalProperties: false
      description: Filter by fields specific to alert type definitions
      externalDocs:
        url: ''
    AlertDefWebhooksSettings:
      title: Alert definition webhook settings
      required:
        - integration
      type: object
      properties:
        integration:
          $ref: '#/components/schemas/v3.IntegrationType'
        minutes:
          type: integer
          description: The time in minutes before the alert can be retriggered
          format: int64
          example: 15
        notifyOn:
          $ref: '#/components/schemas/NotifyOn'
      additionalProperties: false
      description: Configuration for webhook notifications for an alert
      externalDocs:
        url: ''
    AlertDefsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/AlertDef'
    AlertEvent:
      title: Alert event
      required:
        - permutationLabels
        - groupLabels
        - timestamp
        - alertId
        - status
        - preGroupingEventId
        - payload
        - payloadType
        - permutationId
        - incidentCorrelationKey
        - activityAnalysis
      type: object
      properties:
        activityAnalysis:
          $ref: '#/components/schemas/ActivityAnalysis'
        alertId:
          type: string
        groupLabels:
          type: object
          additionalProperties:
            type: string
        incidentCorrelationKey:
          type: string
        payload:
          type: object
        payloadType:
          type: string
        permutationId:
          type: string
        permutationLabels:
          type: object
          additionalProperties:
            type: string
        preGroupingEventId:
          type: string
        status:
          $ref: '#/components/schemas/AlertStatus'
        timestamp:
          type: string
          format: date-time
      additionalProperties: false
      externalDocs:
        url: ''
    AlertEvent.PermutationLabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    AlertEventMultiplePermutation:
      type: object
      properties:
        alertEventMultiplePermutation:
          type: array
          items:
            $ref: '#/components/schemas/AlertEvent'
    AlertEventOrderBy:
      type: object
      properties:
        direction:
          $ref: '#/components/schemas/OrderByAlertEventDirection'
        fieldName:
          $ref: '#/components/schemas/OrderByAlertEventFields'
    AlertEventOut:
      type: object
      properties:
        alertId:
          type: string
        eventId:
          type: string
        timestamp:
          type: string
          format: date-time
    AlertEventPayload:
      type: object
      properties:
        payload:
          type: object
        payloadType:
          type: string
    AlertNotificationEvent:
      title: Alert notification event
      required:
        - timestamp
        - id
        - status
        - attachments
        - groups
        - groupingKey
        - highestPriority
      type: object
      properties:
        attachments:
          $ref: '#/components/schemas/Attachments'
        groupingKey:
          type: string
        groups:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v3.Group'
        highestPriority:
          $ref: '#/components/schemas/v3.Priority'
        id:
          type: string
        status:
          $ref: '#/components/schemas/AlertStatus'
        timestamp:
          type: string
          format: date-time
      externalDocs:
        url: ''
    AlertSchedulerRule:
      type: object
      properties:
        createdAt:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        filter:
          $ref: '#/components/schemas/alert_scheduler_rule_protobuf.v1.Filter'
        id:
          type: string
        metaLabels:
          type: array
          items:
            $ref: '#/components/schemas/meta_labels_protobuf.v1.MetaLabel'
        name:
          type: string
        schedule:
          $ref: '#/components/schemas/Schedule'
        uniqueIdentifier:
          type: string
        updatedAt:
          type: string
      additionalProperties: false
    AlertSchedulerRuleIds:
      type: object
      properties:
        alertSchedulerRuleIds:
          type: array
          items:
            type: string
    AlertSchedulerRuleVersionIds:
      type: object
      properties:
        alertSchedulerRuleVersionIds:
          type: array
          items:
            type: string
    AlertSchedulerRuleWithActiveTimeframe:
      type: object
      properties:
        alertSchedulerRule:
          $ref: '#/components/schemas/AlertSchedulerRule'
        nextActiveTimeframes:
          type: array
          items:
            $ref: '#/components/schemas/ActiveTimeframe'
    AlertStatus:
      enum:
        - ALERT_STATUS_RESOLVED_OR_UNSPECIFIED
        - ALERT_STATUS_TRIGGERED
      type: string
    AlertUniqueIds:
      type: object
      properties:
        value:
          type: array
          items:
            type: string
    AlertsOp:
      enum:
        - ALERTS_OP_AND_OR_UNSPECIFIED
        - ALERTS_OP_OR
      type: string
    AllOption:
      type: object
      properties:
        includeAll:
          type: boolean
        label:
          type: string
    AllValue:
      type: object
    AllWidgets:
      type: object
    AllowParameters:
      type: object
      properties:
        keepBlockedLogs:
          type: boolean
        rule:
          type: string
    Always:
      type: object
    Annotation:
      type: object
      properties:
        description:
          type: string
        enabled:
          type: boolean
        id:
          type: string
        name:
          type: string
        scope:
          $ref: '#/components/schemas/WidgetScope'
        source:
          $ref: '#/components/schemas/Annotation.Source'
    Annotation.Source:
      oneOf:
        - type: object
          properties:
            metrics:
              $ref: '#/components/schemas/MetricsSource'
          additionalProperties: false
        - type: object
          properties:
            logs:
              $ref: '#/components/schemas/LogsSource'
          additionalProperties: false
        - type: object
          properties:
            spans:
              $ref: '#/components/schemas/SpansSource'
          additionalProperties: false
        - type: object
          properties:
            dataprime:
              $ref: '#/components/schemas/DataprimeSource'
          additionalProperties: false
        - type: object
          properties:
            manual:
              $ref: '#/components/schemas/ManualSource'
          additionalProperties: false
    AnnotationEvent:
      oneOf:
        - type: object
          properties:
            instant:
              $ref: '#/components/schemas/AnnotationEvent.Instant'
          additionalProperties: false
        - type: object
          properties:
            range:
              $ref: '#/components/schemas/AnnotationEvent.Range'
          additionalProperties: false
    AnnotationEvent.Instant:
      type: object
      properties:
        labels:
          type: object
          additionalProperties:
            type: string
        payload:
          type: object
        timestamp:
          type: string
          format: date-time
    AnnotationEvent.Range:
      type: object
      properties:
        end:
          type: string
          format: date-time
        labels:
          type: object
          additionalProperties:
            type: string
        payload:
          type: object
        start:
          type: string
          format: date-time
    AnnotationOrientation:
      enum:
        - ANNOTATION_ORIENTATION_VERTICAL_UNSPECIFIED
        - ANNOTATION_ORIENTATION_HORIZONTAL
      type: string
    AnomalyAlertSettings:
      title: Anomaly alert settings
      type: object
      properties:
        percentageOfDeviation:
          type: number
          description: >-
            The percentage of deviation from the baseline for triggering the
            alert.
          format: float
      description: Common settings for anomaly-based alerts.
      externalDocs:
        url: ''
    ApiKeyData:
      title: API key data
      type: object
      properties:
        id:
          type: string
        value:
          type: string
      additionalProperties: false
      externalDocs:
        url: ''
    ApplicationNameConstraint:
      type: object
      properties:
        value:
          type: string
    ArchiveRetention:
      type: object
      properties:
        id:
          type: string
    ArchiveSpec:
      title: Archive Spec
      required:
        - bucket
      type: object
      properties:
        archivingFormatId:
          type: string
          example: json_id
        enableTags:
          type: boolean
          example: true
        isActive:
          type: boolean
          example: true
      description: This data structure contains metadata about the archive.
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    ArchiveTarget:
      oneOf:
        - type: object
          properties:
            enableTags:
              type: boolean
            filenamePrefix:
              type: string
            format:
              $ref: '#/components/schemas/Format'
            maxCompactionLevel:
              type: integer
              format: int32
            partitioningScheme:
              $ref: '#/components/schemas/PartitioningScheme'
            prefix:
              type: string
            providerType:
              $ref: '#/components/schemas/ProviderType'
            s3:
              $ref: '#/components/schemas/S3TargetSpec'
            tags:
              type: array
              items:
                $ref: '#/components/schemas/ObjectTag'
          additionalProperties: false
        - type: object
          properties:
            enableTags:
              type: boolean
            filenamePrefix:
              type: string
            format:
              $ref: '#/components/schemas/Format'
            ibmCos:
              $ref: '#/components/schemas/IBMCosTargetSpec'
            maxCompactionLevel:
              type: integer
              format: int32
            partitioningScheme:
              $ref: '#/components/schemas/PartitioningScheme'
            prefix:
              type: string
            providerType:
              $ref: '#/components/schemas/ProviderType'
            tags:
              type: array
              items:
                $ref: '#/components/schemas/ObjectTag'
          additionalProperties: false
    AssignDashboardFolderRequest:
      title: Assign dashboard to folder request data structure
      required:
        - requestId
        - dashboardId
      type: object
      properties:
        dashboardId:
          type: string
        folderId:
          type: string
        requestId:
          type: string
      description: This is a request for assigning a folder to a dashboard
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    AssignDashboardFolderResponse:
      title: Assign dashboard to folder response data structure
      type: object
      description: >-
        This is a response confirming that folder has been successfully assigned
        to a dashboard
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    AssignIncidentsRequest:
      title: Assign incidents request
      required:
        - incidentIds
        - assignedTo
      type: object
      properties:
        assignedTo:
          $ref: '#/components/schemas/UserDetails'
        incidentIds:
          type: array
          items:
            type: string
            description: List of incident IDs to assign
            example:
              - incident_id_1
              - incident_id_2
      description: Request to assign one or more incidents to a user
      externalDocs:
        url: ''
    AssignIncidentsResponse:
      title: Assign incidents response
      required:
        - incidents
      type: object
      properties:
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/Incident'
      description: Response containing the updated incidents after assignment
      externalDocs:
        url: ''
    AssigneeWithCount:
      title: Assignee with count
      required:
        - assignee
        - count
      type: object
      properties:
        assignee:
          type: string
          example: assignee
        count:
          type: integer
          format: int32
          example: 10
      externalDocs:
        url: ''
    Assignment:
      title: Assignment
      required:
        - assignedTo
        - assignedBy
      type: object
      properties:
        assignedBy:
          $ref: '#/components/schemas/UserDetails'
        assignedTo:
          $ref: '#/components/schemas/UserDetails'
      description: >-
        Details of the user who assigned the incident and the user to whom it
        was assigned
      externalDocs:
        url: ''
    AtomicBatchCreatePolicyRequest:
      type: object
      properties:
        policyRequests:
          type: array
          items:
            $ref: '#/components/schemas/CreatePolicyRequest'
    AtomicBatchCreatePolicyResponse:
      type: object
      properties:
        createResponses:
          type: array
          items:
            $ref: '#/components/schemas/CreatePolicyResponse'
    AtomicBatchExecuteActionsRequest:
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/ActionExecutionRequest'
    AtomicBatchExecuteActionsResponse:
      type: object
      properties:
        matchingResponses:
          type: array
          items:
            $ref: '#/components/schemas/ActionExecutionResponse'
    AtomicBatchExecuteE2MRequest:
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/E2MExecutionRequest'
    AtomicBatchExecuteE2MResponse:
      type: object
      properties:
        matchingResponses:
          type: array
          items:
            $ref: '#/components/schemas/E2MExecutionResponse'
    AtomicOverwriteEnrichmentsRequest:
      type: object
      properties:
        enrichmentFields:
          type: array
          items:
            $ref: '#/components/schemas/EnrichmentFieldDefinition'
        enrichmentType:
          $ref: '#/components/schemas/EnrichmentType'
        requestEnrichments:
          type: array
          items:
            $ref: '#/components/schemas/EnrichmentRequestModel'
    AtomicOverwriteEnrichmentsResponse:
      type: object
      properties:
        enrichments:
          type: array
          items:
            $ref: '#/components/schemas/Enrichment'
    AtomicOverwriteLogPoliciesRequest:
      type: object
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/CreateLogPolicyRequest'
    AtomicOverwriteLogPoliciesResponse:
      type: object
      properties:
        createResponses:
          type: array
          items:
            $ref: '#/components/schemas/CreatePolicyResponse'
    AtomicOverwriteSpanPoliciesRequest:
      type: object
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/CreateSpanPolicyRequest'
    AtomicOverwriteSpanPoliciesResponse:
      type: object
      properties:
        createResponses:
          type: array
          items:
            $ref: '#/components/schemas/CreatePolicyResponse'
    Attachment:
      title: Slack attachment configuration
      required:
        - type
      type: object
      properties:
        isActive:
          type: boolean
        type:
          $ref: '#/components/schemas/AttachmentType'
      externalDocs:
        url: ''
    AttachmentType:
      enum:
        - EMPTY
        - METRIC_SNAPSHOT
        - LOGS
      type: string
    Attachments:
      title: Alert notification attachments
      required:
        - logExample
      type: object
      properties:
        logExample:
          type: string
      externalDocs:
        url: ''
    AuditLogDescription:
      type: object
      properties:
        description:
          type: string
    AutoRefreshFiveMinutes:
      type: object
    AutoRefreshOff:
      type: object
    AutoRefreshTwoMinutes:
      type: object
    Average:
      type: object
      properties:
        field:
          type: string
        observationField:
          $ref: '#/components/schemas/ObservationField'
    AwsEventBridgeConfig:
      title: AWS EventBridge configuration
      required:
        - eventBusArn
        - detail
        - detailType
        - source
        - roleName
      type: object
      properties:
        detail:
          type: string
          example:
            key: value
        detailType:
          type: string
          example: detail_type
        eventBusArn:
          type: string
          example: arn:aws:events:us-east-1:123456789012:event-bus/default
        roleName:
          type: string
          example: role_name
        source:
          type: string
          example: source
      externalDocs:
        url: ''
    AwsType:
      type: object
      properties:
        resourceType:
          type: string
          example: ec2
    AzureArm:
      title: Azure ARM
      type: object
      description: This data structure represents an Azure ARM integration.
      externalDocs:
        url: ''
    AzureArmTemplate:
      title: Azure ARM template
      type: object
      properties:
        templateUrl:
          type: string
      description: This data structure represents an azure ARM template.
      externalDocs:
        url: ''
    BarChart:
      title: BarChart
      type: object
      properties:
        barValueDisplay:
          $ref: '#/components/schemas/widgets.BarValueDisplay'
        colorScheme:
          type: string
          description: Applied color scheme, one of the predefined values
          example: classic
        colorsBy:
          $ref: '#/components/schemas/ColorsBy'
        customUnit:
          type: string
          description: >-
            Custom unit (requires to have unit field set to custom to take
            effect)
          example: mph
        dataModeType:
          $ref: '#/components/schemas/widgets.common.DataModeType'
        decimal:
          type: integer
          description: >-
            Number indicating the decimal precision of the numeric values,
            within range 0-15
          format: int32
          example: 4
        decimalPrecision:
          type: boolean
          description: Whether to render numeric value without abbreviation
          example: false
        groupNameTemplate:
          type: string
          description: Custom template name for a bar group, can contain variables
          example: Result - {{ variable }}
        hashColors:
          type: boolean
          description: Whether to ignore color scheme and derive colors from algorithm
          example: false
        legend:
          $ref: '#/components/schemas/Legend'
        maxBarsPerChart:
          type: integer
          description: Maximum number of bars on a chart
          format: int32
          example: 20
        query:
          $ref: '#/components/schemas/BarChart.Query'
        scaleType:
          $ref: '#/components/schemas/ScaleType'
        sortBy:
          $ref: '#/components/schemas/SortByType'
        stackDefinition:
          $ref: '#/components/schemas/BarChart.StackDefinition'
        unit:
          $ref: '#/components/schemas/common.Unit'
        xAxis:
          $ref: '#/components/schemas/XAxis'
        yAxisMax:
          type: number
          description: Number indicating the upper band for y axis
          format: float
          example: 1000
        yAxisMin:
          type: number
          description: Number indicating the lower band for y axis
          format: float
          example: -1000
      description: BarChart represents the configuration of a vertical bar chart widget.
      externalDocs:
        url: ''
    BarChart.DataprimeQuery:
      title: DataprimeQuery
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/common.DataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter.Source'
        groupNames:
          type: array
          items:
            type: string
            description: List of field names by which results are grouped
        stackedGroupName:
          type: string
          description: Field name by which results in groups are divided into subgroups
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A Dataprime variant of the query
      externalDocs:
        url: ''
    BarChart.LogsQuery:
      title: LogsQuery
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/LogsAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter.LogsFilter'
        groupNames:
          type: array
          items:
            type: string
            description: List of field names to group the query results
        groupNamesFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
        stackedGroupName:
          type: string
          description: Field name by which results are stacked in individual group
        stackedGroupNameField:
          $ref: '#/components/schemas/ObservationField'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A logs variant of the query
      externalDocs:
        url: ''
    BarChart.MetricsQuery:
      title: MetricsQuery
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/common.Aggregation'
        editorMode:
          $ref: '#/components/schemas/MetricsQueryEditorMode'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/MetricsFilter'
        groupNames:
          type: array
          items:
            type: string
            description: List of field names by which metric results are grouped
        promqlQuery:
          $ref: '#/components/schemas/PromQlQuery'
        promqlQueryType:
          $ref: '#/components/schemas/PromQLQueryType'
        stackedGroupName:
          type: string
          description: Field name by which results in groups are divided into subgroups
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A metrics variant of the query
      externalDocs:
        url: ''
    BarChart.Query:
      oneOf:
        - type: object
          properties:
            logs:
              $ref: '#/components/schemas/BarChart.LogsQuery'
          additionalProperties: false
        - type: object
          properties:
            spans:
              $ref: '#/components/schemas/BarChart.SpansQuery'
          additionalProperties: false
        - type: object
          properties:
            metrics:
              $ref: '#/components/schemas/BarChart.MetricsQuery'
          additionalProperties: false
        - type: object
          properties:
            dataprime:
              $ref: '#/components/schemas/BarChart.DataprimeQuery'
          additionalProperties: false
    BarChart.SpansQuery:
      title: SpansQuery
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/SpansAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/SpansFilter'
        groupNames:
          type: array
          items:
            $ref: '#/components/schemas/SpanField'
        groupNamesFields:
          type: array
          items:
            $ref: '#/components/schemas/SpanObservationField'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
        stackedGroupName:
          $ref: '#/components/schemas/SpanField'
        stackedGroupNameField:
          $ref: '#/components/schemas/SpanObservationField'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A spans variant of the query
      externalDocs:
        url: ''
    BarChart.StackDefinition:
      type: object
      properties:
        maxSlicesPerBar:
          type: integer
          description: How many slices can fit in a single bar
          format: int32
        stackNameTemplate:
          type: string
          description: Custom template name of an individual stack
    BatchExecuteSloRequest:
      title: BatchExecuteSloRequest
      required:
        - requests
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/SloExecutionRequest'
      description: Request to batch execute multiple SLO operations.
      externalDocs:
        url: ''
    BatchExecuteSloResponse:
      title: BatchExecuteSloResponse
      required:
        - matchingResponses
      type: object
      properties:
        matchingResponses:
          type: array
          items:
            $ref: '#/components/schemas/SloExecutionResponse'
        status:
          $ref: '#/components/schemas/ResponseStatus'
      description: Response containing the results of batch executed SLO operations.
      externalDocs:
        url: ''
    BatchGetAlertDefRequest:
      title: Batch get alert definitions request
      required:
        - ids
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
            example:
              - 123e4567-e89b-12d3-a456-426614174000
      description: A request to retrieve multiple alert definitions by their IDs
      externalDocs:
        url: ''
    BatchGetAlertDefResponse:
      title: Batch get alert definitions response
      required:
        - alertDefs
        - notFoundIds
      type: object
      properties:
        alertDefs:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AlertDef'
          description: Map of alert definition IDs to alert definitions
          example:
            123e4567-e89b-12d3-a456-426614174000: {}
        notFoundIds:
          type: array
          items:
            type: string
            example:
              - alert-789
      description: >-
        A response that contains the requested alert definitions and not-found
        alert IDs
      externalDocs:
        url: ''
    BatchGetConnectorSummariesRequest:
      title: Batch Get Connector Summaries Request
      type: object
      properties:
        connectorIds:
          type: array
          items:
            type: string
      description: Request to retrieve multiple connector summaries by their IDs
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    BatchGetConnectorSummariesResponse:
      title: Batch Get Connector Summaries Response
      type: object
      properties:
        connectorSummaries:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ConnectorSummary'
        notFoundIds:
          type: array
          items:
            type: string
            example:
              - connector-id-3
      description: >-
        Response containing the requested connector summaries and any IDs not
        found
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    BatchGetConnectorsRequest:
      title: Batch Get Connectors Request
      type: object
      properties:
        connectorIds:
          type: array
          items:
            type: string
            example:
              - connector-id-1
              - connector-id-2
      description: Request to retrieve multiple connectors by their IDs
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    BatchGetConnectorsResponse:
      title: Batch Get Connectors Response
      type: object
      properties:
        connectors:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Connector'
        notFoundIds:
          type: array
          items:
            type: string
            example:
              - connector-id-3
      description: Response containing the requested connectors and any IDs not found
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    BatchGetEventRequest:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/EventsQueryFilter'
        ids:
          type: array
          items:
            type: string
        orderBys:
          type: array
          items:
            $ref: '#/components/schemas/events.v3.OrderBy'
        pagination:
          $ref: '#/components/schemas/events.v3.PaginationRequest'
    BatchGetEventResponse:
      type: object
      properties:
        events:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CxEventSingleOrMultiple'
        notFoundIds:
          type: array
          items:
            type: string
        pagination:
          $ref: '#/components/schemas/events.v3.PaginationResponse'
    BatchGetGlobalRoutersRequest:
      title: Batch Get Global Routers Request
      type: object
      properties:
        globalRouterIds:
          type: array
          items:
            type: string
      description: Get global routers by provided identifiers
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    BatchGetGlobalRoutersResponse:
      title: Batch Get Global Routers Response
      type: object
      properties:
        notFoundIds:
          type: array
          items:
            type: string
            example:
              - global-router-id-3
        routers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/GlobalRouter'
      description: >-
        Response containing requested global routers and missing global routers
        ids
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    BatchGetIncidentRequest:
      title: Batch get incidents request
      required:
        - ids
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
      description: Request to get multiple incidents by their IDs
      externalDocs:
        url: ''
    BatchGetIncidentResponse:
      title: Batch get incidents response
      required:
        - incidents
        - notFoundIds
      type: object
      properties:
        incidents:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Incident'
          description: Map of incident IDs to their corresponding incidents
        notFoundIds:
          type: array
          items:
            type: string
            description: List of IDs that were not found
            example:
              - not_found_id_1
              - not_found_id_2
      description: >-
        Response containing the requested incidents and any IDs that weren't
        found
      externalDocs:
        url: ''
    BatchGetPresetsRequest:
      title: Batch Get Presets Request
      type: object
      properties:
        presetIds:
          type: array
          items:
            type: string
      description: Request to get multiple presets by their ids
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    BatchGetPresetsResponse:
      title: Batch Get Presets Response
      type: object
      properties:
        notFoundIds:
          type: array
          items:
            type: string
        presets:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Preset'
      description: Response containing the requested presets and any IDs not found
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    BatchGetServiceSlosRequest:
      title: Batch Get Service SLOs Request
      required:
        - ids
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
            example:
              - slo_id1
              - slo_id2
      description: This data structure represents a request to batch get Service SLOs.
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
    BatchGetServiceSlosResponse:
      title: Batch Get Service SLOs Response
      required:
        - slos
      type: object
      properties:
        notFoundIds:
          type: array
          items:
            type: string
            example:
              - slo_id1
              - slo_id2
        slos:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ServiceSlo'
      description: This data structure represents a response to batch get Service SLOs.
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
    BatchGetSlosRequest:
      title: BatchGetSlosRequest
      required:
        - ids
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
      description: Request to retrieve multiple SLOs by their IDs.
      externalDocs:
        url: ''
    BatchGetSlosResponse:
      title: BatchGetSlosResponse
      required:
        - slos
      type: object
      properties:
        notFoundIds:
          type: array
          items:
            type: string
        slos:
          type: array
          items:
            $ref: '#/components/schemas/Slo'
      description: Response containing a batch of SLOs and any IDs not found.
      externalDocs:
        url: ''
    BlockParameters:
      type: object
      properties:
        keepBlockedLogs:
          type: boolean
        rule:
          type: string
    BooleanOperator:
      enum:
        - BOOLEAN_OPERATOR_AND_UNSPECIFIED
        - BOOLEAN_OPERATOR_OR
      type: string
    BulkDeleteRuleGroupRequest:
      type: object
      properties:
        groupIds:
          type: array
          items:
            type: string
    BulkDeleteRuleGroupResponse:
      type: object
    BulkReplaceAlertDefsRequest:
      title: Bulk replace alert definitions request
      required:
        - alertDefsToReplace
      type: object
      properties:
        alertDefsToReplace:
          type: array
          items:
            $ref: '#/components/schemas/AlertDefToReplace'
      description: A request to bulk replace multiple alert definitions
      externalDocs:
        url: ''
    BulkReplaceAlertDefsResponse:
      title: Bulk replace alert definitions response
      required:
        - alertDefs
        - notFoundIds
        - failedToReplaceAlertDefs
        - skippedIds
      type: object
      properties:
        alertDefs:
          type: array
          items:
            $ref: '#/components/schemas/AlertDef'
        failedToReplaceAlertDefs:
          type: array
          items:
            $ref: '#/components/schemas/FailedToReplaceAlertDef'
        notFoundIds:
          type: array
          items:
            type: string
            description: List of alert definition IDs that were not found
            example:
              - 123e4567-e89b-12d3-a456-426614174000
        skippedIds:
          type: array
          items:
            type: string
            description: >-
              List of alert definition IDs that were skipped (no changes
              detected)
            example:
              - 123e4567-e89b-12d3-a456-426614174000
      description: A response that contains the results of the bulk replace operation
      externalDocs:
        url: ''
    BulkTestLogPoliciesRequest:
      type: object
      properties:
        metaFieldsValuesList:
          type: array
          items:
            $ref: '#/components/schemas/LogMetaFieldsValues'
    BulkTestLogPoliciesResponse:
      type: object
      properties:
        testPoliciesBulkResult:
          type: array
          items:
            $ref: '#/components/schemas/TestPoliciesResult'
    BurnRateAlertDefinition:
      oneOf:
        - type: object
          properties:
            dual:
              $ref: '#/components/schemas/BurnRateAlertTypeDual'
          additionalProperties: false
        - type: object
          properties:
            single:
              $ref: '#/components/schemas/BurnRateAlertTypeSingle'
          additionalProperties: false
    BurnRateAlertTypeDual:
      type: object
      properties:
        longWindow:
          type: string
        shortWindow:
          type: string
        thresholds:
          type: array
          items:
            type: number
            format: double
    BurnRateAlertTypeSingle:
      type: object
      properties:
        thresholds:
          type: array
          items:
            type: number
            format: double
        window:
          type: string
    BurnRateMetricTypeDual:
      type: object
      properties:
        longMetricFilter:
          $ref: '#/components/schemas/SloMetricFilter'
        shortMetricFilter:
          $ref: '#/components/schemas/SloMetricFilter'
    BurnRateMetricTypeSingle:
      type: object
      properties:
        metricFilter:
          $ref: '#/components/schemas/SloMetricFilter'
    BurnRateThreshold:
      oneOf:
        - title: Burn Rate Threshold
          required:
            - rules
          type: object
          properties:
            dual:
              $ref: '#/components/schemas/BurnRateTypeDual'
            rules:
              type: array
              items:
                $ref: '#/components/schemas/SloThresholdRule'
          additionalProperties: false
          description: Burn rate threshold definition
          externalDocs:
            url: ''
        - title: Burn Rate Threshold
          required:
            - rules
          type: object
          properties:
            rules:
              type: array
              items:
                $ref: '#/components/schemas/SloThresholdRule'
            single:
              $ref: '#/components/schemas/BurnRateTypeSingle'
          additionalProperties: false
          description: Burn rate threshold definition
          externalDocs:
            url: ''
    BurnRateTypeDual:
      title: Burn Rate Type Dual
      required:
        - timeDuration
      type: object
      properties:
        timeDuration:
          $ref: '#/components/schemas/TimeDuration'
      description: Burn rate type dual definition
      externalDocs:
        url: ''
    BurnRateTypeSingle:
      title: Burn Rate Type Single
      required:
        - timeDuration
      type: object
      properties:
        timeDuration:
          $ref: '#/components/schemas/TimeDuration'
      description: Burn rate type single definition
      externalDocs:
        url: ''
    ChangelogEntry:
      title: Changelog entry
      required:
        - version
        - descriptionMd
      type: object
      properties:
        descriptionMd:
          type: string
        version:
          type: string
      externalDocs:
        url: ''
    CleanupTestingRevisionRequest:
      title: Cleanup testing revision request
      required:
        - id
      type: object
      properties:
        id:
          type: string
      externalDocs:
        url: ''
    CleanupTestingRevisionResponse:
      title: Cleanup testing revision response
      type: object
      externalDocs:
        url: ''
    CloseIncidentsRequest:
      title: Close incidents request
      required:
        - incidentIds
      type: object
      properties:
        incidentIds:
          type: array
          items:
            type: string
            description: List of incident IDs to close
            example:
              - incident_id_1
              - incident_id_2
      description: Request to close one or more incidents
      externalDocs:
        url: ''
    CloseIncidentsResponse:
      title: Close incidents response
      required:
        - incidents
      type: object
      properties:
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/Incident'
      description: Response containing the updated incidents after closing
      externalDocs:
        url: ''
    CloudFormationStack:
      title: CloudFormation stack
      type: object
      properties:
        arn:
          type: string
        region:
          type: string
      description: This data structure represents a CloudFormation stack.
      externalDocs:
        description: >-
          Find out more about the AWS CloudFormation integration in our
          documentation
        url: https://coralogix.com/docs/integrations/aws/aws-cloudformation-logs/
    CloudFormationTemplate:
      title: CloudFormation template
      type: object
      properties:
        commands:
          type: array
          items:
            $ref: '#/components/schemas/CommandInformation'
        parameters:
          type: object
          additionalProperties:
            type: string
        postInstallationSteps:
          type: object
          additionalProperties:
            type: string
        templateUrl:
          type: string
      externalDocs:
        url: ''
    Cloudformation:
      title: CloudFormation
      type: object
      description: This data structure represents a CloudFormation integration.
      externalDocs:
        url: ''
    Code:
      enum:
        - OK
        - CANCELLED
        - UNKNOWN
        - INVALID_ARGUMENT
        - DEADLINE_EXCEEDED
        - NOT_FOUND
        - ALREADY_EXISTS
        - PERMISSION_DENIED
        - UNAUTHENTICATED
        - RESOURCE_EXHAUSTED
        - FAILED_PRECONDITION
        - ABORTED
        - OUT_OF_RANGE
        - UNIMPLEMENTED
        - INTERNAL
        - UNAVAILABLE
        - DATA_LOSS
      type: string
    ColorsBy:
      oneOf:
        - type: object
          properties:
            stack:
              $ref: '#/components/schemas/ColorsByStack'
          additionalProperties: false
        - type: object
          properties:
            groupBy:
              $ref: '#/components/schemas/ColorsByGroupBy'
          additionalProperties: false
        - type: object
          properties:
            aggregation:
              $ref: '#/components/schemas/ColorsByAggregation'
          additionalProperties: false
    ColorsByAggregation:
      type: object
    ColorsByGroupBy:
      type: object
    ColorsByStack:
      type: object
    CommandInformation:
      title: Command information
      type: object
      properties:
        command:
          type: string
        description:
          type: string
        language:
          $ref: '#/components/schemas/Language'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
        tooltipText:
          type: string
      additionalProperties: false
      externalDocs:
        url: ''
    CommonARMParams:
      title: Common ARM integration parameters
      required:
        - logsUrl
        - apiKey
        - cgxDomain
      type: object
      properties:
        apiKey:
          type: string
        cgxDomain:
          type: string
        logsUrl:
          type: string
      externalDocs:
        url: ''
    CompanyArchiveConfig:
      title: Common Archive Config
      required:
        - target
      type: object
      properties:
        archiveConfigured:
          type: boolean
          example: true
        companyId:
          type: integer
          format: int64
          example: 1234567
      description: >-
        This data structure represents a common archive configuration for a
        company within the organization.
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    CompanyEnrichmentSettings:
      type: object
      properties:
        enrichmentAmountLimit:
          type: integer
          format: int64
        enrichmentsInUse:
          type: integer
          format: int64
        queryOnlyRowLimit:
          type: integer
          format: int64
        queryOnlySizeLimitBytes:
          type: string
          format: int64
        rowLimit:
          type: integer
          format: int64
        sizeLimitBytes:
          type: string
          format: int64
    CompanyIpAccessSettings:
      title: Company IP access settings
      type: object
      properties:
        enableCoralogixCustomerSupportAccess:
          $ref: '#/components/schemas/CoralogixCustomerSupportAccess'
        id:
          type: string
          description: >-
            The unique identifier for the company IP access settings. This is
            typically a company ID.
          example: 405
        ipAccess:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IpAccess'
          description: The list of IP access entries.
          example: 405
      description: This data structure represents the IP access settings for a company.
      externalDocs:
        url: ''
    CompareType:
      enum:
        - COMPARE_TYPE_UNSPECIFIED
        - COMPARE_TYPE_IS
        - COMPARE_TYPE_START_WITH
        - COMPARE_TYPE_ENDS_WITH
        - COMPARE_TYPE_INCLUDES
      type: string
    ComparisonOperator:
      enum:
        - COMPARISON_OPERATOR_UNSPECIFIED
        - COMPARISON_OPERATOR_GREATER_THAN
        - COMPARISON_OPERATOR_GREATER_THAN_OR_EQUALS
        - COMPARISON_OPERATOR_LESS_THAN
        - COMPARISON_OPERATOR_LESS_THAN_OR_EQUALS
      type: string
    ConfigOverrides:
      type: object
      properties:
        conditionType:
          $ref: '#/components/schemas/notification_center.ConditionType'
        messageConfig:
          $ref: '#/components/schemas/MessageConfig'
        payloadType:
          type: string
      additionalProperties: false
    ConfigurationBlock:
      title: Configuration block
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        value:
          type: string
      externalDocs:
        url: ''
    ConfigureTenantRequest:
      oneOf:
        - title: Configure Tenant Request
          required:
            - retentionPolicy
            - storageConfig
          type: object
          properties:
            ibm:
              $ref: '#/components/schemas/IbmConfigV2'
            retentionPolicy:
              $ref: '#/components/schemas/RetentionPolicyRequest'
          additionalProperties: false
          description: This data structure is used to configure a tenant.
          externalDocs:
            description: Find out more about metrics cost optimization
            url: >-
              https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
        - title: Configure Tenant Request
          required:
            - retentionPolicy
            - storageConfig
          type: object
          properties:
            retentionPolicy:
              $ref: '#/components/schemas/RetentionPolicyRequest'
            s3:
              $ref: '#/components/schemas/S3Config'
          additionalProperties: false
          description: This data structure is used to configure a tenant.
          externalDocs:
            description: Find out more about metrics cost optimization
            url: >-
              https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
    ConnectionStatus:
      enum:
        - PENDING
        - ACTIVE
        - FAILING
        - STATUS_UNKNOWN
      type: string
    Connector:
      title: Connector
      required:
        - type
        - name
        - connectorConfigs
      type: object
      properties:
        configOverrides:
          type: array
          items:
            $ref: '#/components/schemas/EntityTypeConfigOverrides'
        connectorConfig:
          $ref: '#/components/schemas/ConnectorConfig'
        createTime:
          type: string
          format: date-time
        description:
          maxLength: 5000
          type: string
          example: Connector for team notifications
        id:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
        name:
          maxLength: 200
          type: string
          example: My Slack Connector
        teamId:
          type: integer
          format: int64
          example: '12345'
        type:
          $ref: '#/components/schemas/ConnectorType'
        updateTime:
          type: string
          format: date-time
      additionalProperties: false
      description: A connector configuration for sending notifications
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ConnectorConfig:
      title: Connector Config
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/notification_center.ConnectorConfigField'
      description: Configuration for a specific output schema of a connector
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ConnectorInternal:
      type: object
      properties:
        configOverrides:
          type: array
          items:
            $ref: '#/components/schemas/EntityTypeConfigOverrides'
        connectorConfig:
          $ref: '#/components/schemas/ConnectorConfig'
        createTime:
          type: string
          format: date-time
        description:
          type: string
        id:
          type: string
        internalId:
          type: string
        name:
          type: string
        teamId:
          type: integer
          format: int64
        type:
          $ref: '#/components/schemas/ConnectorType'
        updateTime:
          type: string
          format: date-time
      additionalProperties: false
    ConnectorSummariesEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/ConnectorSummary'
    ConnectorSummary:
      type: object
      properties:
        createTime:
          type: string
          format: date-time
        description:
          type: string
        id:
          type: string
        name:
          type: string
        teamId:
          type: integer
          format: int64
        type:
          $ref: '#/components/schemas/ConnectorType'
        updateTime:
          type: string
          format: date-time
      additionalProperties: false
    ConnectorType:
      enum:
        - CONNECTOR_TYPE_UNSPECIFIED
        - SLACK
        - GENERIC_HTTPS
        - PAGERDUTY
        - IBM_EVENT_NOTIFICATIONS
      type: string
    ConnectorTypeSummary:
      title: Connector Type Summary
      type: object
      properties:
        count:
          type: integer
          format: int64
          example: '5'
        type:
          $ref: '#/components/schemas/ConnectorType'
      description: Summary information about a connector type
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ConnectorsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/Connector'
    Constant:
      type: object
      properties:
        value:
          type: string
    ConstantListSource:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
    ContextualData:
      title: Contextual data
      type: object
      description: This data structure represents a contextual data integration.
      externalDocs:
        url: ''
    ContextualLabelValueWithCount:
      title: Contextual label value with count
      required:
        - contextualLabelValue
        - count
      type: object
      properties:
        contextualLabelValue:
          type: string
          example: contextual_label_value
        count:
          type: integer
          format: int32
          example: 10
      externalDocs:
        url: ''
    ContextualLabelValues:
      title: Contextual label values
      required:
        - contextualLabelValues
      type: object
      properties:
        contextualLabelValues:
          type: array
          items:
            type: string
      description: Represents contextual label values for filtering incidents
      externalDocs:
        url: ''
    ContextualLabelValuesWithCount:
      title: Contextual label values with count
      required:
        - valuesWithCount
      type: object
      properties:
        valuesWithCount:
          type: array
          items:
            $ref: '#/components/schemas/ContextualLabelValueWithCount'
      externalDocs:
        url: ''
    ContextualLabels:
      title: Incident contextual labels
      required:
        - fieldName
        - fieldValue
      type: object
      properties:
        fieldName:
          type: string
          example: field_name
        fieldValue:
          type: string
          example: field_value
      externalDocs:
        url: ''
    CoralogixCustomerSupportAccess:
      enum:
        - CORALOGIX_CUSTOMER_SUPPORT_ACCESS_UNSPECIFIED
        - CORALOGIX_CUSTOMER_SUPPORT_ACCESS_DISABLED
        - CORALOGIX_CUSTOMER_SUPPORT_ACCESS_ENABLED
      type: string
    CoralogixLogMetadata:
      type: object
      properties:
        applicationName:
          type: string
        severity:
          type: string
        subsystemName:
          type: string
    Count:
      type: object
    CountDistinct:
      type: object
      properties:
        field:
          type: string
        observationField:
          $ref: '#/components/schemas/ObservationField'
    Counts:
      type: object
      properties:
        groups:
          type: integer
          format: int32
        parsingThemes:
          type: integer
          format: int32
        rules:
          type: integer
          format: int32
    CreateActionRequest:
      type: object
      properties:
        applicationNames:
          type: array
          items:
            type: string
        isPrivate:
          type: boolean
        name:
          type: string
        sourceType:
          $ref: '#/components/schemas/v2.SourceType'
        subsystemNames:
          type: array
          items:
            type: string
        url:
          type: string
    CreateActionResponse:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/v2.Action'
    CreateAlertDefRequest:
      title: Create alert definition request
      required:
        - alertDefProperties
      type: object
      properties:
        alertDefProperties:
          $ref: '#/components/schemas/AlertDefProperties'
      description: A request to create a new alert definition
      externalDocs:
        url: ''
    CreateAlertDefResponse:
      title: Create alert definition response
      required:
        - alertDef
      type: object
      properties:
        alertDef:
          $ref: '#/components/schemas/AlertDef'
      description: A response that contains the newly created alert definition
      externalDocs:
        url: ''
    CreateAlertSchedulerRuleRequest:
      title: Create alert scheduler rule request data structure
      required:
        - alertSchedulerRule
      type: object
      properties:
        alertSchedulerRule:
          $ref: '#/components/schemas/AlertSchedulerRule'
      description: This is a request sent to create an alert scheduler rule
      externalDocs:
        description: Find out more about alert scheduler rules in our documentation.
        url: >-
          https://coralogix.com/docs/developer-portal/apis/data-management/alert-suppression-rules-api/
    CreateAlertSchedulerRuleResponse:
      title: Create alert scheduler rule response data structure
      required:
        - alertSchedulerRule
      type: object
      properties:
        alertSchedulerRule:
          $ref: '#/components/schemas/AlertSchedulerRule'
      description: This is a response sent after creating an alert scheduler rule
      externalDocs:
        description: Find out more about alert scheduler rules in our documentation.
        url: >-
          https://coralogix.com/docs/developer-portal/apis/data-management/alert-suppression-rules-api/
    CreateApiKeyRequest:
      title: Create Api Key Request
      required:
        - name
        - owner
        - keyPermissions
        - hashed
      type: object
      properties:
        hashed:
          type: boolean
          example: true
        keyPermissions:
          $ref: '#/components/schemas/CreateApiKeyRequest.KeyPermissions'
        name:
          type: string
          example: my_api_key
        owner:
          $ref: '#/components/schemas/Owner'
      description: This data structure is used to create an API key.
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
    CreateApiKeyRequest.KeyPermissions:
      title: Key Permissions
      required:
        - presets
        - permissions
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
            example:
              - read_logs
        presets:
          type: array
          items:
            type: string
            example:
              - my_preset
      description: >-
        This data structure allows to specify loose permissions and permission
        presets for an API key.
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
    CreateApiKeyResponse:
      title: Create Api Key Response
      required:
        - keyId
        - name
        - value
      type: object
      properties:
        keyId:
          type: string
          example: my_key_id
        name:
          type: string
          example: my_api_key
        value:
          type: string
          example: my_api_key_value
      description: This data structure is the response obtained when creating an API key.
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
    CreateBulkAlertSchedulerRuleRequest:
      title: Create bulk alert scheduler rule request data structure
      required:
        - createAlertSchedulerRuleRequests
      type: object
      properties:
        createAlertSchedulerRuleRequests:
          type: array
          items:
            $ref: '#/components/schemas/CreateAlertSchedulerRuleRequest'
      description: This is a request sent to create multiple alert scheduler rules
      externalDocs:
        description: Find out more about alert scheduler rules in our documentation.
        url: >-
          https://coralogix.com/docs/developer-portal/apis/data-management/alert-suppression-rules-api/
    CreateBulkAlertSchedulerRuleResponse:
      title: Create bulk alert scheduler rule response data structure
      required:
        - createSuppressionResponses
      type: object
      properties:
        createSuppressionResponses:
          type: array
          items:
            $ref: '#/components/schemas/CreateAlertSchedulerRuleResponse'
      description: This is a response sent after creating multiple alert scheduler rules
      externalDocs:
        description: Find out more about alert scheduler rules in our documentation.
        url: >-
          https://coralogix.com/docs/developer-portal/apis/data-management/alert-suppression-rules-api/
    CreateCompanyIpAccessSettingsRequest:
      title: Create company IP access settings request
      type: object
      properties:
        enableCoralogixCustomerSupportAccess:
          $ref: '#/components/schemas/CoralogixCustomerSupportAccess'
        ipAccess:
          type: array
          items:
            $ref: '#/components/schemas/IpAccess'
      description: >-
        This data structure represents the request to create company IP access
        settings.
      externalDocs:
        url: ''
    CreateCompanyIpAccessSettingsResponse:
      title: Create company IP access settings response
      type: object
      properties:
        settings:
          $ref: '#/components/schemas/CompanyIpAccessSettings'
      description: >-
        This data structure represents the response to create company IP access
        settings.
      externalDocs:
        url: ''
    CreateConnectorRequest:
      title: Create Connector Request
      type: object
      properties:
        connector:
          $ref: '#/components/schemas/Connector'
      description: Request to create a new connector
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    CreateConnectorResponse:
      title: Create Connector Response
      type: object
      properties:
        connector:
          $ref: '#/components/schemas/Connector'
      description: Response containing the created connector
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    CreateCustomEnrichmentRequest:
      title: Create Custom Enrichment Request
      required:
        - name
        - description
        - file
      type: object
      properties:
        description:
          type: string
          example: custom_enrichment_description
        file:
          $ref: '#/components/schemas/File'
        name:
          type: string
          example: custom_enrichment_name
      description: This request data structure is used to create a custom enrichment
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    CreateCustomEnrichmentResponse:
      title: Create Custom Enrichment Response
      required:
        - customEnrichment
      type: object
      properties:
        customEnrichment:
          $ref: '#/components/schemas/CustomEnrichment'
        message:
          type: string
          example: Custom enrichment created successfully
      description: >-
        This response data structure is obtained when a custom enrichment is
        created
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    CreateCustomPresetRequest:
      title: Create Custom Preset Request
      type: object
      properties:
        preset:
          $ref: '#/components/schemas/Preset'
      description: Request to create a new custom preset
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    CreateCustomPresetResponse:
      title: Create Custom Preset Response
      type: object
      properties:
        preset:
          $ref: '#/components/schemas/Preset'
      description: Response containing the created custom preset
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    CreateDashboardFolderRequest:
      title: Create dashboard folder request data structure
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/DashboardFolder'
        requestId:
          type: string
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    CreateDashboardFolderResponse:
      title: Create dashboard folder response data structure
      type: object
      properties:
        folderId:
          type: string
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    CreateDashboardRequest:
      title: Create dashboard request data structure
      required:
        - requestId
        - dashboard
      type: object
      properties:
        dashboard:
          $ref: '#/components/schemas/Dashboard'
        isLocked:
          type: boolean
        requestId:
          type: string
      description: This is a request used to create a new custom dashboard
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    CreateDashboardResponse:
      title: Create dashboard response data structure
      type: object
      properties:
        dashboardId:
          type: string
      description: >-
        This is a response received when a custom dashboard is successfully
        created
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    CreateE2MRequest:
      title: Create E2M Request
      required:
        - e2m
      type: object
      properties:
        e2m:
          $ref: '#/components/schemas/E2MCreateParams'
      description: This is used to create a new event to metric definition
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    CreateE2MResponse:
      type: object
      properties:
        e2m:
          $ref: '#/components/schemas/E2M'
    CreateGenericPolicyRequest:
      type: object
      properties:
        applicationRule:
          $ref: '#/components/schemas/quota.v1.Rule'
        archiveRetention:
          $ref: '#/components/schemas/ArchiveRetention'
        description:
          type: string
        name:
          type: string
        priority:
          $ref: '#/components/schemas/quota.v1.Priority'
        subsystemRule:
          $ref: '#/components/schemas/quota.v1.Rule'
      additionalProperties: false
    CreateGlobalRouterRequest:
      title: Create Global Router Request
      type: object
      properties:
        router:
          $ref: '#/components/schemas/GlobalRouter'
      description: Request to create a global router
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    CreateGlobalRouterResponse:
      title: Create Global Router Response
      type: object
      properties:
        router:
          $ref: '#/components/schemas/GlobalRouter'
      description: Response which contains a created global router
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    CreateLogPolicyRequest:
      type: object
      properties:
        logRules:
          $ref: '#/components/schemas/LogRules'
        policy:
          $ref: '#/components/schemas/CreateGenericPolicyRequest'
    CreateOrReplaceGlobalRouterRequest:
      title: Create Or Replace Global Router Request
      type: object
      properties:
        router:
          $ref: '#/components/schemas/GlobalRouter'
      description: Creates or Updates already existing global router
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    CreateOrReplaceGlobalRouterResponse:
      title: Create Or Replace Global Router Response
      type: object
      properties:
        router:
          $ref: '#/components/schemas/GlobalRouter'
      description: Response which contains a created or updated router
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    CreateOutgoingWebhookRequest:
      title: Create outgoing webhook request
      required:
        - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/OutgoingWebhookInputData'
      externalDocs:
        url: ''
    CreateOutgoingWebhookResponse:
      title: Create outgoing webhook response
      required:
        - id
      type: object
      properties:
        id:
          type: string
          example: example_id
      externalDocs:
        url: ''
    CreatePolicyRequest:
      oneOf:
        - type: object
          properties:
            applicationRule:
              $ref: '#/components/schemas/quota.v1.Rule'
            archiveRetention:
              $ref: '#/components/schemas/ArchiveRetention'
            description:
              type: string
            disabled:
              type: boolean
            logRules:
              $ref: '#/components/schemas/LogRules'
            name:
              type: string
            placement:
              $ref: '#/components/schemas/Placement'
            priority:
              $ref: '#/components/schemas/quota.v1.Priority'
            subsystemRule:
              $ref: '#/components/schemas/quota.v1.Rule'
          additionalProperties: false
        - type: object
          properties:
            applicationRule:
              $ref: '#/components/schemas/quota.v1.Rule'
            archiveRetention:
              $ref: '#/components/schemas/ArchiveRetention'
            description:
              type: string
            disabled:
              type: boolean
            name:
              type: string
            placement:
              $ref: '#/components/schemas/Placement'
            priority:
              $ref: '#/components/schemas/quota.v1.Priority'
            spanRules:
              $ref: '#/components/schemas/SpanRules'
            subsystemRule:
              $ref: '#/components/schemas/quota.v1.Rule'
          additionalProperties: false
    CreatePolicyResponse:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/Policy'
    CreateRoleRequest:
      oneOf:
        - type: object
          properties:
            description:
              type: string
            name:
              type: string
            parentRoleId:
              type: integer
              format: int64
            permissions:
              type: array
              items:
                type: string
            teamId:
              type: integer
              format: int64
          additionalProperties: false
        - type: object
          properties:
            description:
              type: string
            name:
              type: string
            parentRoleName:
              type: string
            permissions:
              type: array
              items:
                type: string
            teamId:
              type: integer
              format: int64
          additionalProperties: false
    CreateRoleResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
    CreateRuleGroupRequest:
      type: object
      properties:
        creator:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        hidden:
          type: boolean
        name:
          type: string
        order:
          type: integer
          format: int64
        ruleMatchers:
          type: array
          items:
            $ref: '#/components/schemas/RuleMatcher'
        ruleSubgroups:
          type: array
          items:
            $ref: '#/components/schemas/CreateRuleGroupRequest.CreateRuleSubgroup'
        teamId:
          $ref: '#/components/schemas/rules.v1.TeamId'
    CreateRuleGroupRequest.CreateRuleSubgroup:
      type: object
      properties:
        enabled:
          type: boolean
        order:
          type: integer
          format: int64
        rules:
          type: array
          items:
            $ref: >-
              #/components/schemas/CreateRuleGroupRequest.CreateRuleSubgroup.CreateRule
    CreateRuleGroupRequest.CreateRuleSubgroup.CreateRule:
      type: object
      properties:
        description:
          type: string
        enabled:
          type: boolean
        name:
          type: string
        order:
          type: integer
          format: int64
        parameters:
          $ref: '#/components/schemas/RuleParameters'
        sourceField:
          type: string
    CreateRuleGroupResponse:
      type: object
      properties:
        ruleGroup:
          $ref: '#/components/schemas/RuleGroup'
    CreateRuleGroupSet:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/InRuleGroup'
        name:
          type: string
      additionalProperties: false
    CreateRuleGroupSetResult:
      type: object
      properties:
        id:
          type: string
    CreateScopeRequest:
      title: Create Scope Request
      required:
        - displayName
        - filters
      type: object
      properties:
        defaultExpression:
          type: string
          example: <v1>true
        description:
          type: string
          example: The best scope
        displayName:
          type: string
          example: my-scope
        filters:
          type: array
          items:
            $ref: '#/components/schemas/scopes.v1.Filter'
      additionalProperties: false
      description: This data structure represents a request to create a scope
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
    CreateScopeResponse:
      title: Create Scope Response
      required:
        - scope
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/scopes.v1.Scope'
      description: This data structure represents a response to create a scope
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
    CreateServiceSloRequest:
      title: Create Service SLO Request
      required:
        - slo
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/ServiceSlo'
      description: This data structure represents a request to create a Service SLO.
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
    CreateServiceSloResponse:
      title: Create Service SLO Response
      required:
        - slo
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/ServiceSlo'
      description: This data structure represents a response to create a Service SLO.
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
    CreateSloRequest:
      title: CreateSloRequest
      required:
        - slo
      type: object
      properties:
        silenceDataValidations:
          type: boolean
          deprecated: true
        slo:
          $ref: '#/components/schemas/Slo'
      additionalProperties: false
      description: Request to create a new SLO.
      externalDocs:
        url: ''
    CreateSloResponse:
      title: CreateSloResponse
      required:
        - slo
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/Slo'
      description: Response after creating a new SLO.
      externalDocs:
        url: ''
    CreateSpanPolicyRequest:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/CreateGenericPolicyRequest'
        spanRules:
          $ref: '#/components/schemas/SpanRules'
    CreateTeamGroupRequest:
      title: CreateTeamGroupRequest
      type: object
      properties:
        description:
          type: string
        externalId:
          type: string
        groupType:
          $ref: '#/components/schemas/GroupType'
        name:
          type: string
        nextGenScopeId:
          type: string
        roleIds:
          type: array
          items:
            $ref: '#/components/schemas/RoleId'
        scopeFilters:
          $ref: '#/components/schemas/ScopeFilters'
        teamId:
          $ref: '#/components/schemas/permissions.v1.TeamId'
        userIds:
          type: array
          items:
            $ref: '#/components/schemas/v1.UserId'
      additionalProperties: false
      description: >-
        Request to create a new team group with specified name, description,
        roles, users, and optional scope filters. Can be associated with a
        specific team or the authenticated team.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    CreateTeamGroupResponse:
      title: CreateTeamGroupResponse
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/TeamGroupId'
      description: >-
        Response containing the unique identifier of the newly created team
        group.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    CreateTeamInOrgRequest:
      type: object
      properties:
        dailyQuota:
          type: number
          format: double
        teamAdminsEmail:
          type: array
          items:
            type: string
        teamName:
          type: string
      additionalProperties: false
    CreateTeamInOrgResponse:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/v2.TeamId'
    CreateViewFolderRequest:
      title: CreateViewFolderRequest
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: Folder name
          example: My Folder
      description: Create view folder.
      externalDocs:
        url: ''
    CreateViewFolderResponse:
      title: CreateViewFolderRequest
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/ViewFolder'
      description: Request for creating view folder.
      externalDocs:
        url: ''
    CreateViewRequest:
      title: ViewFolder
      required:
        - name
        - timeSelection
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/SelectedFilters'
        folderId:
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
          type: string
          description: Unique identifier for folders
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
        name:
          minLength: 1
          type: string
          description: View name
          example: Logs view
        searchQuery:
          $ref: '#/components/schemas/SearchQuery'
        timeSelection:
          $ref: '#/components/schemas/TimeSelection'
        viewType:
          $ref: '#/components/schemas/ViewType'
      description: View folder.
      externalDocs:
        url: ''
    CreateViewResponse:
      type: object
      properties:
        view:
          $ref: '#/components/schemas/View'
    Csv:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/csv.v1.Version'
    CustomAction:
      type: object
      properties:
        url:
          type: string
          description: Static URL that may contain variables using {{variable_name}} syntax
    CustomEnrichment:
      type: object
      properties:
        description:
          type: string
        fileName:
          type: string
        fileSize:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        isQueryOnly:
          type: boolean
        name:
          type: string
        version:
          type: integer
          format: int64
    CustomEnrichmentData:
      oneOf:
        - type: object
          properties:
            definition:
              $ref: '#/components/schemas/CustomEnrichment'
            textual:
              type: string
          additionalProperties: false
        - type: object
          properties:
            binary:
              type: string
              format: byte
            definition:
              $ref: '#/components/schemas/CustomEnrichment'
          additionalProperties: false
    CustomEnrichmentType:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
    CustomSectionOptions:
      type: object
      properties:
        collapsed:
          type: boolean
          description: Indicator if the section is collapsed
          example: false
        color:
          $ref: '#/components/schemas/SectionColor'
        description:
          type: string
          description: Short description of a section
          example:
            value: Section with important statistics
        name:
          type: string
          description: Section custom name
          example:
            value: Main stats section
        repetitiveVar:
          $ref: '#/components/schemas/RepetitiveVar'
    CustomTimeSelection:
      required:
        - fromTime
        - toTime
      type: object
      properties:
        fromTime:
          minLength: 1
          type: string
          format: date-time
          example: '2024-01-25T11:31:43.152Z'
        toTime:
          minLength: 1
          type: string
          format: date-time
          example: '2024-01-25T11:35:43.152Z'
      externalDocs:
        url: ''
    CxEvent:
      title: Event
      required:
        - cxEventKey
        - cxEventType
        - cxEventLabels
        - companyId
        - cxEventTimestamp
        - cxEventPayloadType
        - cxEventPayload
      type: object
      properties:
        companyId:
          type: integer
          format: int32
          example: 1
        cxEventDedupKey:
          type: string
          example: test_dedup_key
        cxEventKey:
          type: string
          example: test
        cxEventLabels:
          type: object
          additionalProperties:
            type: string
          example:
            test: test
        cxEventMetadata:
          type: object
          additionalProperties:
            type: string
          example:
            test: test
        cxEventPayload:
          type: object
          example:
            test: test
        cxEventPayloadType:
          type: string
          example: test_payload_type
        cxEventTimestamp:
          type: string
          format: date-time
          example: 1714857600
        cxEventType:
          type: string
          example: test_type
      description: This data structure represents an event
      externalDocs:
        description: Find out more about events
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    CxEventArray:
      title: CxEventArray
      required:
        - events
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/CxEvent'
      description: This data structure represents an array of events
      externalDocs:
        description: Find out more about events
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    CxEventLabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    CxEventLabelsFieldStatisticsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/FieldStatistics'
    CxEventMetadataEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    CxEventMetadataFieldStatisticsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/FieldStatistics'
    CxEventSingleOrMultiple:
      oneOf:
        - title: CxEventSingleOrMultiple
          required:
            - event
          type: object
          properties:
            singleEvent:
              $ref: '#/components/schemas/CxEvent'
          additionalProperties: false
          description: This data structure represents a single or multiple events
          externalDocs:
            url: ''
        - title: CxEventSingleOrMultiple
          required:
            - event
          type: object
          properties:
            multipleEvents:
              $ref: '#/components/schemas/CxEventArray'
          additionalProperties: false
          description: This data structure represents a single or multiple events
          externalDocs:
            url: ''
    Daily:
      type: object
    Dashboard:
      oneOf:
        - title: Dashboard
          required:
            - name
            - layout
          type: object
          properties:
            absoluteTimeFrame:
              $ref: '#/components/schemas/TimeFrame'
            actions:
              type: array
              items:
                $ref: '#/components/schemas/DashboardAction'
            annotations:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
            description:
              type: string
              description: >-
                A brief description or summary of the dashboard's purpose or
                content
              example: Sample description
            filters:
              type: array
              items:
                $ref: '#/components/schemas/filters.Filter'
            folderId:
              $ref: '#/components/schemas/UUID'
            id:
              type: string
              description: A unique identifier of the dashboard
              example: GZLHSeqelCbD3I7HbIDtL
            layout:
              $ref: '#/components/schemas/Layout'
            name:
              type: string
              description: The display name of the dashboard
              example: Example Name
            'off':
              $ref: '#/components/schemas/AutoRefreshOff'
            slugName:
              type: string
              description: >-
                A unique slug name serving as an alias for accessing the
                dashboard
              example: system-health-monitoring
            variables:
              type: array
              items:
                $ref: '#/components/schemas/Variable'
            variablesV2:
              type: array
              items:
                $ref: '#/components/schemas/VariableV2'
          additionalProperties: false
          description: >-
            Dashboard represents the structure and configuration of a Coralogix
            Custom Dashboard.
          externalDocs:
            description: Learn more about Custom Dashboards in our documentation.
            url: >-
              https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
        - title: Dashboard
          required:
            - name
            - layout
          type: object
          properties:
            absoluteTimeFrame:
              $ref: '#/components/schemas/TimeFrame'
            actions:
              type: array
              items:
                $ref: '#/components/schemas/DashboardAction'
            annotations:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
            description:
              type: string
              description: >-
                A brief description or summary of the dashboard's purpose or
                content
              example: Sample description
            filters:
              type: array
              items:
                $ref: '#/components/schemas/filters.Filter'
            folderId:
              $ref: '#/components/schemas/UUID'
            id:
              type: string
              description: A unique identifier of the dashboard
              example: GZLHSeqelCbD3I7HbIDtL
            layout:
              $ref: '#/components/schemas/Layout'
            name:
              type: string
              description: The display name of the dashboard
              example: Example Name
            slugName:
              type: string
              description: >-
                A unique slug name serving as an alias for accessing the
                dashboard
              example: system-health-monitoring
            twoMinutes:
              $ref: '#/components/schemas/AutoRefreshTwoMinutes'
            variables:
              type: array
              items:
                $ref: '#/components/schemas/Variable'
            variablesV2:
              type: array
              items:
                $ref: '#/components/schemas/VariableV2'
          additionalProperties: false
          description: >-
            Dashboard represents the structure and configuration of a Coralogix
            Custom Dashboard.
          externalDocs:
            description: Learn more about Custom Dashboards in our documentation.
            url: >-
              https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
        - title: Dashboard
          required:
            - name
            - layout
          type: object
          properties:
            absoluteTimeFrame:
              $ref: '#/components/schemas/TimeFrame'
            actions:
              type: array
              items:
                $ref: '#/components/schemas/DashboardAction'
            annotations:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
            description:
              type: string
              description: >-
                A brief description or summary of the dashboard's purpose or
                content
              example: Sample description
            filters:
              type: array
              items:
                $ref: '#/components/schemas/filters.Filter'
            fiveMinutes:
              $ref: '#/components/schemas/AutoRefreshFiveMinutes'
            folderId:
              $ref: '#/components/schemas/UUID'
            id:
              type: string
              description: A unique identifier of the dashboard
              example: GZLHSeqelCbD3I7HbIDtL
            layout:
              $ref: '#/components/schemas/Layout'
            name:
              type: string
              description: The display name of the dashboard
              example: Example Name
            slugName:
              type: string
              description: >-
                A unique slug name serving as an alias for accessing the
                dashboard
              example: system-health-monitoring
            variables:
              type: array
              items:
                $ref: '#/components/schemas/Variable'
            variablesV2:
              type: array
              items:
                $ref: '#/components/schemas/VariableV2'
          additionalProperties: false
          description: >-
            Dashboard represents the structure and configuration of a Coralogix
            Custom Dashboard.
          externalDocs:
            description: Learn more about Custom Dashboards in our documentation.
            url: >-
              https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
        - title: Dashboard
          required:
            - name
            - layout
          type: object
          properties:
            absoluteTimeFrame:
              $ref: '#/components/schemas/TimeFrame'
            actions:
              type: array
              items:
                $ref: '#/components/schemas/DashboardAction'
            annotations:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
            description:
              type: string
              description: >-
                A brief description or summary of the dashboard's purpose or
                content
              example: Sample description
            filters:
              type: array
              items:
                $ref: '#/components/schemas/filters.Filter'
            folderPath:
              $ref: '#/components/schemas/FolderPath'
            id:
              type: string
              description: A unique identifier of the dashboard
              example: GZLHSeqelCbD3I7HbIDtL
            layout:
              $ref: '#/components/schemas/Layout'
            name:
              type: string
              description: The display name of the dashboard
              example: Example Name
            'off':
              $ref: '#/components/schemas/AutoRefreshOff'
            slugName:
              type: string
              description: >-
                A unique slug name serving as an alias for accessing the
                dashboard
              example: system-health-monitoring
            variables:
              type: array
              items:
                $ref: '#/components/schemas/Variable'
            variablesV2:
              type: array
              items:
                $ref: '#/components/schemas/VariableV2'
          additionalProperties: false
          description: >-
            Dashboard represents the structure and configuration of a Coralogix
            Custom Dashboard.
          externalDocs:
            description: Learn more about Custom Dashboards in our documentation.
            url: >-
              https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
        - title: Dashboard
          required:
            - name
            - layout
          type: object
          properties:
            absoluteTimeFrame:
              $ref: '#/components/schemas/TimeFrame'
            actions:
              type: array
              items:
                $ref: '#/components/schemas/DashboardAction'
            annotations:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
            description:
              type: string
              description: >-
                A brief description or summary of the dashboard's purpose or
                content
              example: Sample description
            filters:
              type: array
              items:
                $ref: '#/components/schemas/filters.Filter'
            folderPath:
              $ref: '#/components/schemas/FolderPath'
            id:
              type: string
              description: A unique identifier of the dashboard
              example: GZLHSeqelCbD3I7HbIDtL
            layout:
              $ref: '#/components/schemas/Layout'
            name:
              type: string
              description: The display name of the dashboard
              example: Example Name
            slugName:
              type: string
              description: >-
                A unique slug name serving as an alias for accessing the
                dashboard
              example: system-health-monitoring
            twoMinutes:
              $ref: '#/components/schemas/AutoRefreshTwoMinutes'
            variables:
              type: array
              items:
                $ref: '#/components/schemas/Variable'
            variablesV2:
              type: array
              items:
                $ref: '#/components/schemas/VariableV2'
          additionalProperties: false
          description: >-
            Dashboard represents the structure and configuration of a Coralogix
            Custom Dashboard.
          externalDocs:
            description: Learn more about Custom Dashboards in our documentation.
            url: >-
              https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
        - title: Dashboard
          required:
            - name
            - layout
          type: object
          properties:
            absoluteTimeFrame:
              $ref: '#/components/schemas/TimeFrame'
            actions:
              type: array
              items:
                $ref: '#/components/schemas/DashboardAction'
            annotations:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
            description:
              type: string
              description: >-
                A brief description or summary of the dashboard's purpose or
                content
              example: Sample description
            filters:
              type: array
              items:
                $ref: '#/components/schemas/filters.Filter'
            fiveMinutes:
              $ref: '#/components/schemas/AutoRefreshFiveMinutes'
            folderPath:
              $ref: '#/components/schemas/FolderPath'
            id:
              type: string
              description: A unique identifier of the dashboard
              example: GZLHSeqelCbD3I7HbIDtL
            layout:
              $ref: '#/components/schemas/Layout'
            name:
              type: string
              description: The display name of the dashboard
              example: Example Name
            slugName:
              type: string
              description: >-
                A unique slug name serving as an alias for accessing the
                dashboard
              example: system-health-monitoring
            variables:
              type: array
              items:
                $ref: '#/components/schemas/Variable'
            variablesV2:
              type: array
              items:
                $ref: '#/components/schemas/VariableV2'
          additionalProperties: false
          description: >-
            Dashboard represents the structure and configuration of a Coralogix
            Custom Dashboard.
          externalDocs:
            description: Learn more about Custom Dashboards in our documentation.
            url: >-
              https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
        - title: Dashboard
          required:
            - name
            - layout
          type: object
          properties:
            actions:
              type: array
              items:
                $ref: '#/components/schemas/DashboardAction'
            annotations:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
            description:
              type: string
              description: >-
                A brief description or summary of the dashboard's purpose or
                content
              example: Sample description
            filters:
              type: array
              items:
                $ref: '#/components/schemas/filters.Filter'
            folderId:
              $ref: '#/components/schemas/UUID'
            id:
              type: string
              description: A unique identifier of the dashboard
              example: GZLHSeqelCbD3I7HbIDtL
            layout:
              $ref: '#/components/schemas/Layout'
            name:
              type: string
              description: The display name of the dashboard
              example: Example Name
            'off':
              $ref: '#/components/schemas/AutoRefreshOff'
            relativeTimeFrame:
              type: string
              description: Relative time frame specifying a duration from the current time
            slugName:
              type: string
              description: >-
                A unique slug name serving as an alias for accessing the
                dashboard
              example: system-health-monitoring
            variables:
              type: array
              items:
                $ref: '#/components/schemas/Variable'
            variablesV2:
              type: array
              items:
                $ref: '#/components/schemas/VariableV2'
          additionalProperties: false
          description: >-
            Dashboard represents the structure and configuration of a Coralogix
            Custom Dashboard.
          externalDocs:
            description: Learn more about Custom Dashboards in our documentation.
            url: >-
              https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
        - title: Dashboard
          required:
            - name
            - layout
          type: object
          properties:
            actions:
              type: array
              items:
                $ref: '#/components/schemas/DashboardAction'
            annotations:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
            description:
              type: string
              description: >-
                A brief description or summary of the dashboard's purpose or
                content
              example: Sample description
            filters:
              type: array
              items:
                $ref: '#/components/schemas/filters.Filter'
            folderId:
              $ref: '#/components/schemas/UUID'
            id:
              type: string
              description: A unique identifier of the dashboard
              example: GZLHSeqelCbD3I7HbIDtL
            layout:
              $ref: '#/components/schemas/Layout'
            name:
              type: string
              description: The display name of the dashboard
              example: Example Name
            relativeTimeFrame:
              type: string
              description: Relative time frame specifying a duration from the current time
            slugName:
              type: string
              description: >-
                A unique slug name serving as an alias for accessing the
                dashboard
              example: system-health-monitoring
            twoMinutes:
              $ref: '#/components/schemas/AutoRefreshTwoMinutes'
            variables:
              type: array
              items:
                $ref: '#/components/schemas/Variable'
            variablesV2:
              type: array
              items:
                $ref: '#/components/schemas/VariableV2'
          additionalProperties: false
          description: >-
            Dashboard represents the structure and configuration of a Coralogix
            Custom Dashboard.
          externalDocs:
            description: Learn more about Custom Dashboards in our documentation.
            url: >-
              https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
        - title: Dashboard
          required:
            - name
            - layout
          type: object
          properties:
            actions:
              type: array
              items:
                $ref: '#/components/schemas/DashboardAction'
            annotations:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
            description:
              type: string
              description: >-
                A brief description or summary of the dashboard's purpose or
                content
              example: Sample description
            filters:
              type: array
              items:
                $ref: '#/components/schemas/filters.Filter'
            fiveMinutes:
              $ref: '#/components/schemas/AutoRefreshFiveMinutes'
            folderId:
              $ref: '#/components/schemas/UUID'
            id:
              type: string
              description: A unique identifier of the dashboard
              example: GZLHSeqelCbD3I7HbIDtL
            layout:
              $ref: '#/components/schemas/Layout'
            name:
              type: string
              description: The display name of the dashboard
              example: Example Name
            relativeTimeFrame:
              type: string
              description: Relative time frame specifying a duration from the current time
            slugName:
              type: string
              description: >-
                A unique slug name serving as an alias for accessing the
                dashboard
              example: system-health-monitoring
            variables:
              type: array
              items:
                $ref: '#/components/schemas/Variable'
            variablesV2:
              type: array
              items:
                $ref: '#/components/schemas/VariableV2'
          additionalProperties: false
          description: >-
            Dashboard represents the structure and configuration of a Coralogix
            Custom Dashboard.
          externalDocs:
            description: Learn more about Custom Dashboards in our documentation.
            url: >-
              https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
        - title: Dashboard
          required:
            - name
            - layout
          type: object
          properties:
            actions:
              type: array
              items:
                $ref: '#/components/schemas/DashboardAction'
            annotations:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
            description:
              type: string
              description: >-
                A brief description or summary of the dashboard's purpose or
                content
              example: Sample description
            filters:
              type: array
              items:
                $ref: '#/components/schemas/filters.Filter'
            folderPath:
              $ref: '#/components/schemas/FolderPath'
            id:
              type: string
              description: A unique identifier of the dashboard
              example: GZLHSeqelCbD3I7HbIDtL
            layout:
              $ref: '#/components/schemas/Layout'
            name:
              type: string
              description: The display name of the dashboard
              example: Example Name
            'off':
              $ref: '#/components/schemas/AutoRefreshOff'
            relativeTimeFrame:
              type: string
              description: Relative time frame specifying a duration from the current time
            slugName:
              type: string
              description: >-
                A unique slug name serving as an alias for accessing the
                dashboard
              example: system-health-monitoring
            variables:
              type: array
              items:
                $ref: '#/components/schemas/Variable'
            variablesV2:
              type: array
              items:
                $ref: '#/components/schemas/VariableV2'
          additionalProperties: false
          description: >-
            Dashboard represents the structure and configuration of a Coralogix
            Custom Dashboard.
          externalDocs:
            description: Learn more about Custom Dashboards in our documentation.
            url: >-
              https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
        - title: Dashboard
          required:
            - name
            - layout
          type: object
          properties:
            actions:
              type: array
              items:
                $ref: '#/components/schemas/DashboardAction'
            annotations:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
            description:
              type: string
              description: >-
                A brief description or summary of the dashboard's purpose or
                content
              example: Sample description
            filters:
              type: array
              items:
                $ref: '#/components/schemas/filters.Filter'
            folderPath:
              $ref: '#/components/schemas/FolderPath'
            id:
              type: string
              description: A unique identifier of the dashboard
              example: GZLHSeqelCbD3I7HbIDtL
            layout:
              $ref: '#/components/schemas/Layout'
            name:
              type: string
              description: The display name of the dashboard
              example: Example Name
            relativeTimeFrame:
              type: string
              description: Relative time frame specifying a duration from the current time
            slugName:
              type: string
              description: >-
                A unique slug name serving as an alias for accessing the
                dashboard
              example: system-health-monitoring
            twoMinutes:
              $ref: '#/components/schemas/AutoRefreshTwoMinutes'
            variables:
              type: array
              items:
                $ref: '#/components/schemas/Variable'
            variablesV2:
              type: array
              items:
                $ref: '#/components/schemas/VariableV2'
          additionalProperties: false
          description: >-
            Dashboard represents the structure and configuration of a Coralogix
            Custom Dashboard.
          externalDocs:
            description: Learn more about Custom Dashboards in our documentation.
            url: >-
              https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
        - title: Dashboard
          required:
            - name
            - layout
          type: object
          properties:
            actions:
              type: array
              items:
                $ref: '#/components/schemas/DashboardAction'
            annotations:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
            description:
              type: string
              description: >-
                A brief description or summary of the dashboard's purpose or
                content
              example: Sample description
            filters:
              type: array
              items:
                $ref: '#/components/schemas/filters.Filter'
            fiveMinutes:
              $ref: '#/components/schemas/AutoRefreshFiveMinutes'
            folderPath:
              $ref: '#/components/schemas/FolderPath'
            id:
              type: string
              description: A unique identifier of the dashboard
              example: GZLHSeqelCbD3I7HbIDtL
            layout:
              $ref: '#/components/schemas/Layout'
            name:
              type: string
              description: The display name of the dashboard
              example: Example Name
            relativeTimeFrame:
              type: string
              description: Relative time frame specifying a duration from the current time
            slugName:
              type: string
              description: >-
                A unique slug name serving as an alias for accessing the
                dashboard
              example: system-health-monitoring
            variables:
              type: array
              items:
                $ref: '#/components/schemas/Variable'
            variablesV2:
              type: array
              items:
                $ref: '#/components/schemas/VariableV2'
          additionalProperties: false
          description: >-
            Dashboard represents the structure and configuration of a Coralogix
            Custom Dashboard.
          externalDocs:
            description: Learn more about Custom Dashboards in our documentation.
            url: >-
              https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    DashboardAction:
      title: Dashboard Action
      type: object
      properties:
        dataSource:
          $ref: '#/components/schemas/ActionDataSourceType'
        definition:
          $ref: '#/components/schemas/ActionDefinition'
        id:
          type: string
          description: A unique identifier of the action
        name:
          type: string
          description: The display name of the action
        shouldOpenInNewWindow:
          type: boolean
          description: >-
            Defines if the action should open in a new window or current window
            in the browser
        widgetId:
          type: string
          description: >-
            Reference to specific widget within a dashboard, can be null if the
            action is dashboard wide
      additionalProperties: false
      description: >-
        Public actions that are always available within specific dashboard's
        context.
      externalDocs:
        description: Learn more about Custom Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    DashboardCatalogItem:
      title: Dashboard catalog item data structure
      type: object
      properties:
        authorId:
          type: string
        createTime:
          type: string
          format: date-time
        description:
          type: string
        folder:
          $ref: '#/components/schemas/DashboardFolder'
        id:
          type: string
          example: 6U1Q8Hpa263Se8PkRKaiE
        isDefault:
          type: boolean
        isLocked:
          type: boolean
        isPinned:
          type: boolean
        lockerAuthorId:
          type: string
        name:
          type: string
        slugName:
          type: string
        updateTime:
          type: string
          format: date-time
      externalDocs:
        url: ''
    DashboardFolder:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        parentId:
          type: string
    DataPoint:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        value:
          type: number
          format: double
    DataSource:
      type: object
      properties:
        exporter:
          type: string
        labelsMetric:
          type: string
        provider:
          type: string
    DataSourceType:
      enum:
        - DATA_SOURCE_TYPE_UNSPECIFIED
        - DATA_SOURCE_TYPE_LOGS
        - DATA_SOURCE_TYPE_SPAN
        - DATA_SOURCE_TYPE_METRICS
        - DATA_SOURCE_TYPE_EVENTS
        - DATA_SOURCE_TYPE_PROFILES
      type: string
    DataSourceTypeValues:
      type: object
      properties:
        dataSourceType:
          $ref: '#/components/schemas/DataSourceType'
        destinationExtractionKeys:
          type: array
          items:
            type: string
    DataTable:
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: '#/components/schemas/DataTable.Column'
        dataModeType:
          $ref: '#/components/schemas/widgets.common.DataModeType'
        orderBy:
          $ref: '#/components/schemas/OrderingField'
        query:
          $ref: '#/components/schemas/DataTable.Query'
        resultsPerPage:
          type: integer
          description: How many results are displayed per table page
          format: int32
          example: 10
        rowStyle:
          $ref: '#/components/schemas/RowStyle'
    DataTable.Column:
      type: object
      properties:
        field:
          type: string
          description: Name of the field to display in the column
          example:
            value: coralogix.metadata.applicationName
        width:
          type: integer
          description: Custom width of the column, by default it's automatically adjusted
          format: int32
    DataTable.DataprimeQuery:
      title: DataprimeQuery
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/common.DataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter.Source'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A Dataprime variant of the query
      externalDocs:
        url: ''
    DataTable.LogsQuery:
      title: LogsQuery
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter.LogsFilter'
        grouping:
          $ref: '#/components/schemas/LogsQuery.Grouping'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A logs variant of the query
      externalDocs:
        url: ''
    DataTable.MetricsQuery:
      title: MetricsQuery
      type: object
      properties:
        editorMode:
          $ref: '#/components/schemas/MetricsQueryEditorMode'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/MetricsFilter'
        promqlQuery:
          $ref: '#/components/schemas/PromQlQuery'
        promqlQueryType:
          $ref: '#/components/schemas/PromQLQueryType'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A metrics variant of the query
      externalDocs:
        url: ''
    DataTable.Query:
      oneOf:
        - type: object
          properties:
            logs:
              $ref: '#/components/schemas/DataTable.LogsQuery'
          additionalProperties: false
        - type: object
          properties:
            spans:
              $ref: '#/components/schemas/DataTable.SpansQuery'
          additionalProperties: false
        - type: object
          properties:
            metrics:
              $ref: '#/components/schemas/DataTable.MetricsQuery'
          additionalProperties: false
        - type: object
          properties:
            dataprime:
              $ref: '#/components/schemas/DataTable.DataprimeQuery'
          additionalProperties: false
    DataTable.SpansQuery:
      title: SpansQuery
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/SpansFilter'
        grouping:
          $ref: '#/components/schemas/SpansQuery.Grouping'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A spans variant of the query
      externalDocs:
        url: ''
    DataUsageEntry:
      title: Data Usage Entry
      type: object
      properties:
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/Dimension'
        sizeGb:
          type: number
          format: float
        timestamp:
          type: string
          format: date-time
        units:
          type: number
          format: float
      description: This data structure represents a data usage entry.
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    Dataprime:
      title: DataprimeQuery
      type: object
      properties:
        dataModeType:
          $ref: '#/components/schemas/widgets.common.DataModeType'
        dataprimeQuery:
          $ref: '#/components/schemas/common.DataprimeQuery'
      description: A Dataprime variant of the query
      externalDocs:
        url: ''
    DataprimeQuery.Type:
      type: object
      properties:
        queryText:
          $ref: '#/components/schemas/QueryText'
      additionalProperties: false
    DataprimeResult:
      type: object
      properties:
        labels:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
        userData:
          type: string
    DataprimeSource:
      type: object
      properties:
        dataModeType:
          $ref: '#/components/schemas/v1.common.DataModeType'
        labelFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        messageTemplate:
          type: string
        orientation:
          $ref: '#/components/schemas/AnnotationOrientation'
        query:
          $ref: '#/components/schemas/common.DataprimeQuery'
        strategy:
          $ref: '#/components/schemas/DataprimeSource.Strategy'
    DataprimeSource.Strategy:
      oneOf:
        - type: object
          properties:
            instant:
              $ref: '#/components/schemas/DataprimeSource.Strategy.Instant'
          additionalProperties: false
        - type: object
          properties:
            range:
              $ref: '#/components/schemas/DataprimeSource.Strategy.Range'
          additionalProperties: false
        - type: object
          properties:
            duration:
              $ref: '#/components/schemas/DataprimeSource.Strategy.Duration'
          additionalProperties: false
    DataprimeSource.Strategy.Duration:
      type: object
      properties:
        durationField:
          $ref: '#/components/schemas/ObservationField'
        startTimestampField:
          $ref: '#/components/schemas/ObservationField'
    DataprimeSource.Strategy.Instant:
      type: object
      properties:
        timestampField:
          $ref: '#/components/schemas/ObservationField'
    DataprimeSource.Strategy.Range:
      type: object
      properties:
        endTimestampField:
          $ref: '#/components/schemas/ObservationField'
        startTimestampField:
          $ref: '#/components/schemas/ObservationField'
    DatasetScope:
      enum:
        - DATASET_SCOPE_UNSPECIFIED
        - DATASET_SCOPE_USER_DATA
        - DATASET_SCOPE_LABEL
        - DATASET_SCOPE_METADATA
      type: string
    DayOfWeek:
      enum:
        - DAY_OF_WEEK_MONDAY_OR_UNSPECIFIED
        - DAY_OF_WEEK_TUESDAY
        - DAY_OF_WEEK_WEDNESDAY
        - DAY_OF_WEEK_THURSDAY
        - DAY_OF_WEEK_FRIDAY
        - DAY_OF_WEEK_SATURDAY
        - DAY_OF_WEEK_SUNDAY
      type: string
    DefaultIntegrationDetails:
      title: Default integration details
      type: object
      properties:
        registered:
          type: array
          items:
            $ref: '#/components/schemas/RegisteredInstance'
      externalDocs:
        url: ''
    DeleteActionRequest:
      type: object
      properties:
        id:
          type: string
    DeleteActionResponse:
      type: object
    DeleteAlertDefRequest:
      title: Delete alert definition request
      required:
        - id
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
      description: A request to delete an alert definition by ID
      externalDocs:
        url: ''
    DeleteAlertDefResponse:
      title: Delete alert definition response
      type: object
      description: A response to the deletion of an alert definition
      externalDocs:
        url: ''
    DeleteAlertSchedulerRuleRequest:
      title: Update alert scheduler rule request data structure
      required:
        - alertSchedulerRule
      type: object
      properties:
        alertSchedulerRuleId:
          type: string
      description: This is a request sent to update an alert scheduler rule
      externalDocs:
        description: Find out more about alert scheduler rules in our documentation.
        url: >-
          https://coralogix.com/docs/developer-portal/apis/data-management/alert-suppression-rules-api/
    DeleteAlertSchedulerRuleResponse:
      type: object
    DeleteApiKeyRequest:
      title: Delete Api Key Request
      required:
        - keyId
      type: object
      properties:
        keyId:
          type: string
      description: This data structure is used to delete an API key.
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
    DeleteApiKeyResponse:
      type: object
    DeleteBulkAlertSchedulerRuleRequest:
      title: Delete bulk alert scheduler rule request data structure
      required:
        - deleteAlertSchedulerRuleRequests
      type: object
      properties:
        deleteAlertSchedulerRuleRequests:
          type: array
          items:
            $ref: '#/components/schemas/DeleteAlertSchedulerRuleRequest'
      description: This is a request sent to delete multiple alert scheduler rules
      externalDocs:
        description: Find out more about alert scheduler rules in our documentation.
        url: >-
          https://coralogix.com/docs/developer-portal/apis/data-management/alert-suppression-rules-api/
    DeleteCompanyIpAccessSettingsRequest:
      title: Delete company IP access settings request
      type: object
      properties:
        id:
          type: string
          example: 405
      additionalProperties: false
      description: >-
        This data structure represents the request to delete company IP access
        settings.
      externalDocs:
        url: ''
    DeleteCompanyIpAccessSettingsResponse:
      title: Delete company IP access settings response
      type: object
      description: >-
        This data structure represents the response to delete company IP access
        settings.
      externalDocs:
        url: ''
    DeleteConnectorRequest:
      title: Delete Connector Request
      type: object
      properties:
        id:
          type: string
      description: Request to delete a connector
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    DeleteConnectorResponse:
      type: object
    DeleteContextualDataIntegrationRequest:
      title: Delete contextual data integration request
      required:
        - integrationId
      type: object
      properties:
        integrationId:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
      externalDocs:
        url: ''
    DeleteContextualDataIntegrationResponse:
      title: Delete contextual data integration response
      type: object
      externalDocs:
        url: ''
    DeleteCustomEnrichmentRequest:
      title: Delete Custom Enrichment Request
      required:
        - customEnrichmentId
      type: object
      properties:
        customEnrichmentId:
          type: integer
          format: int64
          example: 1
      description: This request data structure is used to delete a custom enrichment
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    DeleteCustomEnrichmentResponse:
      type: object
      properties:
        customEnrichmentId:
          type: integer
          format: int64
          example: 1
        message:
          type: string
          example: Custom enrichment deleted successfully
    DeleteCustomPresetRequest:
      title: Delete Custom Preset Request
      type: object
      properties:
        id:
          type: string
      description: Request to delete a custom preset
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    DeleteCustomPresetResponse:
      type: object
    DeleteDashboardFolderRequest:
      title: Delete dashboard folder request data structure
      type: object
      properties:
        folderId:
          type: string
        requestId:
          type: string
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    DeleteDashboardFolderResponse:
      title: Delete dashboard folder response data structure
      type: object
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    DeleteDashboardRequest:
      title: Delete dashboard request data structure
      required:
        - requestId
        - dashboardId
      type: object
      properties:
        dashboardId:
          type: string
        requestId:
          type: string
      description: This is a request used to delete a custom dashboard
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    DeleteDashboardResponse:
      title: Delete dashboard response data structure
      type: object
      description: This is a response received when the dashboard is successfully deleted
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    DeleteE2MRequest:
      title: Delete E2M Request
      required:
        - id
      type: object
      properties:
        id:
          type: string
          example: d6a3658e-78d2-47d0-9b81-b2c551f01b09
      description: >-
        This data structure is used to delete an existing event to metric
        definition
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    DeleteE2MResponse:
      title: Delete E2M Request
      required:
        - id
      type: object
      properties:
        id:
          type: string
      description: >-
        This data structure is obtained when deleting an existing event to
        metric definition
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    DeleteGlobalRouterRequest:
      title: Delete Global Router Request
      type: object
      properties:
        id:
          type: string
      description: Deletes a global router with the passed identifier
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    DeleteGlobalRouterResponse:
      type: object
    DeleteIncidentRequest:
      title: Delete incident request
      required:
        - id
      type: object
      properties:
        id:
          type: string
      description: Request to delete an incident by its ID
      externalDocs:
        url: ''
    DeleteIntegrationRequest:
      title: Delete integration request
      required:
        - integrationId
      type: object
      properties:
        integrationId:
          type: string
      externalDocs:
        url: ''
    DeleteIntegrationResponse:
      type: object
    DeleteOutgoingWebhookRequest:
      title: Delete outgoing webhook request
      required:
        - id
      type: object
      properties:
        id:
          type: string
          example: example_id
      externalDocs:
        url: ''
    DeleteOutgoingWebhookResponse:
      title: Delete outgoing webhook response
      type: object
      externalDocs:
        url: ''
    DeletePolicyRequest:
      type: object
      properties:
        id:
          type: string
    DeletePolicyResponse:
      type: object
      properties:
        id:
          type: string
    DeleteRoleRequest:
      type: object
      properties:
        roleId:
          type: integer
          format: int64
    DeleteRoleResponse:
      type: object
    DeleteRuleGroup:
      type: object
      properties:
        name:
          type: string
    DeleteRuleGroupRequest:
      type: object
      properties:
        groupId:
          type: string
    DeleteRuleGroupResponse:
      type: object
    DeleteRuleGroupSet:
      type: object
      properties:
        id:
          type: string
    DeleteScopeRequest:
      title: Delete Scope Request
      required:
        - id
      type: object
      properties:
        id:
          type: string
          example: 60c82be2-413f-4b8e-8201-7f5c51e2ef2b
      description: This data structure represents a request to delete a scope
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
    DeleteScopeResponse:
      type: object
    DeleteServiceSloRequest:
      title: Delete Service SLO Request
      required:
        - id
      type: object
      properties:
        id:
          type: string
          example: slo_id
      description: This data structure represents a request to delete a Service SLO.
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
    DeleteServiceSloResponse:
      type: object
    DeleteSloRequest:
      title: DeleteSloRequest
      required:
        - id
      type: object
      properties:
        id:
          type: string
      description: Request to delete an existing SLO.
      externalDocs:
        url: ''
    DeleteSloResponse:
      title: DeleteSloResponse
      type: object
      properties:
        effectedSloAlertIds:
          type: array
          items:
            type: string
      description: Response after deleting an existing SLO.
      externalDocs:
        url: ''
    DeleteTeamGroupRequest:
      title: DeleteTeamGroupRequest
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/TeamGroupId'
      description: >-
        Request to remove a team group and all its associated role and user
        assignments using its unique identifier.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    DeleteTeamGroupResponse:
      title: DeleteTeamGroupResponse
      type: object
      description: >-
        Response confirming the successful deletion of a team group and its
        associated configurations.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    DeleteTeamRequest:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/v2.TeamId'
    DeleteTeamResponse:
      type: object
    DeleteViewFolderRequest:
      type: object
      properties:
        id:
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
          type: string
          description: Unique identifier for folders
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
    DeleteViewFolderResponse:
      type: object
    DeleteViewRequest:
      type: object
      properties:
        id:
          type: integer
          description: id
          format: int32
          example: 52
    DeleteViewResponse:
      type: object
    DemistoConfig:
      title: Demisto configuration
      required:
        - uuid
        - payload
      type: object
      properties:
        payload:
          type: string
          example:
            key: value
        uuid:
          type: string
          example: d838cd7b-087b-40c6-bc33-80997020f5d0
      externalDocs:
        url: ''
    DeployExtensionRequest:
      title: Deploy extension request
      required:
        - id
        - version
        - itemIds
      type: object
      properties:
        applications:
          type: array
          items:
            type: string
        extensionDeployment:
          $ref: '#/components/schemas/ExtensionDeployment'
        id:
          type: string
        itemIds:
          type: array
          items:
            type: string
        subsystems:
          type: array
          items:
            type: string
        version:
          type: string
      additionalProperties: false
      externalDocs:
        url: ''
    DeployExtensionResponse:
      title: Deploy extension response
      required:
        - extensionDeployment
      type: object
      properties:
        extensionDeployment:
          $ref: '#/components/schemas/ExtensionDeployment'
      externalDocs:
        url: ''
    DeployedExtension:
      title: Deployed extension
      required:
        - id
        - version
        - summary
        - itemIds
      type: object
      properties:
        applications:
          type: array
          items:
            type: string
        id:
          type: string
        itemIds:
          type: array
          items:
            type: string
        subsystems:
          type: array
          items:
            type: string
        summary:
          $ref: '#/components/schemas/DeployedExtensionSummary'
        version:
          type: string
      externalDocs:
        url: ''
    DeployedExtensionSummary:
      title: Deployed extension summary
      required:
        - deployedItemCounts
      type: object
      properties:
        deployedItemCounts:
          $ref: '#/components/schemas/ItemCounts'
      externalDocs:
        url: ''
    DeployedIntegrationInformation:
      title: Deployed integration information
      type: object
      properties:
        definitionKey:
          type: string
        definitionVersion:
          type: string
        id:
          type: string
        integrationStatus:
          $ref: '#/components/schemas/IntegrationStatus'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
      externalDocs:
        url: ''
    Deprecation:
      title: Deprecation
      required:
        - reason
      type: object
      properties:
        reason:
          type: string
        replacementExtensions:
          type: array
          items:
            type: string
      externalDocs:
        url: ''
    DestinationField:
      enum:
        - DESTINATION_FIELD_CATEGORY_OR_UNSPECIFIED
        - DESTINATION_FIELD_CLASSNAME
        - DESTINATION_FIELD_METHODNAME
        - DESTINATION_FIELD_THREADID
        - DESTINATION_FIELD_SEVERITY
        - DESTINATION_FIELD_TEXT
      type: string
    DetailedDailyEvaluationTokens:
      type: object
      properties:
        evaluations:
          type: array
          items:
            $ref: '#/components/schemas/Evaluation'
        statsDate:
          type: string
          format: date-time
        totalTokens:
          $ref: '#/components/schemas/Token'
    DetailedDailyProcessedGbs:
      type: object
      properties:
        blockedGbs:
          $ref: '#/components/schemas/v2.GB'
        blockedMetricsGbs:
          $ref: '#/components/schemas/v2.GB'
        cpuProfilesGbs:
          $ref: '#/components/schemas/v2.GB'
        highLogsGbs:
          $ref: '#/components/schemas/v2.GB'
        highMetricsGbs:
          $ref: '#/components/schemas/v2.GB'
        highTracingGbs:
          $ref: '#/components/schemas/v2.GB'
        lowLogsGbs:
          $ref: '#/components/schemas/v2.GB'
        lowSessionRecordingGbs:
          $ref: '#/components/schemas/v2.GB'
        lowTracingGbs:
          $ref: '#/components/schemas/v2.GB'
        mediumLogsGbs:
          $ref: '#/components/schemas/v2.GB'
        mediumTracingGbs:
          $ref: '#/components/schemas/v2.GB'
        statsDate:
          type: string
          format: date-time
        totalGbs:
          $ref: '#/components/schemas/v2.GB'
    DetailedDailyUnits:
      type: object
      properties:
        blockedMetricsUnits:
          $ref: '#/components/schemas/v2.Unit'
        blockedUnits:
          $ref: '#/components/schemas/v2.Unit'
        cpuProfilesUnits:
          $ref: '#/components/schemas/v2.Unit'
        evaluationUnits:
          $ref: '#/components/schemas/v2.Unit'
        highLogsUnits:
          $ref: '#/components/schemas/v2.Unit'
        highMetricsUnits:
          $ref: '#/components/schemas/v2.Unit'
        highTracingUnits:
          $ref: '#/components/schemas/v2.Unit'
        lowLogsUnits:
          $ref: '#/components/schemas/v2.Unit'
        lowSessionRecordingUnits:
          $ref: '#/components/schemas/v2.Unit'
        lowTracingUnits:
          $ref: '#/components/schemas/v2.Unit'
        mediumLogsUnits:
          $ref: '#/components/schemas/v2.Unit'
        mediumTracingUnits:
          $ref: '#/components/schemas/v2.Unit'
        statsDate:
          type: string
          format: date-time
        totalUnits:
          $ref: '#/components/schemas/v2.Unit'
    Digest:
      title: Slack digest configuration
      required:
        - type
      type: object
      properties:
        isActive:
          type: boolean
        type:
          $ref: '#/components/schemas/DigestType'
      externalDocs:
        url: ''
    DigestType:
      enum:
        - UNKNOWN
        - ERROR_AND_CRITICAL_LOGS
        - FLOW_ANOMALIES
        - SPIKE_ANOMALIES
        - DATA_USAGE
      type: string
    Dimension:
      oneOf:
        - type: object
          properties:
            pillar:
              $ref: '#/components/schemas/v2.Pillar'
          additionalProperties: false
        - type: object
          properties:
            genericDimension:
              $ref: '#/components/schemas/GenericDimension'
          additionalProperties: false
        - type: object
          properties:
            tier:
              $ref: '#/components/schemas/v2.TcoTier'
          additionalProperties: false
        - type: object
          properties:
            severity:
              $ref: '#/components/schemas/datausage.v2.Severity'
          additionalProperties: false
        - type: object
          properties:
            priority:
              $ref: '#/components/schemas/v2.Priority'
          additionalProperties: false
    DimensionAggregation:
      type: object
      properties:
        aggregationType:
          $ref: '#/components/schemas/DimensionAggregationType'
        dimensionField:
          $ref: '#/components/schemas/DimensionField'
    DimensionAggregationType:
      enum:
        - DIMENSION_AGGREGATION_TYPE_UNSPECIFIED
        - DIMENSION_AGGREGATION_TYPE_UNIQUE_COUNT
        - DIMENSION_AGGREGATION_TYPE_ERROR_COUNT
      type: string
    DimensionField:
      enum:
        - DIMENSION_FIELD_UNSPECIFIED
        - DIMENSION_FIELD_TRACE_ID
      type: string
    DisplayLabelValueWithCount:
      title: Display label value with count
      required:
        - displayLabelValue
        - count
      type: object
      properties:
        count:
          type: integer
          format: int32
          example: 10
        displayLabelValue:
          type: string
          example: display_label_value
      externalDocs:
        url: ''
    DisplayLabelValues:
      title: Display label values
      required:
        - displayLabelValues
      type: object
      properties:
        displayLabelValues:
          type: array
          items:
            type: string
      description: Represents display label values for filtering incidents
      externalDocs:
        url: ''
    DisplayLabelValuesWithCount:
      title: Display label values with count
      required:
        - valuesWithCount
      type: object
      properties:
        valuesWithCount:
          type: array
          items:
            $ref: '#/components/schemas/DisplayLabelValueWithCount'
      externalDocs:
        url: ''
    DownloadAlertsRequest:
      title: Download alert definitions request
      type: object
      description: >-
        A request to download all accessible alert definitions in base-64
        encoded binary format
      externalDocs:
        url: ''
    DownloadAlertsResponse:
      title: Download alerts response
      required:
        - content
      type: object
      properties:
        content:
          type: string
          description: Base64-encoded binary data of the alert definitions
          format: byte
          example: SGVsbG8gV29ybGQ=
      description: A response containing the downloaded alert data
      externalDocs:
        url: ''
    DurationFrequency:
      enum:
        - DURATION_FREQUENCY_UNSPECIFIED
        - DURATION_FREQUENCY_MINUTE
        - DURATION_FREQUENCY_HOUR
        - DURATION_FREQUENCY_DAY
      type: string
    DurationUnit:
      enum:
        - DURATION_UNIT_UNSPECIFIED
        - DURATION_UNIT_HOURS
      type: string
    Dynamic.Query:
      oneOf:
        - type: object
          properties:
            logs:
              $ref: '#/components/schemas/Logs'
          additionalProperties: false
        - type: object
          properties:
            spans:
              $ref: '#/components/schemas/Spans'
          additionalProperties: false
        - type: object
          properties:
            metrics:
              $ref: '#/components/schemas/Metrics'
          additionalProperties: false
        - type: object
          properties:
            dataprime:
              $ref: '#/components/schemas/Dataprime'
          additionalProperties: false
    DynamicAlertMatch:
      type: object
      properties:
        forecastTimestamp:
          type: string
          format: uint64
        observedDetails:
          $ref: '#/components/schemas/ObservedDetails'
        searchDetails:
          $ref: '#/components/schemas/v3.SearchDetails'
        topBucket:
          $ref: '#/components/schemas/TopBucket'
    E2M:
      oneOf:
        - title: E2M
          required:
            - name
            - type
          type: object
          properties:
            createTime:
              type: string
              example: 2022-06-30T12:30:00Z'
            description:
              type: string
              example: avg and max the latency of catalog service
            id:
              maxLength: 36
              minLength: 36
              pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
              type: string
              example: d6a3658e-78d2-47d0-9b81-b2c551f01b09
            isInternal:
              type: boolean
            metricFields:
              type: array
              items:
                $ref: '#/components/schemas/v2.MetricField'
            metricLabels:
              type: array
              items:
                $ref: '#/components/schemas/MetricLabel'
            name:
              type: string
              example: Service_catalog_latency
            permutations:
              $ref: '#/components/schemas/E2MPermutations'
            spansQuery:
              $ref: '#/components/schemas/v2.SpansQuery'
            type:
              $ref: '#/components/schemas/E2MType'
            updateTime:
              type: string
              example: 2022-06-30T12:30:00Z'
          additionalProperties: false
          description: This data structure represents an Event to Metrics (E2M) object.
          externalDocs:
            description: Find out more about events2metrics
            url: >-
              https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
        - title: E2M
          required:
            - name
            - type
          type: object
          properties:
            createTime:
              type: string
              example: 2022-06-30T12:30:00Z'
            description:
              type: string
              example: avg and max the latency of catalog service
            id:
              maxLength: 36
              minLength: 36
              pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
              type: string
              example: d6a3658e-78d2-47d0-9b81-b2c551f01b09
            isInternal:
              type: boolean
            logsQuery:
              $ref: '#/components/schemas/v2.LogsQuery'
            metricFields:
              type: array
              items:
                $ref: '#/components/schemas/v2.MetricField'
            metricLabels:
              type: array
              items:
                $ref: '#/components/schemas/MetricLabel'
            name:
              type: string
              example: Service_catalog_latency
            permutations:
              $ref: '#/components/schemas/E2MPermutations'
            type:
              $ref: '#/components/schemas/E2MType'
            updateTime:
              type: string
              example: 2022-06-30T12:30:00Z'
          additionalProperties: false
          description: This data structure represents an Event to Metrics (E2M) object.
          externalDocs:
            description: Find out more about events2metrics
            url: >-
              https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    E2MAggHistogram:
      title: E2M Aggregate Histogram
      type: object
      properties:
        buckets:
          type: array
          items:
            type: number
            format: float
            example: 2
      description: This data structure represents the e2m aggregate histogram
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    E2MAggSamples:
      title: E2M Aggregate Samples
      type: object
      properties:
        sampleType:
          $ref: '#/components/schemas/SampleType'
      description: This data structure represents the e2m aggregate samples
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    E2MCreateParams:
      oneOf:
        - title: E2M Create Params
          required:
            - name
          type: object
          properties:
            description:
              type: string
              example: avg and max the latency of catalog service
            metricFields:
              type: array
              items:
                $ref: '#/components/schemas/v2.MetricField'
            metricLabels:
              type: array
              items:
                $ref: '#/components/schemas/MetricLabel'
            name:
              type: string
              example: Service catalog latency
            permutationsLimit:
              type: integer
              format: int32
              example: 30000
            spansQuery:
              $ref: '#/components/schemas/v2.SpansQuery'
            type:
              $ref: '#/components/schemas/E2MType'
          additionalProperties: false
          description: >-
            This data structure is used to create a new event to metric
            definition
          externalDocs:
            description: Find out more about events2metrics
            url: >-
              https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
        - title: E2M Create Params
          required:
            - name
          type: object
          properties:
            description:
              type: string
              example: avg and max the latency of catalog service
            logsQuery:
              $ref: '#/components/schemas/v2.LogsQuery'
            metricFields:
              type: array
              items:
                $ref: '#/components/schemas/v2.MetricField'
            metricLabels:
              type: array
              items:
                $ref: '#/components/schemas/MetricLabel'
            name:
              type: string
              example: Service catalog latency
            permutationsLimit:
              type: integer
              format: int32
              example: 30000
            type:
              $ref: '#/components/schemas/E2MType'
          additionalProperties: false
          description: >-
            This data structure is used to create a new event to metric
            definition
          externalDocs:
            description: Find out more about events2metrics
            url: >-
              https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    E2MExecutionRequest:
      oneOf:
        - type: object
          properties:
            create:
              $ref: '#/components/schemas/CreateE2MRequest'
          additionalProperties: false
        - type: object
          properties:
            replace:
              $ref: '#/components/schemas/ReplaceE2MRequest'
          additionalProperties: false
        - type: object
          properties:
            delete:
              $ref: '#/components/schemas/DeleteE2MRequest'
          additionalProperties: false
    E2MExecutionResponse:
      oneOf:
        - type: object
          properties:
            created:
              $ref: '#/components/schemas/CreateE2MResponse'
          additionalProperties: false
        - type: object
          properties:
            replaced:
              $ref: '#/components/schemas/ReplaceE2MResponse'
          additionalProperties: false
        - type: object
          properties:
            deleted:
              $ref: '#/components/schemas/DeleteE2MResponse'
          additionalProperties: false
    E2MPermutations:
      title: E2M Permutations
      required:
        - limit
        - hasExceededLimit
      type: object
      properties:
        hasExceededLimit:
          type: boolean
        limit:
          type: integer
          format: int32
          example: 30000
      description: >-
        This data structure represents the limit of events2metrics permutations
        and if the limit was exceeded
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    E2MType:
      enum:
        - E2M_TYPE_UNSPECIFIED
        - E2M_TYPE_LOGS2METRICS
        - E2M_TYPE_SPANS2METRICS
      type: string
    EmailGroupConfig:
      title: Email group configuration
      type: object
      properties:
        emailAddresses:
          type: array
          items:
            type: string
            example:
              - example@coralogix.com
      externalDocs:
        url: ''
    Empty:
      type: object
    EnabledCount:
      title: Enabled count
      type: object
      properties:
        count:
          type: integer
          description: The count for this enabled status
          format: int64
          example: 25
        enabled:
          type: boolean
          description: Whether the alert is enabled (true) or disabled (false)
          example: true
      description: Count for a specific alert enabled status
      externalDocs:
        url: ''
    EndpointType:
      enum:
        - ENDPOINT_TYPE_DEFAULT_OR_PUBLIC
        - ENDPOINT_TYPE_PRIVATE
      type: string
    Enrichment:
      title: Enrichment
      required:
        - id
        - fieldName
        - enrichmentType
      type: object
      properties:
        enrichedFieldName:
          type: string
          example: 1
        enrichmentType:
          $ref: '#/components/schemas/EnrichmentType'
        fieldName:
          type: string
          example: 1
        id:
          type: integer
          format: int64
          example: 1
        selectedColumns:
          type: array
          items:
            type: string
            example:
              - city
              - population
      additionalProperties: false
      description: This data structure represents an enrichment
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    EnrichmentFieldDefinition:
      type: object
      properties:
        enrichedFieldName:
          type: string
        fieldName:
          type: string
        selectedColumns:
          type: array
          items:
            type: string
      additionalProperties: false
    EnrichmentRequestModel:
      title: Enrichment Prototype
      required:
        - fieldName
        - enrichmentType
      type: object
      properties:
        enrichedFieldName:
          type: string
        enrichmentType:
          $ref: '#/components/schemas/EnrichmentType'
        fieldName:
          type: string
          example: sourceIPs
        selectedColumns:
          type: array
          items:
            type: string
      additionalProperties: false
      description: The enrichment request model
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    EnrichmentType:
      oneOf:
        - type: object
          properties:
            geoIp:
              $ref: '#/components/schemas/GeoIpType'
          additionalProperties: false
        - type: object
          properties:
            suspiciousIp:
              $ref: '#/components/schemas/SuspiciousIpType'
          additionalProperties: false
        - type: object
          properties:
            aws:
              $ref: '#/components/schemas/AwsType'
          additionalProperties: false
        - type: object
          properties:
            customEnrichment:
              $ref: '#/components/schemas/CustomEnrichmentType'
          additionalProperties: false
    EntityLabelCount:
      title: Entity label count
      type: object
      properties:
        count:
          type: integer
          description: The count for this entity label value
          format: int64
          example: 28
        labelKey:
          type: string
          description: The entity label key
          example: environment
        labelValue:
          type: string
          description: The entity label value
          example: production
      description: Count for a specific entity label value
      externalDocs:
        url: ''
    EntityLabelValues:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
    EntityTypeConfigOverrides:
      type: object
      properties:
        entityType:
          $ref: '#/components/schemas/notification_center.EntityType'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/TemplatedConnectorConfigField'
    Equals.Selection:
      oneOf:
        - title: Selection
          type: object
          properties:
            all:
              $ref: '#/components/schemas/Equals.Selection.AllSelection'
          additionalProperties: false
          description: This data structure defines the values for the equality comparison.
          externalDocs:
            url: ''
        - title: Selection
          type: object
          properties:
            list:
              $ref: '#/components/schemas/Equals.Selection.ListSelection'
          additionalProperties: false
          description: This data structure defines the values for the equality comparison.
          externalDocs:
            url: ''
    Equals.Selection.AllSelection:
      title: AllSelection
      type: object
      description: This data structure indicates that all values are selected.
      externalDocs:
        url: ''
    Equals.Selection.ListSelection:
      title: ListSelection
      type: object
      properties:
        values:
          type: array
          items:
            type: string
            description: A list of selected values.
      description: >-
        This data structure represents a selection from a list of specific
        values.
      externalDocs:
        url: ''
    ErrorBudgetAlertDefinition:
      type: object
    ErrorBudgetMetricType:
      type: object
      properties:
        metricFilter:
          $ref: '#/components/schemas/SloMetricFilter'
    ErrorBudgetThreshold:
      title: Error Budget Threshold
      required:
        - rules
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/SloThresholdRule'
      description: Error budget threshold definition
      externalDocs:
        url: ''
    ErrorDetails:
      type: object
      properties:
        cardinality:
          type: integer
          format: int64
        limit:
          type: integer
          format: int64
      additionalProperties: false
    ErrorSli:
      type: object
    ErrorType:
      enum:
        - ERROR_TYPE_UNSPECIFIED
        - GENERAL
        - CARDINALITY_LIMIT_EXCEEDED
      type: string
    Evaluation:
      type: object
      properties:
        evaluationTokens:
          $ref: '#/components/schemas/Token'
        evaluatorName:
          type: string
    EventFlow:
      type: object
      properties:
        flowAlertsMatch:
          type: array
          items:
            $ref: '#/components/schemas/EventFlowMatch'
    EventFlowMatch:
      type: object
      properties:
        from:
          type: string
          format: date-time
        groups:
          type: array
          items:
            $ref: '#/components/schemas/FlowGroupEvents'
        to:
          type: string
          format: date-time
    EventMetricLessThan:
      type: object
      properties:
        avgValueAcrossThreshold:
          type: number
          format: float
        fromTimestamp:
          type: string
          format: date-time
        isDeadman:
          type: boolean
        maxValueAcrossThreshold:
          type: number
          format: float
        minValueAcrossThreshold:
          type: number
          format: float
        percentageOverThreshold:
          type: number
          format: float
        severity:
          $ref: '#/components/schemas/AlertDefSeverity'
        toTimestamp:
          type: string
          format: date-time
      additionalProperties: false
    EventMetricLessThanOrEquals:
      type: object
      properties:
        avgValueAcrossThreshold:
          type: number
          format: float
        fromTimestamp:
          type: string
          format: date-time
        isDeadman:
          type: boolean
        maxValueAcrossThreshold:
          type: number
          format: float
        minValueAcrossThreshold:
          type: number
          format: float
        percentageOverThreshold:
          type: number
          format: float
        severity:
          $ref: '#/components/schemas/AlertDefSeverity'
        toTimestamp:
          type: string
          format: date-time
      additionalProperties: false
    EventMetricMoreThan:
      type: object
      properties:
        avgValueAcrossThreshold:
          type: number
          format: float
        fromTimestamp:
          type: string
          format: date-time
        maxValueAcrossThreshold:
          type: number
          format: float
        minValueAcrossThreshold:
          type: number
          format: float
        percentageOverThreshold:
          type: number
          format: float
        severity:
          $ref: '#/components/schemas/AlertDefSeverity'
        toTimestamp:
          type: string
          format: date-time
      additionalProperties: false
    EventMetricMoreThanOrEquals:
      type: object
      properties:
        avgValueAcrossThreshold:
          type: number
          format: float
        fromTimestamp:
          type: string
          format: date-time
        maxValueAcrossThreshold:
          type: number
          format: float
        minValueAcrossThreshold:
          type: number
          format: float
        percentageOverThreshold:
          type: number
          format: float
        severity:
          $ref: '#/components/schemas/AlertDefSeverity'
        toTimestamp:
          type: string
          format: date-time
      additionalProperties: false
    EventMetricUnusualPayload:
      type: object
      properties:
        distance:
          type: number
          format: double
        extremeSample:
          $ref: '#/components/schemas/v5.ExtremeSample'
        forecastTimestamp:
          type: string
          format: uint64
        fromTimestamp:
          type: string
          format: date-time
        ratioUnusualSamples:
          type: number
          format: double
        searchDetails:
          $ref: '#/components/schemas/TimeRangeWithInterval'
        toTimestamp:
          type: string
          format: date-time
    EventNewValue:
      type: object
      properties:
        coralogixLogMetadata:
          $ref: '#/components/schemas/CoralogixLogMetadata'
        logRecord:
          type: string
        logTimestamp:
          type: string
          format: date-time
    EventNotificationsInstance:
      type: object
      properties:
        crn:
          type: string
          example: >-
            crn:v1:staging:public:logs:eu-gb:a/436fa6f7760f46eba99e22f099c33cb8:5a8b249b-3915-49e7-ad43-030f585d84c5::
        instanceId:
          type: string
          example: 5a8b249b-3915-49e7-ad43-030f585d84c5
        isUsed:
          type: boolean
          example: true
        name:
          type: string
          example: example-name
        regionId:
          type: string
          example: eu-gb
    EventRatioLessThan:
      oneOf:
        - type: object
          properties:
            denominatorHitValue:
              type: string
              format: int64
            fromTimestamp:
              type: string
              format: date-time
            numeratorHitValue:
              type: string
              format: int64
            numeric:
              type: number
              format: float
            severity:
              $ref: '#/components/schemas/AlertDefSeverity'
            toTimestamp:
              type: string
              format: date-time
          additionalProperties: false
        - type: object
          properties:
            denominatorHitValue:
              type: string
              format: int64
            fromTimestamp:
              type: string
              format: date-time
            numeratorHitValue:
              type: string
              format: int64
            severity:
              $ref: '#/components/schemas/AlertDefSeverity'
            special:
              $ref: '#/components/schemas/SpecialRatioValues'
            toTimestamp:
              type: string
              format: date-time
          additionalProperties: false
    EventRatioMoreThan:
      oneOf:
        - type: object
          properties:
            denominatorHitValue:
              type: string
              format: int64
            fromTimestamp:
              type: string
              format: date-time
            numeratorHitValue:
              type: string
              format: int64
            numeric:
              type: number
              format: float
            severity:
              $ref: '#/components/schemas/AlertDefSeverity'
            toTimestamp:
              type: string
              format: date-time
          additionalProperties: false
        - type: object
          properties:
            denominatorHitValue:
              type: string
              format: int64
            fromTimestamp:
              type: string
              format: date-time
            numeratorHitValue:
              type: string
              format: int64
            severity:
              $ref: '#/components/schemas/AlertDefSeverity'
            special:
              $ref: '#/components/schemas/SpecialRatioValues'
            toTimestamp:
              type: string
              format: date-time
          additionalProperties: false
    EventStandardImmediate:
      type: object
      properties:
        coralogixLogMetadata:
          $ref: '#/components/schemas/CoralogixLogMetadata'
        logRecord:
          type: string
        logTimestamp:
          type: string
          format: date-time
    EventStandardLessThan:
      type: object
      properties:
        fromTimestamp:
          type: string
          format: date-time
        hitValue:
          type: string
          format: int64
        isDeadman:
          type: boolean
        severity:
          $ref: '#/components/schemas/AlertDefSeverity'
        toTimestamp:
          type: string
          format: date-time
    EventStandardLessThanUsual:
      type: object
      properties:
        lessThanUsual:
          $ref: '#/components/schemas/EventStandardUnusualPayload'
    EventStandardLessThanUsualEnriched:
      type: object
      properties:
        eventStandardLessThanUsual:
          $ref: '#/components/schemas/EventStandardLessThanUsual'
        prediction:
          $ref: '#/components/schemas/v5.Prediction'
    EventStandardMoreThan:
      type: object
      properties:
        fromTimestamp:
          type: string
          format: date-time
        hitValue:
          type: string
          format: int64
        severity:
          $ref: '#/components/schemas/AlertDefSeverity'
        toTimestamp:
          type: string
          format: date-time
    EventStandardMoreThanUsualEnriched:
      type: object
      properties:
        eventStandardMoreThanUsual:
          $ref: '#/components/schemas/v5.EventStandardMoreThanUsual'
        prediction:
          $ref: '#/components/schemas/v5.Prediction'
    EventStandardUnusualPayload:
      type: object
      properties:
        distance:
          type: number
          format: double
        forecastTimestamp:
          type: string
          format: uint64
        fromTimestamp:
          type: string
          format: date-time
        searchDetails:
          $ref: '#/components/schemas/TimeRangeWithInterval'
        sumHitCount:
          type: string
          format: int64
        toTimestamp:
          type: string
          format: date-time
    EventStats:
      title: Alert event statistics data structure
      type: object
      properties:
        activityAnalysisStats:
          $ref: '#/components/schemas/ActivityAnalysisStats'
        count:
          type: integer
          format: int64
        resolvedCount:
          type: integer
          format: int64
        resolvedPermutationsSamples:
          type: array
          items:
            $ref: '#/components/schemas/Permutation'
        triggeredCount:
          type: integer
          format: int64
        triggeredPermutationsSamples:
          type: array
          items:
            $ref: '#/components/schemas/Permutation'
      externalDocs:
        url: ''
    EventTimeRelativeLessThan:
      oneOf:
        - type: object
          properties:
            denominatorHitValue:
              type: string
              format: int64
            fromTimestamp:
              type: string
              format: date-time
            numeratorHitValue:
              type: string
              format: int64
            numeric:
              type: number
              format: float
            severity:
              $ref: '#/components/schemas/AlertDefSeverity'
            toTimestamp:
              type: string
              format: date-time
          additionalProperties: false
        - type: object
          properties:
            denominatorHitValue:
              type: string
              format: int64
            fromTimestamp:
              type: string
              format: date-time
            numeratorHitValue:
              type: string
              format: int64
            severity:
              $ref: '#/components/schemas/AlertDefSeverity'
            special:
              $ref: '#/components/schemas/SpecialRatioValues'
            toTimestamp:
              type: string
              format: date-time
          additionalProperties: false
    EventTimeRelativeMoreThan:
      oneOf:
        - type: object
          properties:
            denominatorHitValue:
              type: string
              format: int64
            fromTimestamp:
              type: string
              format: date-time
            numeratorHitValue:
              type: string
              format: int64
            numeric:
              type: number
              format: float
            severity:
              $ref: '#/components/schemas/AlertDefSeverity'
            toTimestamp:
              type: string
              format: date-time
          additionalProperties: false
        - type: object
          properties:
            denominatorHitValue:
              type: string
              format: int64
            fromTimestamp:
              type: string
              format: date-time
            numeratorHitValue:
              type: string
              format: int64
            severity:
              $ref: '#/components/schemas/AlertDefSeverity'
            special:
              $ref: '#/components/schemas/SpecialRatioValues'
            toTimestamp:
              type: string
              format: date-time
          additionalProperties: false
    EventTracingImmediate:
      type: object
      properties:
        span:
          $ref: '#/components/schemas/v3.Span'
        timeRange:
          $ref: '#/components/schemas/SpanTimeRange'
        traceIds:
          type: array
          items:
            type: string
    EventTracingMoreThan:
      type: object
      properties:
        countersMap:
          type: object
          additionalProperties:
            type: integer
            format: int64
        timeRange:
          $ref: '#/components/schemas/SpanTimeRange'
    EventTracingMoreThan.CountersMapEntry:
      type: object
      properties:
        key:
          type: integer
          format: int64
        value:
          type: integer
          format: int64
    EventUniqueCount:
      type: object
      properties:
        alertTimeframe:
          type: integer
          format: int64
        cardinalityKey:
          type: string
        countersMap:
          type: object
          additionalProperties:
            type: integer
            format: int64
        valuesSet:
          type: array
          items:
            type: string
        windowStartTimeframeMs:
          type: string
          format: date-time
    EventUniqueCount.CountersMapEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: integer
          format: int64
    EventUnusualPayload:
      type: object
      properties:
        distance:
          type: number
          format: double
        extremeSample:
          $ref: '#/components/schemas/v4.ExtremeSample'
        forecastTimestamp:
          type: string
          format: uint64
        fromTimestamp:
          type: string
          format: date-time
        ratioUnusualSamples:
          type: number
          format: double
        searchDetails:
          $ref: '#/components/schemas/v4.SearchDetails'
        toTimestamp:
          type: string
          format: date-time
    EventsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/CxEventSingleOrMultiple'
    EventsFilter:
      title: EventsFilter
      required:
        - timestamp
        - cxEventTypes
        - cxEventKeys
      type: object
      properties:
        cxEventKeys:
          type: array
          items:
            type: string
            example:
              - test_key
        cxEventLabelsFilters:
          $ref: '#/components/schemas/Filters'
        cxEventMetadataFilters:
          $ref: '#/components/schemas/Filters'
        cxEventTypes:
          type: array
          items:
            type: string
            example:
              - test_type
        timestamp:
          $ref: '#/components/schemas/TimestampRange'
      description: This data structure represents an events filter
      externalDocs:
        url: ''
    EventsQueryFilter:
      type: object
      properties:
        timestamp:
          $ref: '#/components/schemas/TimestampRange'
    EventsStatsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/EventStats'
    ExtensionBinary:
      title: Extension binary
      required:
        - type
        - data
      type: object
      properties:
        data:
          type: string
        type:
          $ref: '#/components/schemas/ExtensionBinary.BinaryType'
      externalDocs:
        url: ''
    ExtensionBinary.BinaryType:
      enum:
        - KIBANA_INDEX_PATTERN
      type: string
    ExtensionData:
      title: Extension data
      required:
        - id
        - name
        - image
        - version
      type: object
      properties:
        binaries:
          type: array
          items:
            $ref: '#/components/schemas/ExtensionBinary'
        changelog:
          type: array
          items:
            $ref: '#/components/schemas/ChangelogEntry'
        darkModeImage:
          type: string
        deprecation:
          $ref: '#/components/schemas/Deprecation'
        description:
          type: string
          example: Integration with AWS CloudWatch for monitoring and logging
        excerpt:
          type: string
          example: Monitor AWS resources and analyze logs with CloudWatch integration
        id:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
        image:
          type: string
        integrationDetails:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationDetail'
        integrations:
          type: array
          items:
            type: string
        isHidden:
          type: boolean
        items:
          type: array
          items:
            $ref: '#/components/schemas/ExtensionItemData'
        keywords:
          type: array
          items:
            type: string
        labels:
          type: array
          items:
            type: string
        name:
          type: string
          example: AWS CloudWatch Extension
        version:
          type: string
          example: v1.0.13
      description: Extension details for ingestion
      externalDocs:
        url: ''
    ExtensionDeployment:
      title: Extension deployment
      required:
        - id
        - version
        - itemIds
      type: object
      properties:
        applications:
          type: array
          items:
            type: string
        id:
          type: string
        itemIds:
          type: array
          items:
            type: string
        subsystems:
          type: array
          items:
            type: string
        version:
          type: string
      externalDocs:
        url: ''
    ExtensionItem:
      title: Extension item
      required:
        - id
        - name
        - targetDomain
        - data
        - permissionResource
      type: object
      properties:
        binaries:
          type: array
          items:
            $ref: '#/components/schemas/ExtensionItemBinary'
        data:
          type: object
        description:
          type: string
        extendedInternalId:
          type: string
        id:
          type: string
        isMandatory:
          type: boolean
        name:
          type: string
        permissionResource:
          $ref: '#/components/schemas/PermissionResource'
        stableId:
          type: string
        targetDomain:
          $ref: '#/components/schemas/TargetDomain'
        uniqueId:
          type: string
      externalDocs:
        url: ''
    ExtensionItemBinary:
      title: Extension item binary
      required:
        - type
        - data
        - fileName
      type: object
      properties:
        data:
          type: string
        fileName:
          type: string
        type:
          $ref: '#/components/schemas/ExtensionItemBinary.BinaryType'
      externalDocs:
        url: ''
    ExtensionItemBinary.BinaryType:
      enum:
        - PREVIEW_IMAGE
        - KIBANA_DASHBOARD_DEFINITION
        - GRAFANA_DASHBOARD_DEFINITION
        - ENRICHMENT_CSV
        - CX_CUSTOM_DASHBOARD_DEFINITION
      type: string
    ExtensionItemData:
      title: Extension item data
      required:
        - name
        - targetDomain
        - data
      type: object
      properties:
        binaries:
          type: array
          items:
            $ref: '#/components/schemas/ExtensionItemBinary'
        data:
          type: object
        description:
          type: string
          example: Less than 60% cocoa
        internalId:
          type: integer
          format: int32
        isMandatory:
          type: boolean
        name:
          type: string
          example: Low cocoa content
        permissionResource:
          $ref: '#/components/schemas/PermissionResource'
        stableId:
          type: string
        targetDomain:
          $ref: '#/components/schemas/TargetDomain'
        uniqueId:
          type: string
      externalDocs:
        url: ''
    ExtensionRevision:
      title: Extension revision
      required:
        - version
      type: object
      properties:
        binaries:
          type: array
          items:
            $ref: '#/components/schemas/ExtensionBinary'
        description:
          type: string
        excerpt:
          type: string
        integrationDetails:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationDetail'
        isTesting:
          type: boolean
        items:
          type: array
          items:
            $ref: '#/components/schemas/ExtensionItem'
        labels:
          type: array
          items:
            type: string
        permissionDeniedItems:
          type: array
          items:
            $ref: '#/components/schemas/ExtensionItem'
        version:
          type: string
      externalDocs:
        url: ''
    ExternalUrl:
      title: External URL
      type: object
      properties:
        url:
          type: string
      externalDocs:
        url: ''
    ExtractParameters:
      type: object
      properties:
        rule:
          type: string
    ExtractRequest:
      oneOf:
        - type: object
          properties:
            ctxDataSourceType:
              $ref: '#/components/schemas/DataSourceType'
            dataSources:
              type: array
              items:
                $ref: '#/components/schemas/DataSource'
            destinationDataSourceTypes:
              type: array
              items:
                $ref: '#/components/schemas/DataSourceType'
            labels:
              type: array
              items:
                type: string
            log:
              $ref: '#/components/schemas/Log'
          additionalProperties: false
        - type: object
          properties:
            ctxDataSourceType:
              $ref: '#/components/schemas/DataSourceType'
            dataSources:
              type: array
              items:
                $ref: '#/components/schemas/DataSource'
            destinationDataSourceTypes:
              type: array
              items:
                $ref: '#/components/schemas/DataSourceType'
            labels:
              type: array
              items:
                type: string
            span:
              $ref: '#/components/schemas/v1.Span'
          additionalProperties: false
    ExtractResponse:
      type: object
      properties:
        extractedLabels:
          type: array
          items:
            $ref: '#/components/schemas/ExtractedLabel'
    ExtractTimestampParameters:
      type: object
      properties:
        format:
          type: string
        standard:
          $ref: '#/components/schemas/FormatStandard'
    ExtractedLabel:
      type: object
      properties:
        dataSource:
          $ref: '#/components/schemas/DataSource'
        description:
          type: string
        destinationExtractionKey:
          type: string
          deprecated: true
        destinationExtractionKeys:
          type: array
          items:
            type: string
            deprecated: true
        destinationTypeExtractionKeys:
          type: array
          items:
            $ref: '#/components/schemas/DataSourceTypeValues'
        displayName:
          type: string
        isCustomLabel:
          type: boolean
        label:
          type: string
        values:
          type: array
          items:
            type: string
    FailedItem:
      title: Failed item
      required:
        - itemId
        - remoteId
        - reason
      type: object
      properties:
        itemId:
          type: string
        reason:
          type: string
        remoteId:
          type: string
      externalDocs:
        url: ''
    FailedToReplaceAlertDef:
      title: Failed to replace alert definition
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The alert definition ID
          example: 123e4567-e89b-12d3-a456-426614174000
      description: An alert definition id that failed to be replaced
      externalDocs:
        url: ''
    FailureReason:
      enum:
        - FAILURE_REASON_UNSPECIFIED
        - INVALID_TEMPLATE
        - FIELD_NOT_FOUND
        - TEMPLATE_EXCEEDS_MAX_LENGTH
        - RENDERED_VALUE_EXCEEDS_MAX_LENGTH
      type: string
    FetchRuleGroup:
      type: object
      properties:
        name:
          type: string
    FetchRuleGroupResult:
      type: object
      properties:
        ruleGroup:
          $ref: '#/components/schemas/OutRuleGroup'
    FetchRuleGroupSet:
      type: object
      properties:
        id:
          type: string
    FieldCondition:
      title: Field condition
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/FieldCondition.ConditionType'
        values:
          type: array
          items:
            $ref: '#/components/schemas/FieldCondition.FieldValue'
      externalDocs:
        url: ''
    FieldCondition.ConditionType:
      enum:
        - UNKNOWN
        - OR
        - AND
      type: string
    FieldCondition.FieldValue:
      title: Field value
      type: object
      properties:
        fieldName:
          type: string
        valuePattern:
          type: string
      externalDocs:
        url: ''
    FieldGroup:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    FieldInformation:
      oneOf:
        - title: Field information
          required:
            - type
          type: object
          properties:
            allowedPattern:
              type: string
            applicableIf:
              $ref: '#/components/schemas/FieldCondition'
            documentationReference:
              type: string
            groupId:
              type: string
            name:
              type: string
            placeholder:
              type: string
            predefined:
              type: boolean
            readonly:
              type: boolean
            required:
              type: boolean
            single:
              $ref: '#/components/schemas/SingleValue'
            templateParamName:
              type: string
            tooltip:
              type: string
            type:
              $ref: '#/components/schemas/InputType'
            upgradeNotice:
              type: string
            visible:
              type: boolean
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Field information
          required:
            - type
          type: object
          properties:
            allowedPattern:
              type: string
            applicableIf:
              $ref: '#/components/schemas/FieldCondition'
            documentationReference:
              type: string
            groupId:
              type: string
            multiText:
              $ref: '#/components/schemas/ListTextValue'
            name:
              type: string
            placeholder:
              type: string
            predefined:
              type: boolean
            readonly:
              type: boolean
            required:
              type: boolean
            templateParamName:
              type: string
            tooltip:
              type: string
            type:
              $ref: '#/components/schemas/InputType'
            upgradeNotice:
              type: string
            visible:
              type: boolean
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Field information
          required:
            - type
          type: object
          properties:
            allowedPattern:
              type: string
            applicableIf:
              $ref: '#/components/schemas/FieldCondition'
            documentationReference:
              type: string
            groupId:
              type: string
            multipleSelection:
              $ref: '#/components/schemas/MultipleSelectionValue'
            name:
              type: string
            placeholder:
              type: string
            predefined:
              type: boolean
            readonly:
              type: boolean
            required:
              type: boolean
            templateParamName:
              type: string
            tooltip:
              type: string
            type:
              $ref: '#/components/schemas/InputType'
            upgradeNotice:
              type: string
            visible:
              type: boolean
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Field information
          required:
            - type
          type: object
          properties:
            allowedPattern:
              type: string
            applicableIf:
              $ref: '#/components/schemas/FieldCondition'
            documentationReference:
              type: string
            groupId:
              type: string
            name:
              type: string
            placeholder:
              type: string
            predefined:
              type: boolean
            readonly:
              type: boolean
            required:
              type: boolean
            singleBoolean:
              $ref: '#/components/schemas/SingleBooleanValue'
            templateParamName:
              type: string
            tooltip:
              type: string
            type:
              $ref: '#/components/schemas/InputType'
            upgradeNotice:
              type: string
            visible:
              type: boolean
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Field information
          required:
            - type
          type: object
          properties:
            allowedPattern:
              type: string
            applicableIf:
              $ref: '#/components/schemas/FieldCondition'
            documentationReference:
              type: string
            groupId:
              type: string
            name:
              type: string
            placeholder:
              type: string
            predefined:
              type: boolean
            readonly:
              type: boolean
            required:
              type: boolean
            selection:
              $ref: '#/components/schemas/SelectionValue'
            templateParamName:
              type: string
            tooltip:
              type: string
            type:
              $ref: '#/components/schemas/InputType'
            upgradeNotice:
              type: string
            visible:
              type: boolean
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Field information
          required:
            - type
          type: object
          properties:
            allowedPattern:
              type: string
            applicableIf:
              $ref: '#/components/schemas/FieldCondition'
            documentationReference:
              type: string
            groupId:
              type: string
            name:
              type: string
            placeholder:
              type: string
            predefined:
              type: boolean
            readonly:
              type: boolean
            required:
              type: boolean
            singleNumber:
              $ref: '#/components/schemas/IntegrationRevision.SingleNumericValue'
            templateParamName:
              type: string
            tooltip:
              type: string
            type:
              $ref: '#/components/schemas/InputType'
            upgradeNotice:
              type: string
            visible:
              type: boolean
          additionalProperties: false
          externalDocs:
            url: ''
    FieldStatistics:
      type: object
      properties:
        fieldStatistics:
          type: object
          additionalProperties:
            type: string
            format: int64
    FieldStatisticsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
          format: int64
    File:
      oneOf:
        - title: File
          type: object
          properties:
            extension:
              type: string
              example: csv
            name:
              type: string
              example: file_name
            size:
              type: integer
              format: int64
              example: 100
            textual:
              type: string
              example: row1,row2 value1,value2
          additionalProperties: false
          description: This data structure represents a file
          externalDocs:
            description: Find out more about enrichments
            url: >-
              https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
        - title: File
          type: object
          properties:
            binary:
              type: string
              format: byte
              example: '0xFABB32'
            extension:
              type: string
              example: csv
            name:
              type: string
              example: file_name
            size:
              type: integer
              format: int64
              example: 100
          additionalProperties: false
          description: This data structure represents a file
          externalDocs:
            description: Find out more about enrichments
            url: >-
              https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    Filter.Equals:
      title: Equals
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/Equals.Selection'
      description: This data structure represents an equality comparison operation.
      externalDocs:
        url: ''
    Filter.LogsFilter:
      title: LogsFilter
      type: object
      properties:
        field:
          type: string
          description: The log field to which the filter is applied.
        observationField:
          $ref: '#/components/schemas/ObservationField'
        operator:
          $ref: '#/components/schemas/Filter.Operator'
      description: This data structure represents the filter criteria for logs.
      externalDocs:
        url: ''
    Filter.NotEquals:
      title: NotEquals
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/NotEquals.Selection'
      description: This data structure represents a non-equality comparison operation.
      externalDocs:
        url: ''
    Filter.Operator:
      oneOf:
        - title: Operator
          type: object
          properties:
            equals:
              $ref: '#/components/schemas/Filter.Equals'
          additionalProperties: false
          description: This data structure defines the comparison operation for the filter.
          externalDocs:
            url: ''
        - title: Operator
          type: object
          properties:
            notEquals:
              $ref: '#/components/schemas/Filter.NotEquals'
          additionalProperties: false
          description: This data structure defines the comparison operation for the filter.
          externalDocs:
            url: ''
    Filter.Source:
      oneOf:
        - title: Source
          type: object
          properties:
            logs:
              $ref: '#/components/schemas/Filter.LogsFilter'
          additionalProperties: false
          description: Defines the type of data the filter applies to.
          externalDocs:
            url: ''
        - title: Source
          type: object
          properties:
            spans:
              $ref: '#/components/schemas/SpansFilter'
          additionalProperties: false
          description: Defines the type of data the filter applies to.
          externalDocs:
            url: ''
        - title: Source
          type: object
          properties:
            metrics:
              $ref: '#/components/schemas/MetricsFilter'
          additionalProperties: false
          description: Defines the type of data the filter applies to.
          externalDocs:
            url: ''
    FilterByAlertSchedulerRuleIds:
      oneOf:
        - type: object
          properties:
            alertSchedulerIds:
              $ref: '#/components/schemas/AlertSchedulerRuleIds'
          additionalProperties: false
        - type: object
          properties:
            alertSchedulerVersionIds:
              $ref: '#/components/schemas/AlertSchedulerRuleVersionIds'
          additionalProperties: false
    FilterOptionCounts:
      title: Filter option counts
      type: object
      properties:
        enabledCounts:
          type: array
          items:
            $ref: '#/components/schemas/EnabledCount'
        entityLabelCounts:
          type: array
          items:
            $ref: '#/components/schemas/EntityLabelCount'
        priorityCounts:
          type: array
          items:
            $ref: '#/components/schemas/PriorityCount'
        statusCounts:
          type: array
          items:
            $ref: '#/components/schemas/StatusCount'
        typeCounts:
          type: array
          items:
            $ref: '#/components/schemas/TypeCount'
      description: Counts for different filter options
      externalDocs:
        url: ''
    FilterOptionCountsEnabledFilter:
      title: Filter option counts enabled filter
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether to filter for enabled (true) or disabled (false) alerts
          example: true
      description: Filter by alert definition enabled status for counting options
      externalDocs:
        url: ''
    FilterOptionCountsEntityLabelsFilter:
      title: Filter option counts entity labels filter
      type: object
      properties:
        entityLabels:
          type: object
          additionalProperties:
            type: string
          description: The entity label key-value pairs to filter by
          example:
            environment: production
            team: backend
        valuesOperator:
          $ref: '#/components/schemas/FilterValuesOperator'
      description: Filter by alert definition entity labels with And/Or options
      externalDocs:
        url: ''
    FilterOptionCountsEntityLabelsFilter.EntityLabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    FilterOptionCountsFilter:
      title: Filter option counts filter
      type: object
      properties:
        enabledFilter:
          $ref: '#/components/schemas/FilterOptionCountsEnabledFilter'
        entityLabelsFilter:
          $ref: '#/components/schemas/FilterOptionCountsEntityLabelsFilter'
        nameFilter:
          $ref: '#/components/schemas/FilterOptionCountsNameFilter'
        priorityFilter:
          $ref: '#/components/schemas/FilterOptionCountsPriorityFilter'
        statusFilter:
          $ref: '#/components/schemas/FilterOptionCountsStatusFilter'
        typeFilter:
          $ref: '#/components/schemas/FilterOptionCountsTypeFilter'
      description: Filter configuration for counting filter options
      externalDocs:
        url: ''
    FilterOptionCountsNameFilter:
      title: Filter option counts name filter
      type: object
      properties:
        matcher:
          $ref: '#/components/schemas/alerts.v3.FilterMatcher'
        name:
          type: array
          items:
            type: string
            description: >-
              The name(s) of the alert definition - multiple values are OR'd
              together
            example:
              - My Alert
              - Another Alert
      description: Filter by alert definition names for counting options
      externalDocs:
        url: ''
    FilterOptionCountsPriorityFilter:
      title: Filter option counts priority filter
      type: object
      properties:
        priority:
          type: array
          items:
            $ref: '#/components/schemas/AlertDefPriority'
      description: Filter by alert definition priorities
      externalDocs:
        url: ''
    FilterOptionCountsRequest:
      title: Filter option counts request
      type: object
      properties:
        queryFilter:
          $ref: '#/components/schemas/FilterOptionCountsFilter'
      description: Request to get counts for filter options based on applied filters
      externalDocs:
        url: ''
    FilterOptionCountsResponse:
      title: Filter option counts response
      type: object
      properties:
        counts:
          $ref: '#/components/schemas/FilterOptionCounts'
      description: Response containing counts for different filter options
      externalDocs:
        url: ''
    FilterOptionCountsStatusFilter:
      title: Filter option counts status filter
      type: object
      properties:
        matcher:
          $ref: '#/components/schemas/alerts.v3.FilterMatcher'
        status:
          type: array
          items:
            $ref: '#/components/schemas/AlertDefStatus'
      description: Filter by alert definition status for counting options
      externalDocs:
        url: ''
    FilterOptionCountsTypeFilter:
      title: Filter option counts type filter
      type: object
      properties:
        type:
          type: array
          items:
            $ref: '#/components/schemas/AlertDefType'
      description: Filter by alert definition types for counting options
      externalDocs:
        url: ''
    FilterPathAndValues:
      oneOf:
        - title: FilterPathAndValues
          required:
            - path
            - values
          type: object
          properties:
            multipleValues:
              $ref: '#/components/schemas/MultipleValues'
            path:
              type: string
              example: test
          additionalProperties: false
          description: This data structure represents a filter path and values
          externalDocs:
            url: ''
        - title: FilterPathAndValues
          required:
            - path
            - values
          type: object
          properties:
            filters:
              $ref: '#/components/schemas/Filters'
            path:
              type: string
              example: test
          additionalProperties: false
          description: This data structure represents a filter path and values
          externalDocs:
            url: ''
    FilterType:
      enum:
        - FILTER_TYPE_UNSPECIFIED
        - FILTER_TYPE_STARTS_WITH
        - FILTER_TYPE_ENDS_WITH
        - FILTER_TYPE_CONTAINS
        - FILTER_TYPE_EXACT
      type: string
    FilterValuesOperator:
      enum:
        - FILTER_VALUES_OPERATOR_UNSPECIFIED
        - FILTER_VALUES_OPERATOR_OR
        - FILTER_VALUES_OPERATOR_AND
      type: string
    Filters:
      title: Filters
      required:
        - pathAndValues
      type: object
      properties:
        operator:
          $ref: '#/components/schemas/v3.FilterOperator'
        pathAndValues:
          type: array
          items:
            $ref: '#/components/schemas/FilterPathAndValues'
      description: This data structure represents a filter
      externalDocs:
        url: ''
    First:
      type: object
    FlowGroupEvents:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/AlertEventOut'
        resolvedAlerts:
          type: array
          items:
            type: string
    FlowStages:
      title: Flow stages
      required:
        - timeframeMs
        - timeframeType
      type: object
      properties:
        flowStagesGroups:
          $ref: '#/components/schemas/FlowStagesGroups'
        timeframeMs:
          type: string
          format: int64
        timeframeType:
          $ref: '#/components/schemas/TimeframeType'
      additionalProperties: false
      description: Defines stages in a flow alert
      externalDocs:
        url: ''
    FlowStagesGroup:
      title: Flow stage group
      required:
        - alertDefs
        - nextOp
        - alertsOp
      type: object
      properties:
        alertDefs:
          type: array
          items:
            $ref: '#/components/schemas/FlowStagesGroupsAlertDefs'
        alertsOp:
          $ref: '#/components/schemas/AlertsOp'
        nextOp:
          $ref: '#/components/schemas/NextOp'
      description: Defines a group of stages in a flow alert
      externalDocs:
        url: ''
    FlowStagesGroups:
      title: Flow stage groups
      required:
        - groups
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/FlowStagesGroup'
      description: Groups of stages in a flow alert
      externalDocs:
        url: ''
    FlowStagesGroupsAlertDefs:
      title: Flow stage group alert definitions
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The alert definition ID
          example: 123e4567-e89b-12d3-a456-426614174000
        not:
          type: boolean
          description: Whether to negate the alert definition or not.
          example: true
      description: Alert definitions for a flow stage group
      externalDocs:
        url: ''
    FlowType:
      title: Flow alert type
      required:
        - stages
      type: object
      properties:
        enforceSuppression:
          type: boolean
        stages:
          type: array
          items:
            $ref: '#/components/schemas/FlowStages'
      description: Configuration for flow-based alerts with multiple stages
      externalDocs:
        description: Learn more about flow alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/flow-alerts/
    FolderPath:
      type: object
      properties:
        segments:
          type: array
          items:
            type: string
    Format:
      oneOf:
        - type: object
          properties:
            logsAvro:
              $ref: '#/components/schemas/LogsAvro'
          additionalProperties: false
        - type: object
          properties:
            spansAvro:
              $ref: '#/components/schemas/SpansAvro'
          additionalProperties: false
        - type: object
          properties:
            genericEventAvro:
              $ref: '#/components/schemas/GenericEventAvro'
          additionalProperties: false
        - type: object
          properties:
            wideParquet:
              $ref: '#/components/schemas/WideParquet'
          additionalProperties: false
        - type: object
          properties:
            csv:
              $ref: '#/components/schemas/Csv'
          additionalProperties: false
    FormatStandard:
      enum:
        - FORMAT_STANDARD_STRFTIME_OR_UNSPECIFIED
        - FORMAT_STANDARD_JAVASDF
        - FORMAT_STANDARD_GOLANG
        - FORMAT_STANDARD_SECONDSTS
        - FORMAT_STANDARD_MILLITS
        - FORMAT_STANDARD_MICROTS
        - FORMAT_STANDARD_NANOTS
      type: string
    FullDataprimeQuery:
      type: object
      properties:
        raw:
          $ref: '#/components/schemas/common.DataprimeQuery'
        serialized:
          $ref: '#/components/schemas/SerializedDataprimeQuery'
    Gauge.Aggregation:
      enum:
        - AGGREGATION_UNSPECIFIED
        - AGGREGATION_LAST
        - AGGREGATION_MIN
        - AGGREGATION_MAX
        - AGGREGATION_AVG
        - AGGREGATION_SUM
      type: string
    Gauge.DataprimeQuery:
      title: DataprimeQuery
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/common.DataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter.Source'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A Dataprime variant of the query
      externalDocs:
        url: ''
    Gauge.LogsQuery:
      title: LogsQuery
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/Gauge.Aggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter.LogsFilter'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        logsAggregation:
          $ref: '#/components/schemas/LogsAggregation'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A logs variant of the query
      externalDocs:
        url: ''
    Gauge.MetricsQuery:
      title: MetricsQuery
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/Gauge.Aggregation'
        editorMode:
          $ref: '#/components/schemas/MetricsQueryEditorMode'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/MetricsFilter'
        promqlQuery:
          $ref: '#/components/schemas/PromQlQuery'
        promqlQueryType:
          $ref: '#/components/schemas/PromQLQueryType'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A metrics variant of the query
      externalDocs:
        url: ''
    Gauge.Query:
      oneOf:
        - type: object
          properties:
            metrics:
              $ref: '#/components/schemas/Gauge.MetricsQuery'
          additionalProperties: false
        - type: object
          properties:
            logs:
              $ref: '#/components/schemas/Gauge.LogsQuery'
          additionalProperties: false
        - type: object
          properties:
            spans:
              $ref: '#/components/schemas/Gauge.SpansQuery'
          additionalProperties: false
        - type: object
          properties:
            dataprime:
              $ref: '#/components/schemas/Gauge.DataprimeQuery'
          additionalProperties: false
    Gauge.SpansQuery:
      title: SpansQuery
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/Gauge.Aggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/SpansFilter'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/SpanField'
        groupBys:
          type: array
          items:
            $ref: '#/components/schemas/SpanObservationField'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
        spansAggregation:
          $ref: '#/components/schemas/SpansAggregation'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A spans variant of the query
      externalDocs:
        url: ''
    Gauge.Threshold:
      title: Threshold
      type: object
      properties:
        color:
          type: string
          description: Color of the threshold
        from:
          type: number
          description: Minimum bound value of the threshold
          format: double
        label:
          type: string
          description: Optional label of the threshold
      description: Definition of a single gauge threshold
      externalDocs:
        url: ''
    Gauge.ThresholdBy:
      enum:
        - THRESHOLD_BY_UNSPECIFIED
        - THRESHOLD_BY_VALUE
        - THRESHOLD_BY_BACKGROUND
      type: string
    Gauge.Unit:
      enum:
        - UNIT_UNSPECIFIED
        - UNIT_NUMBER
        - UNIT_PERCENT
        - UNIT_MICROSECONDS
        - UNIT_MILLISECONDS
        - UNIT_SECONDS
        - UNIT_BYTES
        - UNIT_KBYTES
        - UNIT_MBYTES
        - UNIT_GBYTES
        - UNIT_BYTES_IEC
        - UNIT_KIBYTES
        - UNIT_MIBYTES
        - UNIT_GIBYTES
        - UNIT_EUR_CENTS
        - UNIT_EUR
        - UNIT_USD_CENTS
        - UNIT_USD
        - UNIT_CUSTOM
        - UNIT_PERCENT_ZERO_ONE
        - UNIT_PERCENT_ZERO_HUNDRED
        - UNIT_NANOSECONDS
      type: string
    GenericDimension:
      title: Generic Dimension
      type: object
      properties:
        key:
          type: string
          example: key
        value:
          type: string
          example: value
      description: This data structure represents a generic dimension.
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    GenericEventAvro:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/generic.v1.Version'
    GenericIntegrationParameters:
      title: Generic integration parameters
      type: object
      properties:
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
      externalDocs:
        url: ''
    GenericWebhook:
      title: Generic webhook
      type: object
      description: This data structure represents a generic webhook integration.
      externalDocs:
        url: ''
    GenericWebhookConfig:
      title: Generic webhook configuration
      required:
        - uuid
        - method
      type: object
      properties:
        headers:
          type: object
          additionalProperties:
            type: string
          example:
            Content-Type: application/json
        method:
          $ref: '#/components/schemas/MethodType'
        payload:
          type: string
          example:
            key: value
        uuid:
          type: string
          example: d838cd7b-087b-40c6-bc33-80997020f5d0
      externalDocs:
        url: ''
    GeoIpType:
      type: object
      properties:
        withAsn:
          type: boolean
      additionalProperties: false
    GetActionRequest:
      type: object
      properties:
        id:
          type: string
    GetActionResponse:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/v2.Action'
    GetAlertDefByVersionIdRequest:
      title: Get alert definition by version ID request
      required:
        - alertVersionId
      type: object
      properties:
        alertVersionId:
          type: string
          description: Alert version ID
          example: 123e4567-e89b-12d3-a456-426614174000
      description: A request to retrieve an alert definition by version ID
      externalDocs:
        url: ''
    GetAlertDefByVersionIdResponse:
      title: Get alert definition by version ID response
      required:
        - alertDef
      type: object
      properties:
        alertDef:
          $ref: '#/components/schemas/AlertDef'
      description: A response that contains an alert definition for the requested version
      externalDocs:
        url: ''
    GetAlertDefRequest:
      title: Get alert definition request
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: Alert definition ID
          example: 123e4567-e89b-12d3-a456-426614174000
      description: A request to retrieve an alert definition by ID
      externalDocs:
        url: ''
    GetAlertDefResponse:
      title: Get alert definition response
      required:
        - alertDef
      type: object
      properties:
        alertDef:
          $ref: '#/components/schemas/AlertDef'
      description: A response containing the requested alert definition
      externalDocs:
        url: ''
    GetAlertEventRequest:
      title: Get alert event by ID request
      type: object
      properties:
        id:
          type: string
        orderBys:
          type: array
          items:
            $ref: '#/components/schemas/AlertEventOrderBy'
        pagination:
          $ref: '#/components/schemas/alerts.v3.PaginationRequest'
      externalDocs:
        url: ''
    GetAlertEventResponse:
      oneOf:
        - title: Get alert event response
          type: object
          properties:
            id:
              type: string
            pagination:
              $ref: '#/components/schemas/alerts.v3.PaginationResponse'
            singlePermutation:
              $ref: '#/components/schemas/AlertEvent'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Get alert event response
          type: object
          properties:
            id:
              type: string
            multiplePermutation:
              $ref: '#/components/schemas/AlertEventMultiplePermutation'
            pagination:
              $ref: '#/components/schemas/alerts.v3.PaginationResponse'
          additionalProperties: false
          externalDocs:
            url: ''
    GetAlertEventStatsRequest:
      title: Get alert event statistics request
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
        orderBys:
          type: array
          items:
            $ref: '#/components/schemas/AlertEventOrderBy'
      externalDocs:
        url: ''
    GetAlertEventStatsResponse:
      title: Get alert event statistics response
      type: object
      properties:
        eventsStats:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EventStats'
      externalDocs:
        url: ''
    GetAlertSchedulerRuleRequest:
      title: Get alert scheduler rule request data structure
      required:
        - alertSchedulerRuleId
      type: object
      properties:
        alertSchedulerRuleId:
          type: string
      description: This is a request sent to get an alert scheduler rule
      externalDocs:
        description: Find out more about alert scheduler rules in our documentation.
        url: >-
          https://coralogix.com/docs/developer-portal/apis/data-management/alert-suppression-rules-api/
    GetAlertSchedulerRuleResponse:
      title: Get alert scheduler rule response data structure
      required:
        - alertSchedulerRule
      type: object
      properties:
        alertSchedulerRule:
          $ref: '#/components/schemas/AlertSchedulerRule'
      description: This is a response sent to get an alert scheduler rule
      externalDocs:
        description: Find out more about alert scheduler rules in our documentation.
        url: >-
          https://coralogix.com/docs/developer-portal/apis/data-management/alert-suppression-rules-api/
    GetAllExtensionsRequest:
      title: Get all extensions request
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/GetAllExtensionsRequest.Filter'
        includeHiddenExtensions:
          type: boolean
      description: Request to list all extensions
      externalDocs:
        url: ''
    GetAllExtensionsRequest.Filter:
      title: A filter structure for a request to get all extensions
      type: object
      properties:
        integrations:
          type: array
          items:
            type: string
      description: Filter by integration ids
      externalDocs:
        url: ''
    GetAllExtensionsResponse:
      title: Get all extensions response
      type: object
      properties:
        extensions:
          type: array
          items:
            $ref: '#/components/schemas/GetAllExtensionsResponse.Extension'
      description: Response to list all extensions
      externalDocs:
        url: ''
    GetAllExtensionsResponse.Extension:
      title: Extension
      required:
        - id
        - name
        - image
      type: object
      properties:
        darkModeImage:
          type: string
        deprecation:
          $ref: '#/components/schemas/Deprecation'
        id:
          type: string
        image:
          type: string
        integrations:
          type: array
          items:
            type: string
        isHidden:
          type: boolean
        keywords:
          type: array
          items:
            type: string
        name:
          type: string
        revisions:
          type: array
          items:
            $ref: '#/components/schemas/GetAllExtensionsResponse.Revision'
      externalDocs:
        url: ''
    GetAllExtensionsResponse.Revision:
      title: Revision
      required:
        - version
        - summary
      type: object
      properties:
        description:
          type: string
        excerpt:
          type: string
        integrationDetails:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationDetail'
        labels:
          type: array
          items:
            type: string
        summary:
          $ref: '#/components/schemas/RevisionSummary'
        version:
          type: string
      externalDocs:
        url: ''
    GetApiKeyRequest:
      title: Get Api Key Request
      required:
        - keyId
      type: object
      properties:
        keyId:
          type: string
          example: my_key_id
      description: This data structure is used to retrieve an API key.
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
    GetApiKeyResponse:
      title: Get Api Key Response
      required:
        - keyInfo
      type: object
      properties:
        keyInfo:
          $ref: '#/components/schemas/KeyInfo'
      description: This data structure is the response obtained when retrieving an API key.
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
    GetBulkAlertSchedulerRuleRequest:
      title: Get bulk alert scheduler rule request data structure
      type: object
      properties:
        activeTimeframe:
          $ref: '#/components/schemas/ActiveTimeframe'
        alertSchedulerRulesIds:
          $ref: '#/components/schemas/FilterByAlertSchedulerRuleIds'
        enabled:
          type: boolean
        nextPageToken:
          type: string
      additionalProperties: false
      description: This is a request sent to get multiple alert scheduler rules
      externalDocs:
        description: Find out more about alert scheduler rules in our documentation.
        url: >-
          https://coralogix.com/docs/developer-portal/apis/data-management/alert-suppression-rules-api/
    GetBulkAlertSchedulerRuleResponse:
      title: Get bulk alert scheduler rule response data structure
      required:
        - alertSchedulerRules
      type: object
      properties:
        alertSchedulerRules:
          type: array
          items:
            $ref: '#/components/schemas/AlertSchedulerRuleWithActiveTimeframe'
        nextPageToken:
          type: string
      description: This is a response sent after getting multiple alert scheduler rules
      externalDocs:
        description: Find out more about alert scheduler rules in our documentation.
        url: >-
          https://coralogix.com/docs/developer-portal/apis/data-management/alert-suppression-rules-api/
    GetCompanyDataSourcesInternalRequest:
      type: object
    GetCompanyDataSourcesInternalResponse:
      type: object
      properties:
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/DataSource'
    GetCompanyDataSourcesRequest:
      type: object
    GetCompanyDataSourcesResponse:
      type: object
      properties:
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/DataSource'
    GetCompanyEnrichmentSettingsRequest:
      type: object
    GetCompanyEnrichmentSettingsResponse:
      type: object
      properties:
        enrichmentSettings:
          $ref: '#/components/schemas/CompanyEnrichmentSettings'
    GetCompanyIpAccessSettingsRequest:
      title: Get company IP access settings request
      type: object
      properties:
        id:
          type: string
          description: >-
            The ID of the company IP access settings to get. If it's not
            provided, the id will be derived from the authorization header.
      additionalProperties: false
      description: >-
        This data structure represents the request to get company IP access
        settings.
      externalDocs:
        url: ''
    GetCompanyIpAccessSettingsResponse:
      title: Get company IP access settings response
      type: object
      properties:
        settings:
          $ref: '#/components/schemas/CompanyIpAccessSettings'
      description: >-
        This data structure represents the response to get company IP access
        settings.
      externalDocs:
        url: ''
    GetCompanyPoliciesRequest:
      type: object
      properties:
        enabledOnly:
          type: boolean
        sourceType:
          $ref: '#/components/schemas/v1.SourceType'
      additionalProperties: false
    GetCompanyPoliciesResponse:
      type: object
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/Policy'
    GetCompanyProvidersRequest:
      type: object
    GetCompanyProvidersResponse:
      type: object
      properties:
        companyProviders:
          type: array
          items:
            type: string
    GetCompanyUsageLimitsRequest:
      type: object
    GetCompanyUsageLimitsResponse:
      type: object
      properties:
        companyId:
          type: string
        limits:
          $ref: '#/components/schemas/Counts'
        usage:
          $ref: '#/components/schemas/Counts'
    GetConfigurationRequest:
      title: Get Configuration Request
      required:
        - teamId
      type: object
      properties:
        teamId:
          type: integer
          format: int64
      description: >-
        This data structure is used to retrieve the configuration of a SAML
        service provider and identity provider
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    GetConfigurationResponse:
      title: Get Configuration Response
      required:
        - teamId
        - spParameters
        - idpParameters
      type: object
      properties:
        idpDetails:
          $ref: '#/components/schemas/IDPDetails'
        idpParameters:
          $ref: '#/components/schemas/IDPParameters'
        spParameters:
          $ref: '#/components/schemas/SPParameters'
        teamId:
          type: integer
          format: int64
      additionalProperties: false
      description: >-
        This data structure is obtained as a response to a request to retrieve
        the configuration of a SAML service provider and identity provider
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    GetConnectorRequest:
      title: Get Connector Request
      type: object
      properties:
        id:
          type: string
      description: Request to retrieve a connector
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    GetConnectorResponse:
      title: Get Connector Response
      type: object
      properties:
        connector:
          $ref: '#/components/schemas/Connector'
      description: Response containing the requested connector
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    GetConnectorTypeSummariesRequest:
      title: Get Connector Type Summaries Request
      type: object
      properties:
        supportedByEntityType:
          $ref: '#/components/schemas/notification_center.EntityType'
      additionalProperties: false
      description: Request to retrieve summaries of connector types
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    GetConnectorTypeSummariesResponse:
      title: Get Connector Type Summaries Response
      type: object
      properties:
        connectorTypeSummaries:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorTypeSummary'
      description: Response containing summaries of connector types
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    GetContextualDataIntegrationDefinitionRequest:
      title: Get contextual data integration definition request
      required:
        - id
      type: object
      properties:
        id:
          type: string
        includeTestingIntegrations:
          type: boolean
      externalDocs:
        url: ''
    GetContextualDataIntegrationDefinitionResponse:
      title: Get contextual data integration definition response
      required:
        - integrationDefinition
      type: object
      properties:
        integrationDefinition:
          $ref: '#/components/schemas/IntegrationDefinition'
      externalDocs:
        url: ''
    GetContextualDataIntegrationDetailsRequest:
      title: Get contextual data integration details request
      required:
        - id
      type: object
      properties:
        id:
          type: string
          example: 076f4188-05e0-4ed3-afeb-653ad182ccb7
        includeTestingRevisions:
          type: boolean
      externalDocs:
        url: ''
    GetContextualDataIntegrationDetailsResponse:
      title: Get contextual data integration details response
      required:
        - integrationDetail
      type: object
      properties:
        integrationDetail:
          $ref: '#/components/schemas/IntegrationDetails'
      externalDocs:
        url: ''
    GetContextualDataIntegrationsRequest:
      title: Get contextual data integrations request
      type: object
      properties:
        includeTestingIntegrations:
          type: boolean
      externalDocs:
        url: ''
    GetContextualDataIntegrationsResponse:
      title: Get contextual data integrations response
      type: object
      properties:
        integrations:
          type: array
          items:
            $ref: >-
              #/components/schemas/GetContextualDataIntegrationsResponse.IntegrationWithCounts
      externalDocs:
        url: ''
    GetContextualDataIntegrationsResponse.IntegrationWithCounts:
      title: Integration with counts
      required:
        - integration
        - amountIntegrations
      type: object
      properties:
        amountIntegrations:
          type: integer
          format: int64
        errors:
          type: array
          items:
            type: string
        integration:
          $ref: '#/components/schemas/Integration'
        isNew:
          type: boolean
        upgradeAvailable:
          type: boolean
      externalDocs:
        url: ''
    GetCustomEnrichmentRequest:
      title: Get Custom Enrichment Request
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
      description: This is used to retrieve a custom enrichment by id
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    GetCustomEnrichmentResponse:
      title: Get Custom Enrichment Response
      required:
        - customEnrichment
      type: object
      properties:
        customEnrichment:
          $ref: '#/components/schemas/CustomEnrichment'
      description: >-
        This response data structure is obtained when a custom enrichment is
        retrieved
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    GetCustomEnrichmentsRequest:
      type: object
    GetCustomEnrichmentsResponse:
      title: Get Custom Enrichments Response
      required:
        - customEnrichments
      type: object
      properties:
        customEnrichments:
          type: array
          items:
            $ref: '#/components/schemas/CustomEnrichment'
      description: >-
        This response data structure is obtained when all custom enrichments are
        retrieved
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    GetCustomLabelMappingsRequest:
      type: object
      properties:
        dataSourceTypes:
          type: array
          items:
            $ref: '#/components/schemas/DataSourceType'
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/DataSource'
        labels:
          type: array
          items:
            type: string
    GetCustomLabelMappingsResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/LabelMapping'
    GetCustomRoleRequest:
      type: object
      properties:
        roleId:
          type: integer
          format: int64
    GetCustomRoleResponse:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/v2.CustomRole'
      additionalProperties: false
    GetDailyUsageEvaluationTokensRequest:
      oneOf:
        - type: object
          properties:
            range:
              $ref: '#/components/schemas/v2.Range'
          additionalProperties: false
        - type: object
          properties:
            dateRange:
              $ref: '#/components/schemas/v2.DateRange'
          additionalProperties: false
    GetDailyUsageEvaluationTokensResponse:
      type: object
      properties:
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/DetailedDailyEvaluationTokens'
    GetDailyUsageProcessedGbsRequest:
      oneOf:
        - type: object
          properties:
            range:
              $ref: '#/components/schemas/v2.Range'
          additionalProperties: false
        - type: object
          properties:
            dateRange:
              $ref: '#/components/schemas/v2.DateRange'
          additionalProperties: false
    GetDailyUsageProcessedGbsResponse:
      type: object
      properties:
        gbs:
          type: array
          items:
            $ref: '#/components/schemas/DetailedDailyProcessedGbs'
    GetDailyUsageUnitsRequest:
      oneOf:
        - type: object
          properties:
            range:
              $ref: '#/components/schemas/v2.Range'
          additionalProperties: false
        - type: object
          properties:
            dateRange:
              $ref: '#/components/schemas/v2.DateRange'
          additionalProperties: false
    GetDailyUsageUnitsResponse:
      type: object
      properties:
        units:
          type: array
          items:
            $ref: '#/components/schemas/DetailedDailyUnits'
    GetDashboardBySlugRequest:
      title: Get dashboard by URL slug request data structure
      required:
        - slug
      type: object
      properties:
        slug:
          type: string
      description: This is a request to get a specific custom dashboard by its URL slug
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    GetDashboardBySlugResponse:
      title: Get dashboard by URL slug response data structure
      type: object
      properties:
        authorId:
          type: string
        authorName:
          type: string
        createdAt:
          type: string
          format: date-time
        createdOriginType:
          $ref: '#/components/schemas/TokenOriginType'
        dashboard:
          $ref: '#/components/schemas/Dashboard'
        isLocked:
          type: boolean
        lockerAuthorId:
          type: string
        lockerName:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedOriginType:
          $ref: '#/components/schemas/TokenOriginType'
        updaterAuthorId:
          type: string
        updaterName:
          type: string
      description: This is a response containing the requested dashboard
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    GetDashboardCatalogRequest:
      type: object
    GetDashboardCatalogResponse:
      title: Get dashboard catalog response data structure.
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DashboardCatalogItem'
      externalDocs:
        url: ''
    GetDashboardFolderRequest:
      title: Get dashboard folder request data structure
      type: object
      properties:
        folderId:
          type: string
        requestId:
          type: string
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    GetDashboardFolderResponse:
      title: Get dashboard folder response data structure
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/DashboardFolder'
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    GetDashboardRequest:
      title: Get dashboard request data structure
      required:
        - dashboardId
      type: object
      properties:
        dashboardId:
          type: string
      description: This is a request to get a specific custom dashboard
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    GetDashboardResponse:
      title: Get dashboard response data structure
      type: object
      properties:
        authorId:
          type: string
        authorName:
          type: string
        createdAt:
          type: string
          format: date-time
        createdOriginType:
          $ref: '#/components/schemas/TokenOriginType'
        dashboard:
          $ref: '#/components/schemas/Dashboard'
        isLocked:
          type: boolean
        lockerAuthorId:
          type: string
        lockerName:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedOriginType:
          $ref: '#/components/schemas/TokenOriginType'
        updaterAuthorId:
          type: string
        updaterName:
          type: string
      description: This is a response containing the requested dashboard
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    GetDataUsageMetricsExportStatusRequest:
      type: object
    GetDataUsageMetricsExportStatusResponse:
      title: Get Data Usage Metrics Export Status Response
      type: object
      properties:
        enabled:
          type: boolean
          example: true
      description: This data structure is used to return data usage metrics export status.
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    GetDataUsageRequest:
      title: Get Data Usage Request
      type: object
      properties:
        aggregate:
          type: array
          items:
            $ref: '#/components/schemas/AggregateBy'
        dateRange:
          $ref: '#/components/schemas/v2.DateRange'
        dimensionFilters:
          type: array
          items:
            $ref: '#/components/schemas/Dimension'
        resolution:
          type: string
      description: This data structure is used to request data usage.
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    GetDataUsageResponse:
      title: Get Data Usage Response
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/DataUsageEntry'
      description: This data structure is used to return data usage.
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    GetDefaultPresetSummaryRequest:
      type: object
      properties:
        connectorType:
          $ref: '#/components/schemas/ConnectorType'
        entityType:
          $ref: '#/components/schemas/notification_center.EntityType'
    GetDefaultPresetSummaryResponse:
      type: object
      properties:
        presetSummary:
          $ref: '#/components/schemas/PresetSummary'
    GetDeployedExtensionsRequest:
      title: Get deployed extensions request
      type: object
      externalDocs:
        url: ''
    GetDeployedExtensionsResponse:
      title: Get deployed extensions response
      type: object
      properties:
        deployedExtensions:
          type: array
          items:
            $ref: '#/components/schemas/DeployedExtension'
      externalDocs:
        url: ''
    GetDeployedIntegrationRequest:
      title: Get deployed integration request
      required:
        - integrationId
      type: object
      properties:
        integrationId:
          type: string
          example: aws-sqs
      externalDocs:
        url: ''
    GetDeployedIntegrationResponse:
      title: Get deployed integration response
      required:
        - integration
      type: object
      properties:
        integration:
          $ref: '#/components/schemas/DeployedIntegrationInformation'
      externalDocs:
        url: ''
    GetE2MRequest:
      title: Get E2M Response
      required:
        - id
      type: object
      properties:
        id:
          type: string
          example: d6a3658e-78d2-47d0-9b81-b2c551f01b09
      description: >-
        This data structure is used to retrieve an existing event to metric
        definition
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    GetE2MResponse:
      title: Get E2M Response
      required:
        - e2m
      type: object
      properties:
        e2m:
          $ref: '#/components/schemas/E2M'
      description: >-
        This data structure is obtained when retrieving an existing event to
        metric definition
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    GetEnrichmentLimitRequest:
      type: object
    GetEnrichmentLimitResponse:
      title: Enrichment Limit
      required:
        - limit
        - used
      type: object
      properties:
        limit:
          type: integer
          format: int64
          example: 10
        used:
          type: integer
          format: int64
          example: 5
      description: This response data structure represents the enrichments limit
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    GetEnrichmentsRequest:
      type: object
    GetEnrichmentsResponse:
      title: Enrichment Collection
      required:
        - enrichments
      type: object
      properties:
        enrichments:
          type: array
          items:
            $ref: '#/components/schemas/Enrichment'
      description: This response data structure represents a collection of enrichments
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    GetEventRequest:
      title: GetEventRequest
      required:
        - id
      type: object
      properties:
        id:
          type: string
          example: test
        orderBys:
          type: array
          items:
            $ref: '#/components/schemas/events.v3.OrderBy'
        pagination:
          $ref: '#/components/schemas/events.v3.PaginationRequest'
      description: This data structure represents a request to get an event
      externalDocs:
        url: ''
    GetEventResponse:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/CxEventSingleOrMultiple'
        pagination:
          $ref: '#/components/schemas/events.v3.PaginationResponse'
    GetEventsStatisticsRequest:
      title: GetEventsStatisticsRequest
      required:
        - filter
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/EventsFilter'
      description: This data structure represents a request to get events statistics
      externalDocs:
        url: ''
    GetEventsStatisticsResponse:
      title: GetEventsStatisticsResponse
      required:
        - cxEventMetadataFieldStatisticscxEventLabelsFieldStatistics
      type: object
      properties:
        cxEventLabelsFieldStatistics:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldStatistics'
        cxEventMetadataFieldStatistics:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldStatistics'
      description: This data structure represents a response to get events statistics
      externalDocs:
        url: ''
    GetExtensionRequest:
      title: Get extension request
      required:
        - id
      type: object
      properties:
        id:
          type: string
        includeDashboardBinaries:
          type: boolean
        includeTestingRevision:
          type: boolean
      externalDocs:
        url: ''
    GetExtensionResponse:
      title: Get extension response
      type: object
      properties:
        extension:
          $ref: '#/components/schemas/v1.Extension'
      externalDocs:
        url: ''
    GetFilterValuesRequest:
      title: Get filter values request
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/IncidentQueryFilter'
      description: Request to get available filter values for incidents
      externalDocs:
        url: ''
    GetFilterValuesResponse:
      title: Get filter values response
      required:
        - filtersValues
      type: object
      properties:
        filtersValues:
          $ref: '#/components/schemas/IncidentQueryFiltersValues'
      description: Response containing available filter values for incidents
      externalDocs:
        url: ''
    GetGlobalRouterRequest:
      title: Get Global Router Request
      type: object
      properties:
        id:
          type: string
      description: Request to retrieve a global router with the passed identifier
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    GetGlobalRouterResponse:
      title: Get Global Router Response
      type: object
      properties:
        router:
          $ref: '#/components/schemas/GlobalRouter'
      description: Response containing a requested global router
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    GetGroupUsersRequest:
      title: GetGroupUsersRequest
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/TeamGroupId'
        pageSize:
          type: integer
          format: int64
        pageToken:
          type: string
      additionalProperties: false
      description: >-
        Request to retrieve all users assigned to a specific team group
        identified by its unique ID.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    GetGroupUsersResponse:
      oneOf:
        - title: GetGroupUsersResponse
          type: object
          properties:
            noMorePages:
              $ref: '#/components/schemas/NoMorePages'
            users:
              type: array
              items:
                $ref: '#/components/schemas/v1.User'
          additionalProperties: false
          description: >-
            Response containing the list of all users currently assigned to the
            requested team group.
          externalDocs:
            description: Find out more about groups
            url: >-
              https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
        - title: GetGroupUsersResponse
          type: object
          properties:
            token:
              $ref: '#/components/schemas/NextPageToken'
            users:
              type: array
              items:
                $ref: '#/components/schemas/v1.User'
          additionalProperties: false
          description: >-
            Response containing the list of all users currently assigned to the
            requested team group.
          externalDocs:
            description: Find out more about groups
            url: >-
              https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    GetIncidentByEventIdRequest:
      title: Get incident by event id request
      required:
        - eventId
      type: object
      properties:
        eventId:
          type: string
          description: Event ID associated to the Incident to acknowledge
          example: event_id_1
      externalDocs:
        url: ''
    GetIncidentByEventIdResponse:
      title: Get incident by event id response
      required:
        - incident
      type: object
      properties:
        incident:
          $ref: '#/components/schemas/Incident'
      description: Response containing the requested incident
      externalDocs:
        url: ''
    GetIncidentEventsRequest:
      title: Get incident events request
      required:
        - incidentId
      type: object
      properties:
        incidentId:
          type: string
          description: ID of the incident to retrieve events for
          example: incident_id
      description: Request to get all events associated with a specific incident
      externalDocs:
        url: ''
    GetIncidentEventsResponse:
      title: Get incident events response
      type: object
      properties:
        incidentEvents:
          type: array
          items:
            $ref: '#/components/schemas/IncidentEvent'
      description: Response containing all events associated with the requested incident
      externalDocs:
        url: ''
    GetIncidentRequest:
      title: Get incident request
      required:
        - id
      type: object
      properties:
        id:
          type: string
          example: incident_id
      externalDocs:
        url: ''
    GetIncidentResponse:
      title: Get incident response
      required:
        - incident
      type: object
      properties:
        incident:
          $ref: '#/components/schemas/Incident'
      description: Response containing the requested incident
      externalDocs:
        url: ''
    GetIncidentUsingCorrelationKeyRequest:
      title: Get incident using correlation key request
      required:
        - correlationKey
        - incidentPointInTime
      type: object
      properties:
        correlationKey:
          type: string
          description: Correlation key to identify the incident
          example: correlation_key_123
        incidentPointInTime:
          type: string
          description: Timestamp to identify the specific point in time for the incident
          format: date-time
          example: '2024-01-01T00:00:00.000Z'
      description: Request to get an incident using a correlation key and timestamp
      externalDocs:
        url: ''
    GetIncidentUsingCorrelationKeyResponse:
      title: Get incident by correlation response
      type: object
      properties:
        incident:
          $ref: '#/components/schemas/Incident'
      description: >-
        Response containing the incident matching the correlation key and
        timestamp
      externalDocs:
        url: ''
    GetIntegrationDefinitionRequest:
      title: Get integration definition request
      required:
        - id
      type: object
      properties:
        id:
          type: string
          example: aws-sqs
        includeTestingRevision:
          type: boolean
      description: This data structure represents a list of outgoing webhook types.
      externalDocs:
        url: ''
    GetIntegrationDefinitionResponse:
      title: Get integration definition response
      required:
        - integrationDefinition
      type: object
      properties:
        integrationDefinition:
          $ref: '#/components/schemas/IntegrationDefinition'
      description: This data structure represents a list of outgoing webhook types.
      externalDocs:
        url: ''
    GetIntegrationDetailsRequest:
      title: Get integration details request
      required:
        - id
      type: object
      properties:
        id:
          type: string
        includeTestingRevision:
          type: boolean
      externalDocs:
        url: ''
    GetIntegrationDetailsResponse:
      title: Get integration details response
      required:
        - integrationDetail
      type: object
      properties:
        integrationDetail:
          $ref: '#/components/schemas/IntegrationDetails'
      externalDocs:
        url: ''
    GetIntegrationsRequest:
      title: Get integrations request
      type: object
      properties:
        includeTestingRevision:
          type: boolean
      externalDocs:
        url: ''
    GetIntegrationsResponse:
      title: Get integrations response
      type: object
      properties:
        integrations:
          type: array
          items:
            $ref: '#/components/schemas/GetIntegrationsResponse.IntegrationWithCounts'
      description: This data structure represents a list of outgoing webhook types.
      externalDocs:
        url: ''
    GetIntegrationsResponse.IntegrationWithCounts:
      title: Integration with counts
      required:
        - integrations
      type: object
      properties:
        amountIntegrations:
          type: integer
          format: int64
        errors:
          type: array
          items:
            type: string
        integration:
          $ref: '#/components/schemas/Integration'
        isNew:
          type: boolean
        upgradeAvailable:
          type: boolean
      externalDocs:
        url: ''
    GetLabelKeysRequest:
      type: object
      properties:
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/DataSource'
    GetLabelKeysResponse:
      type: object
      properties:
        dataSource:
          $ref: '#/components/schemas/DataSource'
        labelKeys:
          type: array
          items:
            type: string
    GetLabelMappingsInternalRequest:
      type: object
      properties:
        dataSourceTypes:
          type: array
          items:
            $ref: '#/components/schemas/DataSourceType'
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/DataSource'
        labels:
          type: array
          items:
            type: string
    GetLabelMappingsInternalResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/LabelMapping'
    GetLabelMappingsRequest:
      type: object
      properties:
        dataSourceTypes:
          type: array
          items:
            $ref: '#/components/schemas/DataSourceType'
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/DataSource'
        labels:
          type: array
          items:
            type: string
    GetLabelMappingsResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/LabelMapping'
    GetLabelValuesInternalRequest:
      type: object
      properties:
        currentLabelValues:
          type: array
          items:
            $ref: '#/components/schemas/LabelValues'
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/DataSource'
        endTimeSeconds:
          type: string
        requestedLabels:
          type: array
          items:
            type: string
        startTimeSeconds:
          type: string
    GetLabelValuesInternalResponse:
      type: object
      properties:
        dataSource:
          $ref: '#/components/schemas/DataSource'
        labelValues:
          type: array
          items:
            $ref: '#/components/schemas/LabelValues'
    GetLabelValuesRequest:
      type: object
      properties:
        currentLabelValues:
          type: array
          items:
            $ref: '#/components/schemas/LabelValues'
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/DataSource'
        endTimeSeconds:
          type: string
        requestedLabels:
          type: array
          items:
            type: string
        startTimeSeconds:
          type: string
    GetLabelValuesResponse:
      type: object
      properties:
        dataSource:
          $ref: '#/components/schemas/DataSource'
        labelValues:
          type: array
          items:
            $ref: '#/components/schemas/LabelValues'
    GetLabelsRequest:
      type: object
    GetLabelsResponse:
      type: object
      properties:
        labels:
          type: array
          items:
            type: string
    GetLimitsRequest:
      type: object
    GetLimitsResponse:
      type: object
      properties:
        companyId:
          type: string
        labelsLimit:
          type: integer
          format: int32
        metricsLimit:
          $ref: '#/components/schemas/LimitUsage'
        permutationsLimit:
          $ref: '#/components/schemas/LimitUsage'
    GetLogsCountRequest:
      title: Get Logs Count Request
      type: object
      properties:
        dateRange:
          $ref: '#/components/schemas/v2.DateRange'
        filters:
          $ref: '#/components/schemas/ScopesFilter'
        resolution:
          type: string
      additionalProperties: false
      description: This data structure is used to request logs count.
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    GetLogsCountResponse:
      title: Get Logs Count Response
      type: object
      properties:
        logsCount:
          type: array
          items:
            $ref: '#/components/schemas/LogsCount'
      description: This data structure is used to return logs count.
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    GetManagedIntegrationStatusRequest:
      title: Get managed integration status request
      required:
        - integrationId
      type: object
      properties:
        integrationId:
          type: string
      externalDocs:
        url: ''
    GetManagedIntegrationStatusResponse:
      title: Get managed integration status response
      required:
        - integrationId
        - status
      type: object
      properties:
        integrationId:
          type: string
        status:
          $ref: '#/components/schemas/IntegrationStatus'
      externalDocs:
        url: ''
    GetMeasurementsInternalRequest:
      type: object
      properties:
        dataSourceTypes:
          type: array
          items:
            $ref: '#/components/schemas/DataSourceType'
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/DataSource'
        labels:
          type: array
          items:
            type: string
        measurementNames:
          type: array
          items:
            type: string
    GetMeasurementsInternalResponse:
      type: object
      properties:
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/Measurement'
    GetMeasurementsRequest:
      type: object
      properties:
        dataSourceTypes:
          type: array
          items:
            $ref: '#/components/schemas/DataSourceType'
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/DataSource'
        labels:
          type: array
          items:
            type: string
        measurementNames:
          type: array
          items:
            type: string
    GetMeasurementsResponse:
      type: object
      properties:
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/Measurement'
    GetMeasurementsTableRequest:
      type: object
      properties:
        dataSource:
          $ref: '#/components/schemas/DataSource'
        endTimeSeconds:
          type: string
        labelValues:
          type: array
          items:
            $ref: '#/components/schemas/LabelValues'
        measurementMetadata:
          type: array
          items:
            $ref: '#/components/schemas/MeasurementMetadata'
        measurementNames:
          type: array
          items:
            type: string
        orderingLabel:
          type: string
        paginationData:
          $ref: '#/components/schemas/PaginationData'
        rowLabelValues:
          $ref: '#/components/schemas/LabelValues'
        startTimeSeconds:
          type: string
        subjectLabel:
          type: string
        topk:
          type: integer
          format: int32
    GetMeasurementsTableResponse:
      type: object
      properties:
        existingColumns:
          type: array
          items:
            type: string
        pageIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        rows:
          type: array
          items:
            $ref: '#/components/schemas/TableRow'
        totalRowCount:
          type: integer
          format: int32
    GetOutgoingWebhookRequest:
      title: Get outgoing webhook request
      required:
        - id
      type: object
      properties:
        id:
          type: string
      externalDocs:
        url: ''
    GetOutgoingWebhookResponse:
      title: Get outgoing webhook response
      required:
        - webhook
      type: object
      properties:
        webhook:
          $ref: '#/components/schemas/OutgoingWebhook'
      externalDocs:
        url: ''
    GetOutgoingWebhookTypeDetailsRequest:
      title: Get outgoing webhook type details request
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/WebhookType'
      externalDocs:
        url: ''
    GetOutgoingWebhookTypeDetailsResponse:
      title: Get outgoing webhook type details response
      required:
        - details
      type: object
      properties:
        details:
          $ref: '#/components/schemas/OutgoingWebhookDetails'
      externalDocs:
        url: ''
    GetPolicyRequest:
      type: object
      properties:
        id:
          type: string
    GetPolicyResponse:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/Policy'
    GetPresetRequest:
      type: object
      properties:
        id:
          type: string
    GetPresetResponse:
      type: object
      properties:
        preset:
          $ref: '#/components/schemas/Preset'
    GetQueriesRequest:
      type: object
      properties:
        dataSource:
          $ref: '#/components/schemas/DataSource'
        endTimeSeconds:
          type: string
        extractedLabels:
          type: array
          items:
            $ref: '#/components/schemas/ExtractedLabel'
        measurementMetadata:
          type: array
          items:
            $ref: '#/components/schemas/MeasurementMetadata'
        measurementNames:
          type: array
          items:
            type: string
        orderingLabel:
          type: string
          deprecated: true
        startTimeSeconds:
          type: string
        subjectLabel:
          type: string
        topk:
          type: integer
          format: int32
    GetQueriesResponse:
      type: object
      properties:
        queries:
          type: array
          items:
            $ref: '#/components/schemas/MeasurementQuery'
    GetRetentionsEnabledRequest:
      type: object
    GetRetentionsEnabledResponse:
      title: Get Retentions Enabled Response
      required:
        - retentions
      type: object
      properties:
        enableTags:
          type: boolean
      description: >-
        This data structure is obtained when retrieving the active status of
        retentions
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    GetRetentionsRequest:
      type: object
    GetRetentionsResponse:
      type: object
      properties:
        retentions:
          type: array
          items:
            $ref: '#/components/schemas/archive.v1.Retention'
    GetRuleGroupModelMappingRequest:
      type: object
      properties:
        creator:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        hidden:
          type: boolean
        name:
          type: string
        order:
          type: integer
          format: int64
        ruleMatchers:
          type: array
          items:
            $ref: '#/components/schemas/RuleMatcher'
        ruleSubgroups:
          type: array
          items:
            $ref: >-
              #/components/schemas/GetRuleGroupModelMappingRequest.CreateRuleSubgroup
    GetRuleGroupModelMappingRequest.CreateRuleSubgroup:
      type: object
      properties:
        enabled:
          type: boolean
        order:
          type: integer
          format: int64
        rules:
          type: array
          items:
            $ref: >-
              #/components/schemas/GetRuleGroupModelMappingRequest.CreateRuleSubgroup.CreateRule
    GetRuleGroupModelMappingRequest.CreateRuleSubgroup.CreateRule:
      type: object
      properties:
        description:
          type: string
        enabled:
          type: boolean
        name:
          type: string
        order:
          type: integer
          format: int64
        parameters:
          $ref: '#/components/schemas/RuleParameters'
        sourceField:
          type: string
    GetRuleGroupModelMappingResponse:
      type: object
      properties:
        ruleDefinition:
          type: object
    GetRuleGroupRequest:
      type: object
      properties:
        groupId:
          type: string
    GetRuleGroupResponse:
      type: object
      properties:
        ruleGroup:
          $ref: '#/components/schemas/RuleGroup'
    GetRumApplicationVersionDataRequest:
      title: Get RUM application version data request
      required:
        - applicationName
      type: object
      properties:
        applicationName:
          type: string
      externalDocs:
        url: ''
    GetRumApplicationVersionDataResponse:
      title: Get RUM application version data response
      required:
        - versionData
      type: object
      properties:
        versionData:
          $ref: '#/components/schemas/RumVersionData'
      externalDocs:
        url: ''
    GetSPParametersRequest:
      title: Get SP Parameters Request
      required:
        - teamId
      type: object
      properties:
        teamId:
          type: integer
          format: int64
          example: 1234567
      description: >-
        This data structure is used to retrieve the parameters of a SAML service
        provider
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    GetSPParametersResponse:
      title: Get SP Parameters Response
      required:
        - params
      type: object
      properties:
        params:
          $ref: '#/components/schemas/SPParameters'
      description: >-
        This data structure is obtained as a response to a request to retrieve
        the parameters of a SAML service provider
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    GetScopesResponse:
      title: Get Scopes Response
      required:
        - scopes
      type: object
      properties:
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/scopes.v1.Scope'
      description: This data structure represents a response to get scopes
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
    GetSendDataApiKeysRequest:
      type: object
    GetSendDataApiKeysResponse:
      title: Get Api Key Response
      required:
        - keyInfo
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/KeyInfo'
      description: This data structure is the response obtained when retrieving an API key.
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
    GetServiceSloRequest:
      title: Get Service SLO Request
      type: object
      properties:
        id:
          type: string
          example: slo_id
      description: This data structure represents a request to get a Service SLO.
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
    GetServiceSloResponse:
      title: Get Service SLO Response
      required:
        - slo
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/ServiceSlo'
      description: This data structure represents a response to get a Service SLO.
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
    GetSloRequest:
      title: GetSloRequest
      required:
        - id
      type: object
      properties:
        id:
          type: string
      description: Request to retrieve a specific SLO by its ID.
      externalDocs:
        url: ''
    GetSloResponse:
      title: GetSloResponse
      required:
        - slo
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/Slo'
      description: Response containing the details of a specific SLO.
      externalDocs:
        url: ''
    GetSpansCountRequest:
      title: Get Spans Count Request
      type: object
      properties:
        dateRange:
          $ref: '#/components/schemas/v2.DateRange'
        filters:
          $ref: '#/components/schemas/ScopesFilter'
        resolution:
          type: string
      additionalProperties: false
      description: This data structure is used to request spans count.
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    GetSpansCountResponse:
      title: Get Spans Count Response
      type: object
      properties:
        spansCount:
          type: array
          items:
            $ref: '#/components/schemas/SpansCount'
      description: This data structure is used to return spans count.
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    GetSystemDefaultPresetSummaryRequest:
      title: Get System Default Preset Summary Request
      type: object
      properties:
        connectorType:
          $ref: '#/components/schemas/ConnectorType'
        entityType:
          $ref: '#/components/schemas/notification_center.EntityType'
      description: >-
        Returns the preset summary for the system default preset (i.e., not a
        user-selected default)
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    GetSystemDefaultPresetSummaryResponse:
      type: object
      properties:
        presetSummary:
          $ref: '#/components/schemas/PresetSummary'
    GetTargetRequest:
      type: object
    GetTargetResponse:
      title: Get Target Response
      required:
        - target
      type: object
      properties:
        target:
          $ref: '#/components/schemas/Target'
      description: This data structure is used to retrieve a storage target for logs.
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    GetTeamDetailedDataUsageRequest:
      title: Get Team Detailed Data Usage Request
      type: object
      properties:
        aggregate:
          type: array
          items:
            $ref: '#/components/schemas/AggregateBy'
        dateRange:
          $ref: '#/components/schemas/v2.DateRange'
        resolution:
          type: string
      description: This data structure is used to request detailed data usage for a team.
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    GetTeamDetailedDataUsageResponse:
      title: Get Team Detailed Data Usage Response
      type: object
      properties:
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/Dimension'
        sizeGb:
          type: number
          format: float
          example: 2.5
        timestamp:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
        units:
          type: number
          format: float
          example: 5
      description: This data structure is used to return detailed data usage for a team.
      externalDocs:
        url: ''
    GetTeamGroupByNameRequest:
      title: GetTeamGroupByNameRequest
      type: object
      properties:
        name:
          type: string
      description: >-
        Request to retrieve a team group using its name within the authenticated
        team's context. Alternative to lookup by ID.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    GetTeamGroupByNameResponse:
      title: GetTeamGroupByNameResponse
      type: object
      properties:
        group:
          $ref: '#/components/schemas/TeamGroup'
      description: >-
        Response containing the complete details of a team group that matches
        the requested name, including its members, roles, and scope settings.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    GetTeamGroupRequest:
      title: GetTeamGroupRequest
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/TeamGroupId'
      description: >-
        Request to retrieve a specific team group by its unique identifier. Used
        to fetch details about group membership, roles, and scope settings.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    GetTeamGroupResponse:
      title: GetTeamGroupResponse
      type: object
      properties:
        group:
          $ref: '#/components/schemas/TeamGroup'
      description: >-
        Response containing the complete details of a requested team group,
        including its members, assigned roles, and scope configuration.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    GetTeamGroupScopeRequest:
      title: GetTeamGroupScopeRequest
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/TeamGroupId'
      description: >-
        Request message for retrieving the current scope configuration for a
        specific team group
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    GetTeamGroupScopeResponse:
      title: GetTeamGroupScopeResponse
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/permissions.v1.Scope'
      additionalProperties: false
      description: >-
        Response message containing the optional scope configuration (filters
        for subsystems and applications) for a team group
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    GetTeamGroupsRequest:
      title: GetTeamGroupsRequest
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/permissions.v1.TeamId'
      additionalProperties: false
      description: >-
        Request to retrieve all groups associated with a specific team. If
        team_id is not provided, fetches groups for the authenticated team.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    GetTeamGroupsResponse:
      title: GetTeamGroupsResponse
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/TeamGroup'
      description: >-
        Response containing a list of all team groups and their complete
        details, including members, roles, and scope configurations.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    GetTeamQuotaRequest:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/v2.TeamId'
    GetTeamQuotaResponse:
      type: object
      properties:
        quota:
          type: number
          format: float
        retention:
          type: integer
          format: int32
        teamId:
          $ref: '#/components/schemas/v2.TeamId'
    GetTeamRequest:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/v2.TeamId'
    GetTeamResponse:
      type: object
      properties:
        dailyQuota:
          type: number
          format: double
        retention:
          type: integer
          format: int32
        teamId:
          $ref: '#/components/schemas/v2.TeamId'
        teamName:
          type: string
    GetTeamScopesByIdsRequest:
      title: Get Team Scopes By Ids Request
      required:
        - ids
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
            example: 60c82be2-413f-4b8e-8201-7f5c51e2ef2b
      description: This data structure represents a request to get team scopes by ids
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
    GetTeamScopesRequest:
      type: object
    GetTemplateRequest:
      oneOf:
        - title: Get template request
          required:
            - integrationId
          type: object
          properties:
            commonArmParams:
              $ref: '#/components/schemas/CommonARMParams'
            integrationId:
              type: string
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Get template request
          required:
            - integrationId
          type: object
          properties:
            empty:
              $ref: '#/components/schemas/Empty'
            integrationId:
              type: string
          additionalProperties: false
          externalDocs:
            url: ''
    GetTemplateResponse:
      title: Get template response
      type: object
      properties:
        templateUrl:
          type: string
      externalDocs:
        url: ''
    GetTenantConfigRequest:
      type: object
      properties:
        tenantId:
          type: integer
          format: int64
    GetTenantConfigResponse:
      type: object
      properties:
        tenantConfig:
          $ref: '#/components/schemas/TenantConfig'
    GetTenantConfigResponseV2:
      type: object
      properties:
        tenantConfig:
          $ref: '#/components/schemas/TenantConfigV2'
    GetViewFolderRequest:
      title: GetViewFolderRequest
      type: object
      properties:
        id:
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
          type: string
          description: Unique identifier for folders
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
      description: Request for getting view folder.
      externalDocs:
        url: ''
    GetViewFolderResponse:
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/ViewFolder'
    GetViewRequest:
      type: object
      properties:
        id:
          type: integer
          description: id
          format: int32
          example: 52
    GetViewResponse:
      type: object
      properties:
        view:
          $ref: '#/components/schemas/View'
    GetZeroStateRequest:
      title: GetZeroStateRequest
      type: object
      description: Request to get zero state (boolean).
      externalDocs:
        url: ''
    GetZeroStateResponse:
      title: GetZeroStateResponse
      required:
        - zeroState
      type: object
      properties:
        zeroState:
          type: boolean
      description: Response with Zero State.
      externalDocs:
        url: ''
    GlobalRouter:
      title: Global Router
      required:
        - entityType
        - name
      type: object
      properties:
        createTime:
          type: string
          format: date-time
        description:
          type: string
        entityLabelMatcher:
          type: object
          additionalProperties:
            type: string
        entityLabels:
          type: object
          additionalProperties:
            type: string
        entityType:
          $ref: '#/components/schemas/notification_center.EntityType'
        fallback:
          type: array
          items:
            $ref: '#/components/schemas/RoutingTarget'
        id:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
        name:
          type: string
          example: My Router
        rules:
          type: array
          items:
            $ref: '#/components/schemas/RoutingRule'
        updateTime:
          type: string
          format: date-time
      additionalProperties: false
      description: >-
        Defines a set of pre-configured routing rules for directing
        notifications
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    GlobalRouter.EntityLabelMatcherEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    GlobalRouter.EntityLabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    GoToDashboardTemplateAction:
      type: object
      properties:
        dashboardId:
          type: string
          description: Reference to specific dashboard
    GroupBy:
      oneOf:
        - title: Incident group by
          required:
            - field
          type: object
          properties:
            incidentField:
              $ref: '#/components/schemas/IncidentFields'
            orderByDirection:
              $ref: '#/components/schemas/v1.OrderByDirection'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Incident group by
          required:
            - field
          type: object
          properties:
            contextualLabel:
              type: string
              description: The contextual label to group by.
            orderByDirection:
              $ref: '#/components/schemas/v1.OrderByDirection'
          additionalProperties: false
          externalDocs:
            url: ''
    GroupByValues:
      oneOf:
        - type: object
          properties:
            incidentField:
              $ref: '#/components/schemas/IncidentFieldOneOf'
          additionalProperties: false
        - type: object
          properties:
            contextualLabels:
              $ref: '#/components/schemas/ContextualLabels'
          additionalProperties: false
    GroupLabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    GroupLimit:
      type: object
      properties:
        groupByFields:
          type: array
          items:
            type: string
        limit:
          type: integer
          format: int32
        minPercentage:
          type: integer
          format: int32
    GroupOrigin:
      enum:
        - GROUP_ORIGIN_UNSPECIFIED
        - GROUP_ORIGIN_BUILT_IN
        - GROUP_ORIGIN_USER_DEFINED
      type: string
    GroupType:
      enum:
        - GROUP_TYPE_UNSPECIFIED
        - GROUP_TYPE_OPEN
        - GROUP_TYPE_CLOSED
        - GROUP_TYPE_RESTRICTED
      type: string
    GroupValue:
      type: object
      properties:
        labels:
          type: array
          items:
            $ref: '#/components/schemas/v1.LabelValue'
    GroupedSeries:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/common.Group'
    GroupsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/v3.Group'
    HeadersEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    HelmChart:
      title: Helm chart
      type: object
      properties:
        commands:
          type: array
          items:
            $ref: '#/components/schemas/CommandInformation'
        guide:
          $ref: '#/components/schemas/IntegrationGuide'
        template:
          type: string
      additionalProperties: false
      description: This data structure represents a Helm chart.
      externalDocs:
        url: ''
    Hexagon:
      type: object
      properties:
        customUnit:
          type: string
          description: >-
            Custom unit (requires to have unit field set as UNIT_CUSTOM to take
            effect)
          example:
            value: rpm
        dataModeType:
          $ref: '#/components/schemas/widgets.common.DataModeType'
        decimal:
          type: integer
          description: >-
            Number indicating the decimal precision of the numeric values,
            within range 0-15
          format: int32
          example: 2
        decimalPrecision:
          type: boolean
          description: Whether to render numeric value without abbreviation
          example: false
        legend:
          $ref: '#/components/schemas/Legend'
        legendBy:
          $ref: '#/components/schemas/LegendBy'
        max:
          type: number
          description: >-
            A maximum value used in percentage threshold calculation and for
            visual value representation
          format: double
          example: 150000
        min:
          type: number
          description: >-
            A minimum value used in percentage threshold calculation and for
            visual value representation
          format: double
          example: 0
        query:
          $ref: '#/components/schemas/Hexagon.Query'
        thresholdType:
          $ref: '#/components/schemas/ThresholdType'
        thresholds:
          type: array
          items:
            $ref: '#/components/schemas/common.Threshold'
        unit:
          $ref: '#/components/schemas/common.Unit'
    Hexagon.DataprimeQuery:
      title: DataprimeQuery
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/common.DataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter.Source'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A Dataprime variant of the query
      externalDocs:
        url: ''
    Hexagon.LogsQuery:
      title: LogsQuery
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter.LogsFilter'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        logsAggregation:
          $ref: '#/components/schemas/LogsAggregation'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A logs variant of the query
      externalDocs:
        url: ''
    Hexagon.MetricsQuery:
      title: MetricsQuery
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/common.Aggregation'
        editorMode:
          $ref: '#/components/schemas/MetricsQueryEditorMode'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/MetricsFilter'
        promqlQuery:
          $ref: '#/components/schemas/PromQlQuery'
        promqlQueryType:
          $ref: '#/components/schemas/PromQLQueryType'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A metrics variant of the query
      externalDocs:
        url: ''
    Hexagon.Query:
      oneOf:
        - type: object
          properties:
            metrics:
              $ref: '#/components/schemas/Hexagon.MetricsQuery'
          additionalProperties: false
        - type: object
          properties:
            logs:
              $ref: '#/components/schemas/Hexagon.LogsQuery'
          additionalProperties: false
        - type: object
          properties:
            spans:
              $ref: '#/components/schemas/Hexagon.SpansQuery'
          additionalProperties: false
        - type: object
          properties:
            dataprime:
              $ref: '#/components/schemas/Hexagon.DataprimeQuery'
          additionalProperties: false
    Hexagon.SpansQuery:
      title: SpansQuery
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/SpansFilter'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/SpanField'
        groupBys:
          type: array
          items:
            $ref: '#/components/schemas/SpanObservationField'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
        spansAggregation:
          $ref: '#/components/schemas/SpansAggregation'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A spans variant of the query
      externalDocs:
        url: ''
    HexagonBins:
      type: object
      properties:
        allowAbbreviation:
          type: boolean
          description: Whether to render numeric value without abbreviation
          example: false
        categoryFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        customUnit:
          type: string
          description: >-
            Custom unit (requires to have unit field set as UNIT_CUSTOM to take
            effect)
          example:
            value: rpm
        decimalPrecision:
          type: integer
          description: >-
            Number indicating the decimal precision of the numeric values,
            within range 0-15
          format: int32
          example: 2
        legend:
          $ref: '#/components/schemas/Legend'
        legendBy:
          $ref: '#/components/schemas/LegendBy'
        max:
          type: number
          description: >-
            A maximum gauge value used in percentage threshold calculation and
            for visual value representation
          format: double
          example: 150000
        min:
          type: number
          description: >-
            A minimum gauge value used in percentage threshold calculation and
            for visual value representation
          format: double
          example: 0
        thresholdType:
          $ref: '#/components/schemas/ThresholdType'
        thresholds:
          type: array
          items:
            $ref: '#/components/schemas/common.Threshold'
        unit:
          $ref: '#/components/schemas/common.Unit'
        valueField:
          $ref: '#/components/schemas/ObservationField'
    HorizontalBarChart:
      type: object
      properties:
        colorScheme:
          type: string
          description: Applied color scheme, one of the predefined values
          example:
            value: classic
        colorsBy:
          $ref: '#/components/schemas/ColorsBy'
        customUnit:
          type: string
          description: >-
            Custom unit (requires to have unit field set to custom to take
            effect)
          example:
            value: mph
        dataModeType:
          $ref: '#/components/schemas/widgets.common.DataModeType'
        decimal:
          type: integer
          description: >-
            Number indicating the decimal precision of the numeric values,
            within range 0-15
          format: int32
          example: 4
        decimalPrecision:
          type: boolean
          description: Whether to render numeric value without abbreviation
          example: false
        displayOnBar:
          type: boolean
          description: Specifies where to display the bar value
        groupNameTemplate:
          type: string
          description: Custom template name for a bar group, can contain variables
          example:
            value: Result - {{ variable }}
        hashColors:
          type: boolean
          description: Whether to ignore color scheme and derive colors from algorithm
          example: false
        legend:
          $ref: '#/components/schemas/Legend'
        maxBarsPerChart:
          type: integer
          description: Maximum number of bars on a chart
          format: int32
          example: 20
        query:
          $ref: '#/components/schemas/HorizontalBarChart.Query'
        scaleType:
          $ref: '#/components/schemas/ScaleType'
        sortBy:
          $ref: '#/components/schemas/SortByType'
        stackDefinition:
          $ref: '#/components/schemas/HorizontalBarChart.StackDefinition'
        unit:
          $ref: '#/components/schemas/common.Unit'
        yAxisMax:
          type: number
          description: Number indicating the upper band for y axis
          format: float
          example: 1000
        yAxisMin:
          type: number
          description: Number indicating the lower band for y axis
          format: float
          example: -1000
        yAxisViewBy:
          $ref: '#/components/schemas/HorizontalBarChart.YAxisViewBy'
    HorizontalBarChart.DataprimeQuery:
      title: DataprimeQuery
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/common.DataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter.Source'
        groupNames:
          type: array
          items:
            type: string
            description: List of field names by which results are grouped
        stackedGroupName:
          type: string
          description: Field name by which results in groups are divided into subgroups
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A Dataprime variant of the query
      externalDocs:
        url: ''
    HorizontalBarChart.LogsQuery:
      title: LogsQuery
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/LogsAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter.LogsFilter'
        groupNames:
          type: array
          items:
            type: string
            description: List of field names to group the query results
        groupNamesFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
        stackedGroupName:
          type: string
          description: Field name by which results are stacked in individual group
        stackedGroupNameField:
          $ref: '#/components/schemas/ObservationField'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A logs variant of the query
      externalDocs:
        url: ''
    HorizontalBarChart.MetricsQuery:
      title: MetricsQuery
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/common.Aggregation'
        editorMode:
          $ref: '#/components/schemas/MetricsQueryEditorMode'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/MetricsFilter'
        groupNames:
          type: array
          items:
            type: string
            description: List of field names by which metric results are grouped
        promqlQuery:
          $ref: '#/components/schemas/PromQlQuery'
        promqlQueryType:
          $ref: '#/components/schemas/PromQLQueryType'
        stackedGroupName:
          type: string
          description: Field name by which results in groups are divided into subgroups
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A metrics variant of the query
      externalDocs:
        url: ''
    HorizontalBarChart.Query:
      oneOf:
        - type: object
          properties:
            logs:
              $ref: '#/components/schemas/HorizontalBarChart.LogsQuery'
          additionalProperties: false
        - type: object
          properties:
            spans:
              $ref: '#/components/schemas/HorizontalBarChart.SpansQuery'
          additionalProperties: false
        - type: object
          properties:
            metrics:
              $ref: '#/components/schemas/HorizontalBarChart.MetricsQuery'
          additionalProperties: false
        - type: object
          properties:
            dataprime:
              $ref: '#/components/schemas/HorizontalBarChart.DataprimeQuery'
          additionalProperties: false
    HorizontalBarChart.SpansQuery:
      title: SpansQuery
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/SpansAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/SpansFilter'
        groupNames:
          type: array
          items:
            $ref: '#/components/schemas/SpanField'
        groupNamesFields:
          type: array
          items:
            $ref: '#/components/schemas/SpanObservationField'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
        stackedGroupName:
          $ref: '#/components/schemas/SpanField'
        stackedGroupNameField:
          $ref: '#/components/schemas/SpanObservationField'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A spans variant of the query
      externalDocs:
        url: ''
    HorizontalBarChart.StackDefinition:
      type: object
      properties:
        maxSlicesPerBar:
          type: integer
          description: How many slices can fit in a single bar
          format: int32
        stackNameTemplate:
          type: string
          description: Custom template name of an individual stack
    HorizontalBarChart.YAxisViewBy:
      oneOf:
        - type: object
          properties:
            category:
              $ref: '#/components/schemas/YAxisViewByCategory'
          additionalProperties: false
        - type: object
          properties:
            value:
              $ref: '#/components/schemas/YAxisViewByValue'
          additionalProperties: false
    HorizontalBars:
      type: object
      properties:
        allowAbbreviation:
          type: boolean
          description: Whether to render numeric value without abbreviation
          example: false
        categoryFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        colorScheme:
          type: string
          description: Applied color scheme, one of the predefined values
          example:
            value: classic
        colorsBy:
          $ref: '#/components/schemas/ColorsBy'
        customUnit:
          type: string
          description: >-
            Custom unit (requires to have unit field set to custom to take
            effect)
          example:
            value: mph
        decimalPrecision:
          type: integer
          description: >-
            Number indicating the decimal precision of the numeric values,
            within range 0-15
          format: int32
          example: 4
        displayOnBar:
          type: boolean
          description: Specifies where to display the bar value
        groupNameTemplate:
          type: string
          description: Custom template name for a group, can contain variables
          example:
            value: Slice - {{ variable }}
        hashColors:
          type: boolean
          description: Whether to ignore color scheme and derive colors from algorithm
          example: false
        legend:
          $ref: '#/components/schemas/Legend'
        maxBarsPerChart:
          type: integer
          description: Maximum number of bars on a chart
          format: int32
          example: 20
        maxSlicesPerBar:
          type: integer
          description: How many slices can fit in a single bar
          format: int32
        scaleType:
          $ref: '#/components/schemas/ScaleType'
        sortBy:
          $ref: '#/components/schemas/SortByType'
        stackNameTemplate:
          type: string
          description: Custom template name of an individual stack
        subCategoryFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        unit:
          $ref: '#/components/schemas/common.Unit'
        valueField:
          $ref: '#/components/schemas/ObservationField'
        yAxisMax:
          type: number
          description: Number indicating the upper band for y axis
          format: float
          example: 1000
        yAxisMin:
          type: number
          description: Number indicating the lower band for y axis
          format: float
          example: -1000
        yAxisViewBy:
          $ref: '#/components/schemas/HorizontalBars.YAxisViewBy'
    HorizontalBars.YAxisViewBy:
      enum:
        - Y_AXIS_VIEW_BY_UNSPECIFIED
        - Y_AXIS_VIEW_BY_CATEGORY
        - Y_AXIS_VIEW_BY_VALUE
      type: string
    HotStoreConfig:
      type: object
      properties:
        clusterName:
          type: string
        tenantId:
          type: integer
          format: int64
    IBMCosTargetSpec:
      title: IBM COS Target Spec
      required:
        - bucketCrn
        - endpoint
      type: object
      properties:
        bucketCrn:
          type: string
          example: bucket_crn
        bucketType:
          $ref: '#/components/schemas/IbmBucketType'
        endpoint:
          type: string
          example: http://some.endpoint.com:8081
        serviceCrn:
          type: string
          example: service_crn
      additionalProperties: false
      description: This data structure represents an IBM COS target.
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    IDPDetails:
      type: object
      properties:
        icon:
          type: string
        name:
          type: string
    IDPParameters:
      oneOf:
        - title: IDP Parameters
          required:
            - active
            - metadata
            - teamEntityId
            - groupNames
          type: object
          properties:
            active:
              type: boolean
              example: true
            groupNames:
              type: array
              items:
                type: string
                example:
                  - group1
            metadataUrl:
              type: string
              example: https://<...>.okta.com/app/<...>/sso/saml/metadata
            teamEntityId:
              type: integer
              format: int64
              example: 1234567
          additionalProperties: false
          description: >-
            This data structure represents a set of SAML identity provider
            parameters
          externalDocs:
            description: Find out more about enrichments
            url: >-
              https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
        - title: IDP Parameters
          required:
            - active
            - metadata
            - teamEntityId
            - groupNames
          type: object
          properties:
            active:
              type: boolean
              example: true
            groupNames:
              type: array
              items:
                type: string
                example:
                  - group1
            metadataContent:
              type: string
              example: <?xml version= ...
            teamEntityId:
              type: integer
              format: int64
              example: 1234567
          additionalProperties: false
          description: >-
            This data structure represents a set of SAML identity provider
            parameters
          externalDocs:
            description: Find out more about enrichments
            url: >-
              https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    IbmBucketType:
      enum:
        - IBM_BUCKET_TYPE_UNSPECIFIED
        - IBM_BUCKET_TYPE_EXTERNAL
        - IBM_BUCKET_TYPE_INTERNAL
      type: string
    IbmConfig:
      type: object
      properties:
        bucket:
          type: string
        crn:
          type: string
        endpoint:
          type: string
        region:
          type: string
    IbmConfigV2:
      title: IBM Bucket Configuration
      required:
        - endpoint
        - crn
        - serviceCrn
      type: object
      properties:
        crn:
          type: string
          example: >-
            crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::
        endpoint:
          type: string
          example: s3.us-south.cloud-object-storage.appdomain.cloud
        serviceCrn:
          type: string
          example: >-
            crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::
      description: This data structure is used to configure an IBM bucket.
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
    IbmEventNotificationsConfig:
      title: IBM event notification configuration
      required:
        - eventNotificationsInstanceId
        - regionId
        - endpointType
      type: object
      properties:
        endpointType:
          $ref: '#/components/schemas/EndpointType'
        eventNotificationsInstanceId:
          type: string
        regionId:
          type: string
        sourceId:
          type: string
        sourceName:
          type: string
      externalDocs:
        url: ''
    InRule:
      type: object
      properties:
        expr:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        record:
          type: string
    InRule.LabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    InRuleGroup:
      type: object
      properties:
        id:
          type: string
        interval:
          type: integer
          format: int64
        limit:
          type: string
          format: int64
        name:
          type: string
        rules:
          type: array
          items:
            $ref: '#/components/schemas/InRule'
        version:
          type: integer
          format: int64
      additionalProperties: false
    Incident:
      title: Incident
      required:
        - id
        - state
        - status
        - assignments
        - severity
        - contextualLabels
        - displayLabels
        - events
        - createdAt
        - lastStateUpdateTime
        - lastStateUpdateKey
        - duration
      type: object
      properties:
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/Assignment'
        closedAt:
          type: string
          format: date-time
          example: '2024-01-01T00:00:00.000Z'
        contextualLabels:
          type: object
          additionalProperties:
            type: string
        createdAt:
          type: string
          format: date-time
          example: '2024-01-01T00:00:00.000Z'
        description:
          type: string
          example: incident_description
        displayLabels:
          type: object
          additionalProperties:
            type: string
        duration:
          type: string
        events:
          type: array
          items:
            $ref: '#/components/schemas/IncidentEvent'
        id:
          type: string
          example: incident_id
        isMuted:
          type: boolean
          example: false
        lastStateUpdateKey:
          type: string
          example: last_state_update_key
        lastStateUpdateTime:
          type: string
          format: date-time
          example: '2024-01-01T00:00:00.000Z'
        metaLabels:
          type: array
          items:
            $ref: '#/components/schemas/incidents.v1.MetaLabel'
        name:
          type: string
          example: incident_name
        severity:
          $ref: '#/components/schemas/IncidentSeverity'
        state:
          $ref: '#/components/schemas/IncidentState'
        status:
          $ref: '#/components/schemas/IncidentStatus'
      externalDocs:
        url: ''
    Incident.ContextualLabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    Incident.DisplayLabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    IncidentAggregation:
      title: Incident aggregation
      required:
        - groupBysValue
        - aggStateCount
        - aggStatusCount
        - aggSeverityCount
        - aggAssignmentsCount
        - firstCreatedAt
        - lastClosedAt
        - allValuesCount
        - listIncidentsId
        - lastStateUpdateTime
        - aggMetaLabelsCount
      type: object
      properties:
        aggAssignmentsCount:
          type: array
          items:
            $ref: '#/components/schemas/IncidentAssignmentCount'
        aggMetaLabelsCount:
          type: array
          items:
            $ref: '#/components/schemas/IncidentMetaLabelsCount'
        aggSeverityCount:
          type: array
          items:
            $ref: '#/components/schemas/IncidentSeverityCount'
        aggStateCount:
          type: array
          items:
            $ref: '#/components/schemas/IncidentStateCount'
        aggStatusCount:
          type: array
          items:
            $ref: '#/components/schemas/IncidentStatusCount'
        allValuesCount:
          type: integer
          format: int64
        firstCreatedAt:
          type: string
          format: date-time
        groupBysValue:
          type: array
          items:
            $ref: '#/components/schemas/GroupByValues'
        lastClosedAt:
          type: string
          format: date-time
        lastStateUpdateTime:
          type: string
          format: date-time
        listIncidentsId:
          type: array
          items:
            type: string
      externalDocs:
        url: ''
    IncidentAssignmentCount:
      title: Incident assignment count
      required:
        - assignedTo
        - count
      type: object
      properties:
        assignedTo:
          $ref: '#/components/schemas/UserDetails'
        count:
          type: integer
          format: int64
          example: 10
      externalDocs:
        url: ''
    IncidentEvent:
      oneOf:
        - title: Incident event
          required:
            - id
            - incidentEventType
            - originatorType
            - originator
            - incidentEventPayload
          type: object
          properties:
            administrativeEvent:
              $ref: '#/components/schemas/IncidentEventOriginatorAdministrative'
            id:
              type: string
              description: The ID of the incident event
              example: incident_event_id
            incidentEventType:
              $ref: '#/components/schemas/IncidentEventType'
            originatorType:
              $ref: '#/components/schemas/OriginatorType'
            snoozeIndicator:
              $ref: '#/components/schemas/IncidentEventSnoozeIndicator'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Incident event
          required:
            - id
            - incidentEventType
            - originatorType
            - originator
            - incidentEventPayload
          type: object
          properties:
            id:
              type: string
              description: The ID of the incident event
              example: incident_event_id
            incidentEventType:
              $ref: '#/components/schemas/IncidentEventType'
            operationalEvent:
              $ref: '#/components/schemas/IncidentEventOriginatorOperational'
            originatorType:
              $ref: '#/components/schemas/OriginatorType'
            snoozeIndicator:
              $ref: '#/components/schemas/IncidentEventSnoozeIndicator'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Incident event
          required:
            - id
            - incidentEventType
            - originatorType
            - originator
            - incidentEventPayload
          type: object
          properties:
            administrativeEvent:
              $ref: '#/components/schemas/IncidentEventOriginatorAdministrative'
            assignment:
              $ref: '#/components/schemas/IncidentEventAssign'
            id:
              type: string
              description: The ID of the incident event
              example: incident_event_id
            incidentEventType:
              $ref: '#/components/schemas/IncidentEventType'
            originatorType:
              $ref: '#/components/schemas/OriginatorType'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Incident event
          required:
            - id
            - incidentEventType
            - originatorType
            - originator
            - incidentEventPayload
          type: object
          properties:
            assignment:
              $ref: '#/components/schemas/IncidentEventAssign'
            id:
              type: string
              description: The ID of the incident event
              example: incident_event_id
            incidentEventType:
              $ref: '#/components/schemas/IncidentEventType'
            operationalEvent:
              $ref: '#/components/schemas/IncidentEventOriginatorOperational'
            originatorType:
              $ref: '#/components/schemas/OriginatorType'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Incident event
          required:
            - id
            - incidentEventType
            - originatorType
            - originator
            - incidentEventPayload
          type: object
          properties:
            administrativeEvent:
              $ref: '#/components/schemas/IncidentEventOriginatorAdministrative'
            id:
              type: string
              description: The ID of the incident event
              example: incident_event_id
            incidentEventType:
              $ref: '#/components/schemas/IncidentEventType'
            originatorType:
              $ref: '#/components/schemas/OriginatorType'
            unassign:
              $ref: '#/components/schemas/IncidentEventUnassign'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Incident event
          required:
            - id
            - incidentEventType
            - originatorType
            - originator
            - incidentEventPayload
          type: object
          properties:
            id:
              type: string
              description: The ID of the incident event
              example: incident_event_id
            incidentEventType:
              $ref: '#/components/schemas/IncidentEventType'
            operationalEvent:
              $ref: '#/components/schemas/IncidentEventOriginatorOperational'
            originatorType:
              $ref: '#/components/schemas/OriginatorType'
            unassign:
              $ref: '#/components/schemas/IncidentEventUnassign'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Incident event
          required:
            - id
            - incidentEventType
            - originatorType
            - originator
            - incidentEventPayload
          type: object
          properties:
            administrativeEvent:
              $ref: '#/components/schemas/IncidentEventOriginatorAdministrative'
            id:
              type: string
              description: The ID of the incident event
              example: incident_event_id
            incidentEventType:
              $ref: '#/components/schemas/IncidentEventType'
            originatorType:
              $ref: '#/components/schemas/OriginatorType'
            upsertState:
              $ref: '#/components/schemas/IncidentEventUpsertState'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Incident event
          required:
            - id
            - incidentEventType
            - originatorType
            - originator
            - incidentEventPayload
          type: object
          properties:
            id:
              type: string
              description: The ID of the incident event
              example: incident_event_id
            incidentEventType:
              $ref: '#/components/schemas/IncidentEventType'
            operationalEvent:
              $ref: '#/components/schemas/IncidentEventOriginatorOperational'
            originatorType:
              $ref: '#/components/schemas/OriginatorType'
            upsertState:
              $ref: '#/components/schemas/IncidentEventUpsertState'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Incident event
          required:
            - id
            - incidentEventType
            - originatorType
            - originator
            - incidentEventPayload
          type: object
          properties:
            acknowledge:
              $ref: '#/components/schemas/IncidentEventAcknowledge'
            administrativeEvent:
              $ref: '#/components/schemas/IncidentEventOriginatorAdministrative'
            id:
              type: string
              description: The ID of the incident event
              example: incident_event_id
            incidentEventType:
              $ref: '#/components/schemas/IncidentEventType'
            originatorType:
              $ref: '#/components/schemas/OriginatorType'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Incident event
          required:
            - id
            - incidentEventType
            - originatorType
            - originator
            - incidentEventPayload
          type: object
          properties:
            acknowledge:
              $ref: '#/components/schemas/IncidentEventAcknowledge'
            id:
              type: string
              description: The ID of the incident event
              example: incident_event_id
            incidentEventType:
              $ref: '#/components/schemas/IncidentEventType'
            operationalEvent:
              $ref: '#/components/schemas/IncidentEventOriginatorOperational'
            originatorType:
              $ref: '#/components/schemas/OriginatorType'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Incident event
          required:
            - id
            - incidentEventType
            - originatorType
            - originator
            - incidentEventPayload
          type: object
          properties:
            administrativeEvent:
              $ref: '#/components/schemas/IncidentEventOriginatorAdministrative'
            close:
              $ref: '#/components/schemas/IncidentEventClose'
            id:
              type: string
              description: The ID of the incident event
              example: incident_event_id
            incidentEventType:
              $ref: '#/components/schemas/IncidentEventType'
            originatorType:
              $ref: '#/components/schemas/OriginatorType'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Incident event
          required:
            - id
            - incidentEventType
            - originatorType
            - originator
            - incidentEventPayload
          type: object
          properties:
            close:
              $ref: '#/components/schemas/IncidentEventClose'
            id:
              type: string
              description: The ID of the incident event
              example: incident_event_id
            incidentEventType:
              $ref: '#/components/schemas/IncidentEventType'
            operationalEvent:
              $ref: '#/components/schemas/IncidentEventOriginatorOperational'
            originatorType:
              $ref: '#/components/schemas/OriginatorType'
          additionalProperties: false
          externalDocs:
            url: ''
    IncidentEventAcknowledge:
      type: object
      properties:
        acknowledgedBy:
          $ref: '#/components/schemas/UserDetails'
    IncidentEventAlertType:
      enum:
        - INCIDENT_EVENT_ALERT_TYPE_STANDARD_OR_UNSPECIFIED
        - INCIDENT_EVENT_ALERT_TYPE_METRIC
        - INCIDENT_EVENT_ALERT_TYPE_NEW_VALUE
        - INCIDENT_EVENT_ALERT_TYPE_RATIO
        - INCIDENT_EVENT_ALERT_TYPE_TIME_RELATIVE
        - INCIDENT_EVENT_ALERT_TYPE_UNIQUE_COUNT
        - INCIDENT_EVENT_ALERT_TYPE_TRACING
        - INCIDENT_EVENT_ALERT_TYPE_FLOW
        - INCIDENT_EVENT_ALERT_TYPE_SLO
      type: string
    IncidentEventAssign:
      title: Incident event assignment details
      type: object
      properties:
        assignment:
          $ref: '#/components/schemas/Assignment'
      externalDocs:
        url: ''
    IncidentEventClose:
      type: object
      properties:
        closedBy:
          $ref: '#/components/schemas/UserDetails'
    IncidentEventExtended:
      title: Extended incident event
      required:
        - cxEventKey
        - incidentEvent
        - cxEventTimestamp
      type: object
      properties:
        cxEventKey:
          type: string
        cxEventTimestamp:
          type: string
          format: date-time
        incidentEvent:
          $ref: '#/components/schemas/IncidentEvent'
        incidentEventExtendedMetadata:
          $ref: '#/components/schemas/IncidentEventExtendedMetadata'
      externalDocs:
        url: ''
    IncidentEventExtendedMetadata:
      type: object
      properties:
        alertGroupByFields:
          type: array
          items:
            type: string
        alertId:
          type: string
        alertLabels:
          type: array
          items:
            $ref: '#/components/schemas/incidents.v1.MetaLabel'
        alertName:
          type: string
        alertType:
          $ref: '#/components/schemas/IncidentEventAlertType'
        incidentPermutation:
          type: object
          additionalProperties:
            type: string
        incidentSeverity:
          $ref: '#/components/schemas/IncidentSeverity'
        incidentState:
          $ref: '#/components/schemas/IncidentState'
        incidentStatus:
          $ref: '#/components/schemas/IncidentStatus'
        isMuted:
          type: boolean
    IncidentEventOrderByFieldType:
      enum:
        - INCIDENT_EVENT_ORDER_BY_FIELD_TYPE_TIMESTAMP_OR_UNSPECIFIED
      type: string
    IncidentEventOriginatorAdministrative:
      type: object
      properties:
        userId:
          type: string
    IncidentEventOriginatorOperational:
      type: object
      properties:
        systemName:
          type: string
    IncidentEventQueryFilter:
      title: Incident event query filter
      type: object
      properties:
        contextualLabels:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ContextualLabelValues'
          description: The contextual labels of the incident
        displayLabels:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DisplayLabelValues'
          description: The display labels of the incident
        isMuted:
          type: boolean
          description: Indicates if the incident is muted
        labels:
          $ref: '#/components/schemas/LabelsFilter'
        name:
          type: string
          description: The name of the incident
        severity:
          type: array
          items:
            $ref: '#/components/schemas/IncidentSeverity'
        status:
          type: array
          items:
            $ref: '#/components/schemas/IncidentStatus'
        timestamp:
          $ref: '#/components/schemas/v1.TimeRange'
      description: Filter configuration for incident events
      externalDocs:
        url: ''
    IncidentEventQueryFilter.ContextualLabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/ContextualLabelValues'
    IncidentEventQueryFilter.DisplayLabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/DisplayLabelValues'
    IncidentEventSnoozeIndicator:
      title: Incident event snooze indicator
      type: object
      properties:
        durationMinutes:
          type: integer
          format: int32
        startTime:
          type: string
          format: date-time
        userId:
          type: string
      externalDocs:
        url: ''
    IncidentEventType:
      enum:
        - INCIDENT_EVENT_TYPE_UNSPECIFIED
        - INCIDENT_EVENT_TYPE_UPSERT_STATE
        - INCIDENT_EVENT_TYPE_OPEN
        - INCIDENT_EVENT_TYPE_CLOSE
        - INCIDENT_EVENT_TYPE_SNOOZE_INDICATOR
        - INCIDENT_EVENT_TYPE_ASSIGN
        - INCIDENT_EVENT_TYPE_UNASSIGN
        - INCIDENT_EVENT_TYPE_ACKNOWLEDGE
      type: string
    IncidentEventUnassign:
      type: object
    IncidentEventUpsertState:
      title: Incident event upsert state
      required:
        - stateType
        - payload
      type: object
      properties:
        isMuted:
          type: boolean
        payload:
          $ref: '#/components/schemas/UpsertIncidentStatePayload'
        stateType:
          $ref: '#/components/schemas/UpsertIncidentStateType'
      externalDocs:
        url: ''
    IncidentFieldOneOf:
      oneOf:
        - type: object
          properties:
            id:
              type: string
          additionalProperties: false
        - type: object
          properties:
            severity:
              $ref: '#/components/schemas/IncidentSeverity'
          additionalProperties: false
        - type: object
          properties:
            name:
              type: string
          additionalProperties: false
        - type: object
          properties:
            createdAt:
              type: string
              format: date-time
          additionalProperties: false
        - type: object
          properties:
            closedAt:
              type: string
              format: date-time
          additionalProperties: false
        - type: object
          properties:
            state:
              $ref: '#/components/schemas/IncidentState'
          additionalProperties: false
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/IncidentStatus'
          additionalProperties: false
        - type: object
          properties:
            lastStateUpdateTime:
              type: string
              format: date-time
          additionalProperties: false
        - type: object
          properties:
            applicationName:
              type: string
          additionalProperties: false
        - type: object
          properties:
            subsystemName:
              type: string
          additionalProperties: false
        - type: object
          properties:
            duration:
              type: string
          additionalProperties: false
    IncidentFields:
      enum:
        - INCIDENTS_FIELDS_UNSPECIFIED
        - INCIDENTS_FIELDS_ID
        - INCIDENTS_FIELDS_SEVERITY
        - INCIDENTS_FIELDS_NAME
        - INCIDENTS_FIELDS_CREATED_TIME
        - INCIDENTS_FIELDS_CLOSED_TIME
        - INCIDENTS_FIELDS_STATE
        - INCIDENTS_FIELDS_STATUS
        - INCIDENTS_FIELDS_LAST_STATE_UPDATE_TIME
        - INCIDENTS_FIELDS_APPLICATION_NAME
        - INCIDENTS_FIELDS_SUBSYSTEM_NAME
        - INCIDENTS_FIELDS_DURATION
      type: string
    IncidentMetaLabelsCount:
      title: Incident meta labels count
      required:
        - metaLabel
        - count
      type: object
      properties:
        count:
          type: integer
          format: int64
          example: 10
        metaLabel:
          $ref: '#/components/schemas/incidents.v1.MetaLabel'
      externalDocs:
        url: ''
    IncidentMetaLabelsWithCount:
      title: Incident meta labels with count
      required:
        - metaLabel
        - count
      type: object
      properties:
        count:
          type: integer
          format: int32
          example: 10
        metaLabel:
          $ref: '#/components/schemas/incidents.v1.MetaLabel'
      externalDocs:
        url: ''
    IncidentPermutationEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    IncidentQueryFilter:
      title: Incident query filter
      type: object
      properties:
        applicationName:
          type: array
          items:
            type: string
            description: Filter by application names
        assignee:
          type: array
          items:
            type: string
            description: Filter by assignee
        contextualLabels:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ContextualLabelValues'
          description: Filter by contextual labels
        createdAtRange:
          $ref: '#/components/schemas/v1.TimeRange'
        displayLabels:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DisplayLabelValues'
          description: Filter by display labels
        endTime:
          type: string
          description: >-
            Filters all incidents that were open in the given timeframe end time
            (deprecated, use incident_open_range instead)
          format: date-time
          deprecated: true
        incidentDurationRange:
          $ref: '#/components/schemas/v1.TimeRange'
        isMuted:
          type: boolean
          description: Indicates if the incident is muted
        metaLabels:
          type: array
          items:
            $ref: '#/components/schemas/incidents.v1.MetaLabel'
        metaLabelsOp:
          $ref: '#/components/schemas/v1.FilterOperator'
        searchQuery:
          $ref: '#/components/schemas/IncidentSearchQuery'
        severity:
          type: array
          items:
            $ref: '#/components/schemas/IncidentSeverity'
        startTime:
          type: string
          description: >-
            Filters all incidents that were open in the given timeframe start
            time (deprecated, use incident_open_range instead)
          format: date-time
          deprecated: true
        state:
          type: array
          items:
            $ref: '#/components/schemas/IncidentState'
        status:
          type: array
          items:
            $ref: '#/components/schemas/IncidentStatus'
        subsystemName:
          type: array
          items:
            type: string
            description: Filter by subsystem names
      description: Filter configuration for incidents
      externalDocs:
        url: ''
    IncidentQueryFilter.ContextualLabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/ContextualLabelValues'
    IncidentQueryFilter.DisplayLabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/DisplayLabelValues'
    IncidentQueryFiltersValues:
      title: Incident query filter values
      required:
        - assigneeWithCount
        - statusWithCount
        - stateWithCount
        - severityWithCount
        - contextualLabels
        - displayLabels
        - metaLabelsWithCount
        - metaLabelsOp
      type: object
      properties:
        assigneeWithCount:
          type: array
          items:
            $ref: '#/components/schemas/AssigneeWithCount'
        contextualLabels:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ContextualLabelValuesWithCount'
        displayLabels:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DisplayLabelValuesWithCount'
        metaLabelsOp:
          $ref: '#/components/schemas/v1.FilterOperator'
        metaLabelsWithCount:
          type: array
          items:
            $ref: '#/components/schemas/IncidentMetaLabelsWithCount'
        severityWithCount:
          type: array
          items:
            $ref: '#/components/schemas/IncidentSeverityWithCount'
        stateWithCount:
          type: array
          items:
            $ref: '#/components/schemas/IncidentStateWithCount'
        statusWithCount:
          type: array
          items:
            $ref: '#/components/schemas/IncidentStatusWithCount'
      externalDocs:
        url: ''
    IncidentQueryFiltersValues.ContextualLabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/ContextualLabelValuesWithCount'
    IncidentQueryFiltersValues.DisplayLabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/DisplayLabelValuesWithCount'
    IncidentSearchQuery:
      oneOf:
        - title: Incident search query
          required:
            - query
            - field
          type: object
          properties:
            incidentField:
              $ref: '#/components/schemas/IncidentFields'
            query:
              type: string
              description: The search query
              example: error
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Incident search query
          required:
            - query
            - field
          type: object
          properties:
            contextualLabel:
              type: string
              description: The contextual label to search in.
            query:
              type: string
              description: The search query
              example: error
          additionalProperties: false
          externalDocs:
            url: ''
    IncidentSeverity:
      enum:
        - INCIDENT_SEVERITY_UNSPECIFIED
        - INCIDENT_SEVERITY_INFO
        - INCIDENT_SEVERITY_WARNING
        - INCIDENT_SEVERITY_ERROR
        - INCIDENT_SEVERITY_CRITICAL
        - INCIDENT_SEVERITY_LOW
      type: string
    IncidentSeverityCount:
      title: Incident severity count
      required:
        - severity
        - count
      type: object
      properties:
        count:
          type: integer
          format: int64
          example: 10
        severity:
          $ref: '#/components/schemas/IncidentSeverity'
      externalDocs:
        url: ''
    IncidentSeverityWithCount:
      title: Incident severity with count
      required:
        - severity
        - count
      type: object
      properties:
        count:
          type: integer
          format: int32
          example: 10
        severity:
          $ref: '#/components/schemas/IncidentSeverity'
      externalDocs:
        url: ''
    IncidentState:
      enum:
        - INCIDENT_STATE_UNSPECIFIED
        - INCIDENT_STATE_TRIGGERED
        - INCIDENT_STATE_RESOLVED
      type: string
    IncidentStateCount:
      title: Incident state count
      required:
        - state
        - count
      type: object
      properties:
        count:
          type: integer
          format: int64
          example: 10
        state:
          $ref: '#/components/schemas/IncidentState'
      externalDocs:
        url: ''
    IncidentStateWithCount:
      title: Incident state with count
      required:
        - state
        - count
      type: object
      properties:
        count:
          type: integer
          format: int32
          example: 10
        state:
          $ref: '#/components/schemas/IncidentState'
      externalDocs:
        url: ''
    IncidentStatus:
      enum:
        - INCIDENT_STATUS_UNSPECIFIED
        - INCIDENT_STATUS_TRIGGERED
        - INCIDENT_STATUS_ACKNOWLEDGED
        - INCIDENT_STATUS_RESOLVED
      type: string
    IncidentStatusCount:
      title: Incident status count
      required:
        - status
        - count
      type: object
      properties:
        count:
          type: integer
          format: int64
          example: 10
        status:
          $ref: '#/components/schemas/IncidentStatus'
      externalDocs:
        url: ''
    IncidentStatusWithCount:
      title: Incident status with count
      required:
        - status
        - count
      type: object
      properties:
        count:
          type: integer
          format: int32
          example: 10
        status:
          $ref: '#/components/schemas/IncidentStatus'
      externalDocs:
        url: ''
    IncidentsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/Incident'
    InitializeTestingRevisionRequest:
      title: Initialize testing revision request
      required:
        - extensionData
      type: object
      properties:
        extensionData:
          $ref: '#/components/schemas/ExtensionData'
      externalDocs:
        url: ''
    InitializeTestingRevisionResponse:
      title: Initialize testing revision response
      type: object
      externalDocs:
        url: ''
    InputType:
      enum:
        - API_KEY
        - TEXT
        - LIST_TEXT
        - MULTIPLE_SELECTION
        - BOOLEAN
        - SELECT
        - JSON
        - NUMBER
        - SENSITIVE_DATA
        - JSON_OBJECT_ARRAY
      type: string
    InsertCompanyMeasurementsRequest:
      type: object
      properties:
        measurementIds:
          type: array
          items:
            type: string
    InsertCompanyMeasurementsResponse:
      type: object
      properties:
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/Measurement'
    Instant.LabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    Integration:
      title: Integration
      type: object
      properties:
        darkIcon:
          type: string
        description:
          type: string
        featureFlag:
          type: string
        icon:
          type: string
        id:
          type: string
        integrationType:
          $ref: '#/components/schemas/v1.IntegrationType'
        name:
          type: string
        tags:
          type: array
          items:
            type: string
        versions:
          type: array
          items:
            type: string
      description: This data structure represents an integration
      externalDocs:
        url: ''
    IntegrationDefinition:
      title: Integration definition
      type: object
      properties:
        featureFlag:
          type: string
        integrationType:
          $ref: '#/components/schemas/v1.IntegrationType'
        key:
          type: string
        revisions:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationRevision'
      description: This data structure represents a definition of an integration.
      externalDocs:
        url: ''
    IntegrationDetail:
      title: Integration detail
      required:
        - name
        - link
      type: object
      properties:
        link:
          type: string
        name:
          type: string
      externalDocs:
        url: ''
    IntegrationDetails:
      oneOf:
        - title: Integration details
          type: object
          properties:
            default:
              $ref: '#/components/schemas/DefaultIntegrationDetails'
            docs:
              type: array
              items:
                $ref: '#/components/schemas/IntegrationDoc'
            extensions:
              type: array
              items:
                $ref: '#/components/schemas/v1.Extension'
            integration:
              $ref: '#/components/schemas/Integration'
            local:
              $ref: '#/components/schemas/LocalChangelog'
          additionalProperties: false
          description: This data structure represents a set of integration details.
          externalDocs:
            url: ''
        - title: Integration details
          type: object
          properties:
            default:
              $ref: '#/components/schemas/DefaultIntegrationDetails'
            docs:
              type: array
              items:
                $ref: '#/components/schemas/IntegrationDoc'
            extensions:
              type: array
              items:
                $ref: '#/components/schemas/v1.Extension'
            external:
              $ref: '#/components/schemas/ExternalUrl'
            integration:
              $ref: '#/components/schemas/Integration'
          additionalProperties: false
          description: This data structure represents a set of integration details.
          externalDocs:
            url: ''
    IntegrationDoc:
      title: Integration doc
      type: object
      properties:
        link:
          type: string
        name:
          type: string
      description: This data structure represents integration documentation.
      externalDocs:
        url: ''
    IntegrationGuide:
      title: Integration guide
      type: object
      properties:
        installationRequirements:
          type: string
        introduction:
          type: string
      additionalProperties: false
      externalDocs:
        url: ''
    IntegrationMetadata:
      title: Integration metadata
      type: object
      properties:
        integrationKey:
          type: string
        integrationParameters:
          $ref: '#/components/schemas/GenericIntegrationParameters'
        version:
          type: string
      additionalProperties: false
      description: This data structure represents the metadata of an integration.
      externalDocs:
        url: ''
    IntegrationRevision:
      oneOf:
        - title: Integration revision
          type: object
          properties:
            cloudFormation:
              $ref: '#/components/schemas/CloudFormationTemplate'
            featureFlag:
              type: string
            fields:
              type: array
              items:
                $ref: '#/components/schemas/FieldInformation'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/IntegrationRevision.Group'
            id:
              type: string
            revisionDeploymentSupported:
              type: boolean
            upgradeInstructionsMd:
              type: string
          additionalProperties: false
          description: This data structure represents an integration revision.
          externalDocs:
            url: ''
        - title: Integration revision
          type: object
          properties:
            featureFlag:
              type: string
            fields:
              type: array
              items:
                $ref: '#/components/schemas/FieldInformation'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/IntegrationRevision.Group'
            id:
              type: string
            managedService:
              $ref: '#/components/schemas/ManagedService'
            revisionDeploymentSupported:
              type: boolean
            upgradeInstructionsMd:
              type: string
          additionalProperties: false
          description: This data structure represents an integration revision.
          externalDocs:
            url: ''
        - title: Integration revision
          type: object
          properties:
            featureFlag:
              type: string
            fields:
              type: array
              items:
                $ref: '#/components/schemas/FieldInformation'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/IntegrationRevision.Group'
            helmChart:
              $ref: '#/components/schemas/HelmChart'
            id:
              type: string
            revisionDeploymentSupported:
              type: boolean
            upgradeInstructionsMd:
              type: string
          additionalProperties: false
          description: This data structure represents an integration revision.
          externalDocs:
            url: ''
        - title: Integration revision
          type: object
          properties:
            azureArmTemplate:
              $ref: '#/components/schemas/AzureArmTemplate'
            featureFlag:
              type: string
            fields:
              type: array
              items:
                $ref: '#/components/schemas/FieldInformation'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/IntegrationRevision.Group'
            id:
              type: string
            revisionDeploymentSupported:
              type: boolean
            upgradeInstructionsMd:
              type: string
          additionalProperties: false
          description: This data structure represents an integration revision.
          externalDocs:
            url: ''
        - title: Integration revision
          type: object
          properties:
            featureFlag:
              type: string
            fields:
              type: array
              items:
                $ref: '#/components/schemas/FieldInformation'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/IntegrationRevision.Group'
            id:
              type: string
            revisionDeploymentSupported:
              type: boolean
            rum:
              $ref: '#/components/schemas/Rum'
            upgradeInstructionsMd:
              type: string
          additionalProperties: false
          description: This data structure represents an integration revision.
          externalDocs:
            url: ''
        - title: Integration revision
          type: object
          properties:
            featureFlag:
              type: string
            fields:
              type: array
              items:
                $ref: '#/components/schemas/FieldInformation'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/IntegrationRevision.Group'
            id:
              type: string
            revisionDeploymentSupported:
              type: boolean
            terraform:
              $ref: '#/components/schemas/Terraform'
            upgradeInstructionsMd:
              type: string
          additionalProperties: false
          description: This data structure represents an integration revision.
          externalDocs:
            url: ''
    IntegrationRevision.Group:
      title: Group
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      externalDocs:
        url: ''
    IntegrationRevision.SingleNumericValue:
      title: Single numeric value
      type: object
      properties:
        defaultValue:
          type: number
          format: double
      additionalProperties: false
      externalDocs:
        url: ''
    IntegrationStatus:
      title: Integration status
      required:
        - connectionStatus
      type: object
      properties:
        connectionStatus:
          $ref: '#/components/schemas/ConnectionStatus'
        details:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            type: string
      description: This data structure represents an integration status.
      externalDocs:
        url: ''
    IntegrationStatus.DetailsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    InternalSectionOptions:
      type: object
    InternalUpdateRequest:
      oneOf:
        - type: object
          properties:
            ibm:
              $ref: '#/components/schemas/IbmConfigV2'
            retentionDays:
              type: integer
              format: int64
            tenantId:
              type: integer
              format: int64
          additionalProperties: false
        - type: object
          properties:
            retentionDays:
              type: integer
              format: int64
            s3:
              $ref: '#/components/schemas/S3Config'
            tenantId:
              type: integer
              format: int64
          additionalProperties: false
    Interpretation:
      enum:
        - INTERPRETATION_UNSPECIFIED
        - INTERPRETATION_RAW_DATA_TABLE
        - INTERPRETATION_TREND_OVER_TIME_LINE
        - INTERPRETATION_SINGLE_VALUE_KPI
        - INTERPRETATION_MULTI_VALUE_KPI
        - INTERPRETATION_CATEGORICAL_ANALYSIS_VERTICAL_BARS
        - INTERPRETATION_SINGLE_VALUE_KPI_STAT
        - INTERPRETATION_SINGLE_VALUE_KPI_GAUGE
        - INTERPRETATION_MULTI_VALUE_KPI_STAT
        - INTERPRETATION_MULTI_VALUE_KPI_GAUGE
        - INTERPRETATION_MULTI_VALUE_KPI_HEXAGON_BINS
        - INTERPRETATION_CATEGORICAL_ANALYSIS_PIE_CHART
        - INTERPRETATION_CATEGORICAL_ANALYSIS_HORIZONTAL_BARS
      type: string
    IntervalValue:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/StringValueLabel'
    IpAccess:
      title: IP Access
      required:
        - ipRange
        - enabled
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether this IP access entry is enabled.
          example: true
        ipRange:
          type: string
          description: The IP range in CIDR notation.
          example: 192.168.0.1/24
        name:
          type: string
          description: The name of the IP access entry.
          example: Office Network
      description: Represents a single IP access entry.
      externalDocs:
        description: Find out more about IP access control in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/account-management/account-settings/ip-access-control/
    IpAccessEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/IpAccess'
    IsFilterPredicate:
      title: IsFilterPredicate
      type: object
      properties:
        is:
          type: array
          items:
            type: string
      description: >-
        Predicate for SLO filters that checks if a field is equal to one of
        multiple values
      externalDocs:
        url: ''
    ItemCounts:
      title: Item counts
      type: object
      properties:
        actions:
          type: integer
          format: int64
        alerts:
          type: integer
          format: int64
        customDashboards:
          type: integer
          format: int64
        enrichments:
          type: integer
          format: int64
        eventsToMetrics:
          type: integer
          format: int64
        grafanaDashboards:
          type: integer
          format: int64
        kibanaDashboards:
          type: integer
          format: int64
        metricsRuleGroup:
          type: integer
          format: int64
        parsingRules:
          type: integer
          format: int64
        savedViews:
          type: integer
          format: int64
      externalDocs:
        url: ''
    JiraConfig:
      title: Jira configuration
      required:
        - apiToken
        - email
        - projectKey
      type: object
      properties:
        apiToken:
          type: string
          example: jira_api_token
        email:
          type: string
          example: jira_email
        projectKey:
          type: string
          example: jira_project_key
      externalDocs:
        url: ''
    JsonExtractParameters:
      type: object
      properties:
        destinationFieldText:
          type: string
        destinationFieldType:
          $ref: '#/components/schemas/DestinationField'
        rule:
          type: string
    JsonParseParameters:
      type: object
      properties:
        deleteSource:
          type: boolean
        destinationField:
          type: string
        escapedValue:
          type: boolean
        overrideDest:
          type: boolean
    JsonStringifyParameters:
      type: object
      properties:
        deleteSource:
          type: boolean
        destinationField:
          type: string
    KeyInfo:
      title: Key Info
      required:
        - id
        - name
        - owner
        - active
        - hashed
        - keyPermissions
      type: object
      properties:
        active:
          type: boolean
          example: true
        hashed:
          type: boolean
          example: true
        id:
          type: string
        keyPermissions:
          $ref: '#/components/schemas/KeyInfo.KeyPermissions'
        name:
          type: string
          example: my_api_key
        owner:
          $ref: '#/components/schemas/Owner'
        value:
          type: string
      additionalProperties: false
      description: >-
        This data structure represents the information associated with an API
        key.
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
    KeyInfo.KeyPermissions:
      title: Key Permissions
      required:
        - presets
        - permissions
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
        presets:
          type: array
          items:
            $ref: '#/components/schemas/PresetInfo'
      description: This data structure represents the permissions on an API key.
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
    KeyValue:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    KeyValuesEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    LabelFilterType:
      title: Label filter type
      required:
        - value
        - operation
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/LogFilterOperationType'
        value:
          type: string
          description: The value of the label to filter by
          example: my-app
      description: Label filter type for log entries
      externalDocs:
        url: ''
    LabelFilters:
      title: Label filters
      type: object
      properties:
        applicationName:
          type: array
          items:
            $ref: '#/components/schemas/LabelFilterType'
        severities:
          type: array
          items:
            $ref: '#/components/schemas/LogSeverity'
        subsystemName:
          type: array
          items:
            $ref: '#/components/schemas/LabelFilterType'
      description: Filters for application name, subsystem name, and log severities
      externalDocs:
        url: ''
    LabelMapping:
      type: object
      properties:
        dataSource:
          $ref: '#/components/schemas/DataSource'
        dataSourceType:
          $ref: '#/components/schemas/DataSourceType'
        description:
          type: string
        displayName:
          type: string
        extractionTemplate:
          type: string
          deprecated: true
        extractionTemplates:
          type: array
          items:
            type: string
        id:
          type: string
        isCustomLabel:
          type: boolean
        label:
          type: string
    LabelValues:
      type: object
      properties:
        labelName:
          type: string
        values:
          type: array
          items:
            type: string
    LabelledValue:
      type: object
      properties:
        labels:
          type: object
          additionalProperties:
            type: string
        name:
          type: string
        value:
          type: number
          format: double
    LabelledValue.LabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    LabelsFilter:
      title: Label filter configuration
      required:
        - metaLabels
      type: object
      properties:
        metaLabels:
          type: array
          items:
            $ref: '#/components/schemas/incidents.v1.MetaLabel'
        operator:
          $ref: '#/components/schemas/v1.FilterOperator'
      externalDocs:
        url: ''
    LabelsPermutationsCardinalityDay:
      type: object
      properties:
        day:
          type: string
        permutations:
          type: integer
          format: int32
    Language:
      enum:
        - UNKNOWN
        - BASH
        - JAVASCRIPT
      type: string
    Last:
      type: object
    LatencySli:
      title: Latency SLO
      required:
        - thresholdMicroseconds
        - thresholdSymbol
      type: object
      properties:
        thresholdMicroseconds:
          type: string
          example: '1000000'
        thresholdSymbol:
          $ref: '#/components/schemas/ThresholdSymbol'
      description: >-
        This data structure represents a Latency Service Level Indicator (SLO)
        in Coralogix APM.
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
    Layout:
      type: object
      properties:
        sections:
          type: array
          items:
            $ref: '#/components/schemas/Section'
    Legend:
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: '#/components/schemas/LegendColumn'
        groupByQuery:
          type: boolean
          description: >-
            In case of multiple queries, whether legend items should be grouped
            by their respective queries
        isVisible:
          type: boolean
          description: Is the legend visible in the widget
        placement:
          $ref: '#/components/schemas/LegendPlacement'
    LegendBy:
      enum:
        - LEGEND_BY_UNSPECIFIED
        - LEGEND_BY_THRESHOLDS
        - LEGEND_BY_GROUPS
      type: string
    LegendColumn:
      enum:
        - LEGEND_COLUMN_UNSPECIFIED
        - LEGEND_COLUMN_MIN
        - LEGEND_COLUMN_MAX
        - LEGEND_COLUMN_SUM
        - LEGEND_COLUMN_AVG
        - LEGEND_COLUMN_LAST
        - LEGEND_COLUMN_NAME
        - LEGEND_COLUMN_SIMPLE_VALUE
      type: string
    LegendPlacement:
      enum:
        - LEGEND_PLACEMENT_UNSPECIFIED
        - LEGEND_PLACEMENT_AUTO
        - LEGEND_PLACEMENT_BOTTOM
        - LEGEND_PLACEMENT_SIDE
        - LEGEND_PLACEMENT_HIDDEN
      type: string
    LessThanConditionOperator:
      type: object
      properties:
        undetectedValuesManagement:
          $ref: '#/components/schemas/v1.UndetectedValuesManagement'
    LessThanOrEqualsConditionOperator:
      type: object
      properties:
        undetectedValuesManagement:
          $ref: '#/components/schemas/v1.UndetectedValuesManagement'
    LimitUsage:
      type: object
      properties:
        limit:
          type: integer
          format: int32
        used:
          type: integer
          format: int32
    LineChart:
      title: LineChart
      required:
        - queryDefinitions
      type: object
      properties:
        connectNulls:
          type: boolean
          description: >-
            Whether the line should remain connected instead of producing
            scattered points when null values are present in between
          example: false
        legend:
          $ref: '#/components/schemas/Legend'
        queryDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/QueryDefinition'
        stackedLine:
          $ref: '#/components/schemas/LineChart.StackedLine'
        tooltip:
          $ref: '#/components/schemas/Tooltip'
      description: LineChart represents the configuration of a line chart widget.
      externalDocs:
        url: ''
    LineChart.DataprimeQuery:
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/common.DataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter.Source'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
    LineChart.LogsQuery:
      type: object
      properties:
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/LogsAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter.LogsFilter'
        groupBy:
          type: array
          items:
            type: string
            description: List of field names to group the query results
        groupBys:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
    LineChart.MetricsQuery:
      type: object
      properties:
        editorMode:
          $ref: '#/components/schemas/MetricsQueryEditorMode'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/MetricsFilter'
        promqlQuery:
          $ref: '#/components/schemas/PromQlQuery'
        seriesLimitType:
          $ref: '#/components/schemas/MetricsSeriesLimitType'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
    LineChart.Query:
      oneOf:
        - type: object
          properties:
            logs:
              $ref: '#/components/schemas/LineChart.LogsQuery'
          additionalProperties: false
        - type: object
          properties:
            metrics:
              $ref: '#/components/schemas/LineChart.MetricsQuery'
          additionalProperties: false
        - type: object
          properties:
            spans:
              $ref: '#/components/schemas/LineChart.SpansQuery'
          additionalProperties: false
        - type: object
          properties:
            dataprime:
              $ref: '#/components/schemas/LineChart.DataprimeQuery'
          additionalProperties: false
    LineChart.Resolution:
      type: object
      properties:
        bucketsPresented:
          type: integer
          description: How many buckets to present in the selected timeframe
          format: int32
        interval:
          type: string
          description: >-
            Interval of value sampling, i.e. every 5 minutes, every 1 second and
            so on
    LineChart.SpansQuery:
      type: object
      properties:
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/SpansAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/SpansFilter'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/SpanField'
        groupBys:
          type: array
          items:
            $ref: '#/components/schemas/SpanObservationField'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
    LineChart.StackedLine:
      enum:
        - STACKED_LINE_UNSPECIFIED
        - STACKED_LINE_ABSOLUTE
        - STACKED_LINE_RELATIVE
      type: string
    Link:
      title: Link
      type: object
      properties:
        key:
          type: string
        text:
          type: string
        url:
          type: string
      externalDocs:
        url: ''
    ListActionsRequest:
      type: object
    ListActionsResponse:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/v2.Action'
    ListAlertDefsRequest:
      title: List alert definitions request
      type: object
      properties:
        orderBys:
          $ref: '#/components/schemas/AlertDefOrderByList'
        pagination:
          $ref: '#/components/schemas/alerts.v3.PaginationRequest'
        queryFilter:
          $ref: '#/components/schemas/AlertDefQueryFilter'
      additionalProperties: false
      description: A request to get list of alert definitions
      externalDocs:
        url: ''
    ListAlertDefsResponse:
      title: List alert definitions response
      required:
        - alertDefs
      type: object
      properties:
        alertDefs:
          type: array
          items:
            $ref: '#/components/schemas/AlertDef'
        pagination:
          $ref: '#/components/schemas/alerts.v3.PaginationResponse'
      description: A response that contains a list of alert definitions
      externalDocs:
        url: ''
    ListAllOutgoingWebhooksRequest:
      title: List all outgoing webhooks request
      type: object
      externalDocs:
        url: ''
    ListAllOutgoingWebhooksResponse:
      title: List all outgoing webhooks response
      type: object
      properties:
        deployed:
          type: array
          items:
            $ref: '#/components/schemas/OutgoingWebhookExtendedSummary'
      externalDocs:
        url: ''
    ListConnectorSummariesRequest:
      title: List Connector Summaries Request
      type: object
      properties:
        connectorType:
          $ref: '#/components/schemas/ConnectorType'
        supportedByEntityType:
          $ref: '#/components/schemas/notification_center.EntityType'
      additionalProperties: false
      description: Request to list summaries of connectors with optional filtering
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ListConnectorSummariesResponse:
      title: List Connector Summaries Response
      type: object
      properties:
        connectors:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorSummary'
      description: Response containing summaries of connectors
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ListConnectorsRequest:
      title: List Connectors Request
      type: object
      properties:
        connectorType:
          $ref: '#/components/schemas/ConnectorType'
        supportedByEntityType:
          $ref: '#/components/schemas/notification_center.EntityType'
      additionalProperties: false
      description: Request to list connectors with optional filtering
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ListConnectorsResponse:
      title: List Connectors Response
      type: object
      properties:
        connectors:
          type: array
          items:
            $ref: '#/components/schemas/Connector'
      description: Response containing a list of connectors
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ListCustomRolesRequest:
      type: object
      properties:
        teamId:
          type: integer
          format: int64
      additionalProperties: false
    ListCustomRolesResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/v2.CustomRole'
    ListDashboardFoldersRequest:
      title: List dashboard folders request data structure
      type: object
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    ListDashboardFoldersResponse:
      title: List dashboard folders response data structure
      type: object
      properties:
        folder:
          type: array
          items:
            $ref: '#/components/schemas/DashboardFolder'
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    ListE2MRequest:
      type: object
    ListE2MResponse:
      title: List E2M Response
      required:
        - e2m
      type: object
      properties:
        e2m:
          type: array
          items:
            $ref: '#/components/schemas/E2M'
      description: >-
        This is the response obtained when listing all event to metric
        definitions
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    ListEntitySubTypesRequest:
      title: List Entity Sub Types
      type: object
      properties:
        entityType:
          $ref: '#/components/schemas/notification_center.EntityType'
      description: >-
        Request to list entity subtypes by entity type supported by Notification
        Center
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ListEntitySubTypesResponse:
      type: object
      properties:
        entitySubTypes:
          type: array
          items:
            type: string
    ListEntityTypesRequest:
      title: List Entity Types
      type: object
      description: Request to list entity types supported by Notification Center
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ListEntityTypesResponse:
      type: object
      properties:
        entityTypes:
          type: array
          items:
            $ref: '#/components/schemas/notification_center.EntityType'
    ListEventsCountRequest:
      title: ListEventsCountRequest
      required:
        - filter
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/EventsFilter'
      description: This data structure represents a request to list events count
      externalDocs:
        url: ''
    ListEventsCountResponse:
      title: ListEventsCountResponse
      required:
        - count
        - reachedLimit
      type: object
      properties:
        count:
          type: string
          format: uint64
          example: 10
        reachedLimit:
          type: boolean
          example: false
      description: This data structure represents a response to list events count
      externalDocs:
        url: ''
    ListEventsRequest:
      title: ListEventsRequest
      required:
        - filter
        - orderBys
        - pagination
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/EventsFilter'
        orderBys:
          type: array
          items:
            $ref: '#/components/schemas/events.v3.OrderBy'
        pagination:
          $ref: '#/components/schemas/events.v3.PaginationRequest'
      description: This data structure represents a request to list events
      externalDocs:
        url: ''
    ListEventsResponse:
      title: ListEventsResponse
      required:
        - events
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/CxEvent'
        pagination:
          $ref: '#/components/schemas/events.v3.PaginationResponse'
      description: This data structure represents a response to list events
      externalDocs:
        url: ''
    ListGlobalRoutersRequest:
      title: List Global Routers Request
      type: object
      properties:
        entityType:
          $ref: '#/components/schemas/notification_center.EntityType'
        sourceEntityLabels:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EntityLabelValues'
      additionalProperties: false
      description: Request to retrieve global routers by entity type or all
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ListGlobalRoutersResponse:
      title: List Global Routers Response
      type: object
      properties:
        routers:
          type: array
          items:
            $ref: '#/components/schemas/GlobalRouter'
      description: Response containing requested global routers
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ListHotStoreConfigsRequest:
      type: object
    ListHotStoreConfigsResponse:
      type: object
      properties:
        configs:
          type: array
          items:
            $ref: '#/components/schemas/HotStoreConfig'
    ListIbmEventNotificationsInstancesRequest:
      type: object
    ListIbmEventNotificationsInstancesResponse:
      type: object
      properties:
        instances:
          type: array
          items:
            $ref: '#/components/schemas/EventNotificationsInstance'
    ListIncidentAggregationsRequest:
      title: List incident aggregations request
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/IncidentQueryFilter'
        groupBys:
          type: array
          items:
            $ref: '#/components/schemas/GroupBy'
        pagination:
          $ref: '#/components/schemas/v1.PaginationRequest'
      description: >-
        Request to get aggregated incident data with filtering and grouping
        options
      externalDocs:
        url: ''
    ListIncidentAggregationsResponse:
      title: List incident aggregations response
      required:
        - incidentAggs
        - pagination
      type: object
      properties:
        incidentAggs:
          type: array
          items:
            $ref: '#/components/schemas/IncidentAggregation'
        pagination:
          $ref: '#/components/schemas/v1.PaginationResponse'
      description: Response containing aggregated incident data and pagination information
      externalDocs:
        url: ''
    ListIncidentEventRequestOrderBy:
      title: List incident events order by request
      type: object
      properties:
        direction:
          $ref: '#/components/schemas/v1.OrderByDirection'
        field:
          $ref: '#/components/schemas/IncidentEventOrderByFieldType'
      externalDocs:
        url: ''
    ListIncidentEventsFilterValuesRequest:
      title: List incident events filter values request
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/IncidentEventQueryFilter'
      description: A request to get available filter values for incident events
      externalDocs:
        url: ''
    ListIncidentEventsFilterValuesResponse:
      title: List incident events filter values response
      type: object
      properties:
        filtersValues:
          $ref: '#/components/schemas/IncidentQueryFiltersValues'
      description: A response containing available filter values for incident events
      externalDocs:
        url: ''
    ListIncidentEventsRequest:
      title: List incident events request
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/IncidentEventQueryFilter'
        orderBy:
          $ref: '#/components/schemas/ListIncidentEventRequestOrderBy'
        pagination:
          $ref: '#/components/schemas/v1.PaginationRequest'
      description: >-
        Request to list incident events with filtering, pagination and ordering
        options
      externalDocs:
        url: ''
    ListIncidentEventsResponse:
      title: List incident events response
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/IncidentEventExtended'
        pagination:
          $ref: '#/components/schemas/v1.PaginationResponse'
      description: >-
        A response containing a list of incident events and pagination
        information
      externalDocs:
        url: ''
    ListIncidentEventsTotalCountRequest:
      title: List incident events total count request
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/IncidentEventQueryFilter'
      description: A request to get the total count of incident events matching a filter
      externalDocs:
        url: ''
    ListIncidentEventsTotalCountResponse:
      title: List incident events total count response
      type: object
      properties:
        count:
          type: string
          description: Total number of incident events matching the filter
          format: uint64
          example: 100
        reachedLimit:
          type: boolean
          description: Indicates if the count reached the system limit
          example: false
      description: >-
        A response containing the total count of matching incident events and
        whether the count limit was reached
      externalDocs:
        url: ''
    ListIncidentsRequest:
      title: List incidents request
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/IncidentQueryFilter'
        orderBys:
          type: array
          items:
            $ref: '#/components/schemas/v1.OrderBy'
        pagination:
          $ref: '#/components/schemas/v1.PaginationRequest'
      description: >-
        Request to list incidents with filtering, pagination and ordering
        options
      externalDocs:
        url: ''
    ListIncidentsResponse:
      title: List incidents response
      required:
        - incidents
        - pagination
      type: object
      properties:
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/Incident'
        pagination:
          $ref: '#/components/schemas/v1.PaginationResponse'
      description: Response containing a list of incidents and pagination information
      externalDocs:
        url: ''
    ListLabelsCardinalityRequest:
      oneOf:
        - type: object
          properties:
            metricLabels:
              type: array
              items:
                $ref: '#/components/schemas/MetricLabel'
            spansQuery:
              $ref: '#/components/schemas/v2.SpansQuery'
          additionalProperties: false
        - type: object
          properties:
            logsQuery:
              $ref: '#/components/schemas/v2.LogsQuery'
            metricLabels:
              type: array
              items:
                $ref: '#/components/schemas/MetricLabel'
          additionalProperties: false
    ListLabelsCardinalityResponse:
      type: object
      properties:
        permutations:
          type: array
          items:
            $ref: '#/components/schemas/LabelsPermutationsCardinalityDay'
    ListManagedIntegrationKeysRequest:
      type: object
    ListManagedIntegrationKeysResponse:
      title: List managed integration keys response
      required:
        - integrationKeys
      type: object
      properties:
        integrationKeys:
          type: array
          items:
            type: string
      externalDocs:
        url: ''
    ListOutboundWebhooksSummaryRequest:
      title: List outbound webhooks summary request
      type: object
      externalDocs:
        url: ''
    ListOutboundWebhooksSummaryResponse:
      title: List outbound webhooks summary response
      type: object
      properties:
        outboundWebhookSummaries:
          type: array
          items:
            $ref: '#/components/schemas/OutboundWebhookSummary'
      externalDocs:
        url: ''
    ListOutgoingWebhookTypesRequest:
      title: List outgoing webhook types request
      type: object
      externalDocs:
        url: ''
    ListOutgoingWebhookTypesResponse:
      title: List outgoing webhook types response
      type: object
      properties:
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/OutgoingWebhookType'
      externalDocs:
        url: ''
    ListOutgoingWebhooksRequest:
      title: List outgoing webhooks request
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/WebhookType'
      externalDocs:
        url: ''
    ListOutgoingWebhooksResponse:
      title: List outgoing webhooks response
      type: object
      properties:
        deployed:
          type: array
          items:
            $ref: '#/components/schemas/OutgoingWebhookSummary'
      externalDocs:
        url: ''
    ListPresetSummariesRequest:
      type: object
      properties:
        connectorType:
          $ref: '#/components/schemas/ConnectorType'
        entityType:
          $ref: '#/components/schemas/notification_center.EntityType'
      additionalProperties: false
    ListPresetSummariesResponse:
      type: object
      properties:
        presetSummaries:
          type: array
          items:
            $ref: '#/components/schemas/PresetSummary'
    ListRuleGroupsRequest:
      type: object
    ListRuleGroupsResponse:
      type: object
      properties:
        ruleGroups:
          type: array
          items:
            $ref: '#/components/schemas/RuleGroup'
    ListServiceSlosRequest:
      title: List Service SLOs Request
      required:
        - orderBy
        - serviceNames
      type: object
      properties:
        orderBy:
          $ref: '#/components/schemas/v2.OrderBy'
        serviceNames:
          type: array
          items:
            type: string
      description: This data structure represents a request to list Service SLOs.
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
    ListServiceSlosResponse:
      title: List Service SLOs Response
      required:
        - slos
      type: object
      properties:
        slos:
          type: array
          items:
            $ref: '#/components/schemas/ServiceSlo'
      description: This data structure represents a response to list Service SLOs.
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
    ListSlosRequest:
      title: ListSlosRequest
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/SloFilters'
      description: Request to list SLOs with optional filters.
      externalDocs:
        url: ''
    ListSlosResponse:
      title: ListSlosResponse
      required:
        - slos
      type: object
      properties:
        slos:
          type: array
          items:
            $ref: '#/components/schemas/Slo'
      description: Response containing a list of SLOs.
      externalDocs:
        url: ''
    ListSystemRolesRequest:
      type: object
    ListSystemRolesResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/v2.SystemRole'
    ListTeamsRequest:
      type: object
    ListTeamsResponse:
      type: object
      properties:
        defaultTeam:
          $ref: '#/components/schemas/ListTeamsResponse.TeamInfo'
        teams:
          type: array
          items:
            $ref: '#/components/schemas/ListTeamsResponse.TeamInfo'
    ListTeamsResponse.TeamInfo:
      type: object
      properties:
        dailyQuota:
          type: number
          format: double
        retention:
          type: integer
          format: int32
        teamId:
          $ref: '#/components/schemas/v2.TeamId'
        teamName:
          type: string
    ListTenantConfigsRequest:
      type: object
    ListTenantConfigsResponse:
      type: object
      properties:
        tenantConfigs:
          type: array
          items:
            $ref: '#/components/schemas/TenantConfig'
    ListTextValue:
      title: List text value
      type: object
      properties:
        defaultValues:
          type: array
          items:
            type: string
        options:
          type: array
          items:
            type: string
      externalDocs:
        url: ''
    ListValue:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/SingleStringValue'
    ListViewFoldersRequest:
      type: object
    ListViewFoldersResponse:
      type: object
      properties:
        folders:
          type: array
          items:
            $ref: '#/components/schemas/ViewFolder'
    ListViewsRequest:
      type: object
    ListViewsResponse:
      type: object
      properties:
        views:
          type: array
          items:
            $ref: '#/components/schemas/View'
    LocalChangelog:
      title: Local changelog
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: '#/components/schemas/RevisionRef'
      externalDocs:
        url: ''
    Log:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties:
            type: string
        text:
          type: string
    LogFilterOperationType:
      enum:
        - LOG_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED
        - LOG_FILTER_OPERATION_TYPE_INCLUDES
        - LOG_FILTER_OPERATION_TYPE_ENDS_WITH
        - LOG_FILTER_OPERATION_TYPE_STARTS_WITH
      type: string
    LogMetaFieldsValues:
      type: object
      properties:
        applicationNameValues:
          type: string
        severityValues:
          type: string
        subsystemNameValues:
          type: string
    LogMetadata:
      title: Log metadata
      type: object
      properties:
        firstOccurrence:
          type: string
          format: date-time
        lastOccurrence:
          type: string
          format: date-time
      externalDocs:
        url: ''
    LogRules:
      type: object
      properties:
        severities:
          type: array
          items:
            $ref: '#/components/schemas/quota.v1.Severity'
    LogSeverity:
      enum:
        - LOG_SEVERITY_VERBOSE_UNSPECIFIED
        - LOG_SEVERITY_DEBUG
        - LOG_SEVERITY_INFO
        - LOG_SEVERITY_WARNING
        - LOG_SEVERITY_ERROR
        - LOG_SEVERITY_CRITICAL
      type: string
    LogSeverityLevel:
      enum:
        - LOG_SEVERITY_LEVEL_UNSPECIFIED
        - LOG_SEVERITY_LEVEL_DEBUG
        - LOG_SEVERITY_LEVEL_VERBOSE
        - LOG_SEVERITY_LEVEL_INFO
        - LOG_SEVERITY_LEVEL_WARNING
        - LOG_SEVERITY_LEVEL_ERROR
        - LOG_SEVERITY_LEVEL_CRITICAL
      type: string
    Logs:
      title: LogsQuery
      type: object
      properties:
        aggregation:
          type: array
          items:
            $ref: '#/components/schemas/LogsAggregation'
        dataModeType:
          $ref: '#/components/schemas/widgets.common.DataModeType'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter.LogsFilter'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
      description: A logs variant of the query
      externalDocs:
        url: ''
    LogsAggregation:
      oneOf:
        - type: object
          properties:
            count:
              $ref: '#/components/schemas/Count'
          additionalProperties: false
        - type: object
          properties:
            countDistinct:
              $ref: '#/components/schemas/CountDistinct'
          additionalProperties: false
        - type: object
          properties:
            sum:
              $ref: '#/components/schemas/Sum'
          additionalProperties: false
        - type: object
          properties:
            average:
              $ref: '#/components/schemas/Average'
          additionalProperties: false
        - type: object
          properties:
            min:
              $ref: '#/components/schemas/Min'
          additionalProperties: false
        - type: object
          properties:
            max:
              $ref: '#/components/schemas/Max'
          additionalProperties: false
        - type: object
          properties:
            percentile:
              $ref: '#/components/schemas/Percentile'
          additionalProperties: false
    LogsAnomalyCondition:
      title: Log-based anomaly condition
      required:
        - minimumThreshold
        - timeWindow
        - conditionType
      type: object
      properties:
        conditionType:
          $ref: '#/components/schemas/LogsAnomalyConditionType'
        minimumThreshold:
          type: number
          description: The threshold value for the alert condition
          format: double
          example: 10
        timeWindow:
          $ref: '#/components/schemas/LogsTimeWindow'
      description: Defines conditions for detecting log anomalies
      externalDocs:
        url: ''
    LogsAnomalyConditionType:
      enum:
        - LOGS_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED
      type: string
    LogsAnomalyRule:
      title: Log-based anomaly rule
      required:
        - condition
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/LogsAnomalyCondition'
      description: Defines a rule for detecting log anomalies
      externalDocs:
        url: ''
    LogsAnomalyType:
      title: Log-based anomaly alert type
      required:
        - rules
      type: object
      properties:
        anomalyAlertSettings:
          $ref: '#/components/schemas/AnomalyAlertSettings'
        evaluationDelayMs:
          type: integer
          description: The delay in milliseconds before evaluating the alert condition
          format: int32
          example: 60000
        logsFilter:
          $ref: '#/components/schemas/v3.LogsFilter'
        notificationPayloadFilter:
          type: array
          items:
            pattern: ^[a-zA-Z0-9_.]+$
            type: string
            description: >-
              The filter to specify which fields to include in the notification
              payload
            example:
              - obj.field
        rules:
          type: array
          items:
            $ref: '#/components/schemas/LogsAnomalyRule'
      description: Configuration for alerts triggered by anomalous log patterns
      externalDocs:
        description: Learn more about logs anomaly alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/logs/anomaly-detection-alerts/
    LogsAvro:
      type: object
    LogsCount:
      title: Logs Count
      type: object
      properties:
        logsCount:
          type: string
          format: int64
          example: 100
        priority:
          $ref: '#/components/schemas/v2.Priority'
        severity:
          $ref: '#/components/schemas/datausage.v2.Severity'
        timestamp:
          type: string
          format: date-time
      description: This data structure represents a logs count.
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    LogsImmediateNotification:
      type: object
    LogsImmediateType:
      title: Logs immediate alert type
      required:
        - logsFilter
      type: object
      properties:
        logsFilter:
          $ref: '#/components/schemas/v3.LogsFilter'
        notificationPayloadFilter:
          type: array
          items:
            pattern: ^[a-zA-Z0-9_.]+$
            type: string
            example:
              - obj.field
      description: >-
        Configuration for immediate alerts triggered on log entries matching
        specific filters.
      externalDocs:
        description: Learn more about logs immediate alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/logs/immediate-notifications/
    LogsNewValueCondition:
      title: Log-based new value condition
      required:
        - keypathToTrack
        - timeWindow
      type: object
      properties:
        keypathToTrack:
          type: string
          description: The keypath to track for new values
          example: metadata.field
        timeWindow:
          $ref: '#/components/schemas/LogsNewValueTimeWindow'
      description: Defines conditions for detecting new values in logs
      externalDocs:
        url: ''
    LogsNewValueRule:
      title: Log-based new value rule
      required:
        - condition
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/LogsNewValueCondition'
      description: Defines the condition for detecting new values in logs
      externalDocs:
        url: ''
    LogsNewValueTimeWindow:
      title: Log-based new value alert time window
      type: object
      properties:
        logsNewValueTimeWindowSpecificValue:
          $ref: '#/components/schemas/LogsNewValueTimeWindowValue'
      additionalProperties: false
      description: Time window configuration for log-based new value alerts
      externalDocs:
        url: ''
    LogsNewValueTimeWindowValue:
      enum:
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_12_OR_UNSPECIFIED
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_24
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_48
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_HOURS_72
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_WEEK_1
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_MONTH_1
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_MONTHS_2
        - LOGS_NEW_VALUE_TIME_WINDOW_VALUE_MONTHS_3
      type: string
    LogsNewValueType:
      title: Log-based new value alert type
      required:
        - rules
      type: object
      properties:
        logsFilter:
          $ref: '#/components/schemas/v3.LogsFilter'
        notificationPayloadFilter:
          type: array
          items:
            pattern: ^[a-zA-Z0-9_.]+$
            type: string
            description: >-
              The filter to specify which fields to include in the notification
              payload.
            example:
              - obj.field
        rules:
          type: array
          items:
            $ref: '#/components/schemas/LogsNewValueRule'
      description: Configuration for alerts triggered by new values appearing in logs
      externalDocs:
        url: ''
    LogsPathSource:
      type: object
      properties:
        observationField:
          $ref: '#/components/schemas/ObservationField'
        value:
          type: string
    LogsQuery.Aggregation:
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/LogsAggregation'
        id:
          type: string
          description: Aggregation unique identifier
          example:
            value: 52d192ac-a28f-4c51-97f5-5ba004249ba1
        isVisible:
          type: boolean
          description: Whether the aggregation is visible in the table
        name:
          type: string
          description: Aggregation name
    LogsQuery.Grouping:
      type: object
      properties:
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/LogsQuery.Aggregation'
        groupBy:
          type: array
          items:
            type: string
            description: List of field names to group the query results
        groupBys:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
    LogsRatioCondition:
      title: Log-based ratio condition
      required:
        - threshold
        - timeWindow
        - conditionType
      type: object
      properties:
        conditionType:
          $ref: '#/components/schemas/LogsRatioConditionType'
        threshold:
          pattern: ^\d+(\.\d+)?$
          type: number
          description: The threshold value for the alert condition
          format: double
          example: 10
        timeWindow:
          $ref: '#/components/schemas/LogsRatioTimeWindow'
      description: Defines conditions for ratio-based alerts
      externalDocs:
        url: ''
    LogsRatioConditionType:
      enum:
        - LOGS_RATIO_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
        - LOGS_RATIO_CONDITION_TYPE_LESS_THAN
      type: string
    LogsRatioGroupByFor:
      enum:
        - LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED
        - LOGS_RATIO_GROUP_BY_FOR_NUMERATOR_ONLY
        - LOGS_RATIO_GROUP_BY_FOR_DENUMERATOR_ONLY
      type: string
    LogsRatioRules:
      title: Log-based ratio rules
      required:
        - condition
        - override
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/LogsRatioCondition'
        override:
          $ref: '#/components/schemas/AlertDefOverride'
      description: Defines the rules for log-based ratio alerts
      externalDocs:
        url: ''
    LogsRatioThresholdType:
      title: Log-based ratio threshold alert type
      required:
        - numerator
        - denominator
        - rules
      type: object
      properties:
        denominator:
          $ref: '#/components/schemas/v3.LogsFilter'
        denominatorAlias:
          type: string
          description: The alias for the denominator filter, used for display purposes
          example: denominator_alias
        evaluationDelayMs:
          type: integer
          description: The delay in milliseconds before evaluating the alert condition
          format: int32
          example: 60000
        groupByFor:
          $ref: '#/components/schemas/LogsRatioGroupByFor'
        ignoreInfinity:
          type: boolean
          description: The configuration for ignoring infinity values in the ratio
          example: true
        notificationPayloadFilter:
          type: array
          items:
            pattern: ^[a-zA-Z0-9_.]+$
            type: string
            example:
              - obj.field
        numerator:
          $ref: '#/components/schemas/v3.LogsFilter'
        numeratorAlias:
          type: string
          description: The alias for the numerator filter, used for display purposes
          example: numerator_alias
        rules:
          type: array
          items:
            $ref: '#/components/schemas/LogsRatioRules'
        undetectedValuesManagement:
          $ref: '#/components/schemas/v3.UndetectedValuesManagement'
      description: Configuration for alerts based on the ratio between two log queries
      externalDocs:
        description: Learn more about logs ratio alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/logs/ratio-alerts/
    LogsRatioTimeWindow:
      title: Logs ratio time window
      type: object
      properties:
        logsRatioTimeWindowSpecificValue:
          $ref: '#/components/schemas/LogsRatioTimeWindowValue'
      additionalProperties: false
      description: Time window configuration for ratio alerts
      externalDocs:
        description: Learn more about log-based ratio alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/logs/ratio-alerts/
    LogsRatioTimeWindowValue:
      enum:
        - LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED
        - LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_10
        - LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_15
        - LOGS_RATIO_TIME_WINDOW_VALUE_MINUTES_30
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOUR_1
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_2
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_4
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_6
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_12
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_24
        - LOGS_RATIO_TIME_WINDOW_VALUE_HOURS_36
      type: string
    LogsSimpleFilter:
      title: Simple log filter
      type: object
      properties:
        labelFilters:
          $ref: '#/components/schemas/LabelFilters'
        luceneQuery:
          type: string
      description: Basic filter configuration using a Lucene query and label filters
      externalDocs:
        url: ''
    LogsSource:
      type: object
      properties:
        dataModeType:
          $ref: '#/components/schemas/v1.common.DataModeType'
        labelFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
        messageTemplate:
          type: string
        strategy:
          $ref: '#/components/schemas/LogsSource.Strategy'
    LogsSource.Strategy:
      oneOf:
        - type: object
          properties:
            instant:
              $ref: '#/components/schemas/LogsSource.Strategy.Instant'
          additionalProperties: false
        - type: object
          properties:
            range:
              $ref: '#/components/schemas/LogsSource.Strategy.Range'
          additionalProperties: false
        - type: object
          properties:
            duration:
              $ref: '#/components/schemas/LogsSource.Strategy.Duration'
          additionalProperties: false
    LogsSource.Strategy.Duration:
      type: object
      properties:
        durationField:
          $ref: '#/components/schemas/ObservationField'
        startTimestampField:
          $ref: '#/components/schemas/ObservationField'
    LogsSource.Strategy.Instant:
      type: object
      properties:
        timestampField:
          $ref: '#/components/schemas/ObservationField'
    LogsSource.Strategy.Range:
      type: object
      properties:
        endTimestampField:
          $ref: '#/components/schemas/ObservationField'
        startTimestampField:
          $ref: '#/components/schemas/ObservationField'
    LogsThresholdCondition:
      title: Logs Threshold Condition
      required:
        - threshold
        - timeWindow
        - conditionType
      type: object
      properties:
        conditionType:
          $ref: '#/components/schemas/LogsThresholdConditionType'
        threshold:
          pattern: ^\d+(\.\d+)?$
          type: number
          description: The threshold value for the alert condition
          format: double
          example: 100
        timeWindow:
          $ref: '#/components/schemas/LogsTimeWindow'
      description: >-
        LogsThresholdCondition is a message that defines the condition for
        log-based threshold alerts.
      externalDocs:
        url: ''
    LogsThresholdConditionType:
      enum:
        - LOGS_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
        - LOGS_THRESHOLD_CONDITION_TYPE_LESS_THAN
      type: string
    LogsThresholdNotification:
      type: object
      properties:
        conditionType:
          $ref: '#/components/schemas/LogsThresholdConditionType'
        countResult:
          type: string
          format: int64
        fromTimestamp:
          type: string
          format: date-time
        isUndetectedValue:
          type: boolean
        toTimestamp:
          type: string
          format: date-time
    LogsThresholdRule:
      title: Logs Threshold Rule
      required:
        - condition
        - override
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/LogsThresholdCondition'
        override:
          $ref: '#/components/schemas/AlertDefOverride'
      description: >-
        LogsThresholdRule is a message that defines a rule for log-based
        threshold alerts.
      externalDocs:
        url: ''
    LogsThresholdType:
      title: Log-based threshold alert type
      required:
        - rules
      type: object
      properties:
        evaluationDelayMs:
          type: integer
          description: The delay in milliseconds before evaluating the alert condition
          format: int32
          example: 60000
        logsFilter:
          $ref: '#/components/schemas/v3.LogsFilter'
        notificationPayloadFilter:
          type: array
          items:
            pattern: ^[a-zA-Z0-9_.]+$
            type: string
            description: >-
              The filter to specify which fields to include in the notification
              payload
            example:
              - obj.field
        rules:
          type: array
          items:
            $ref: '#/components/schemas/LogsThresholdRule'
        undetectedValuesManagement:
          $ref: '#/components/schemas/v3.UndetectedValuesManagement'
      description: >-
        Configuration for alerts triggered when log counts exceed or fall below
        specified thresholds
      externalDocs:
        description: Learn more about log-based threshold alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/logs/threshold-alerts/
    LogsTimeRelativeComparedTo:
      enum:
        - LOGS_TIME_RELATIVE_COMPARED_TO_PREVIOUS_HOUR_OR_UNSPECIFIED
        - LOGS_TIME_RELATIVE_COMPARED_TO_SAME_HOUR_YESTERDAY
        - LOGS_TIME_RELATIVE_COMPARED_TO_SAME_HOUR_LAST_WEEK
        - LOGS_TIME_RELATIVE_COMPARED_TO_YESTERDAY
        - LOGS_TIME_RELATIVE_COMPARED_TO_SAME_DAY_LAST_WEEK
        - LOGS_TIME_RELATIVE_COMPARED_TO_SAME_DAY_LAST_MONTH
      type: string
    LogsTimeRelativeCondition:
      title: Log-based time-relative condition
      required:
        - threshold
        - comparedTo
        - conditionType
      type: object
      properties:
        comparedTo:
          $ref: '#/components/schemas/LogsTimeRelativeComparedTo'
        conditionType:
          $ref: '#/components/schemas/LogsTimeRelativeConditionType'
        threshold:
          type: number
          description: The threshold value for the alert condition.
          format: double
      description: Defines conditions for time-relative comparison alerts
      externalDocs:
        url: ''
    LogsTimeRelativeConditionType:
      enum:
        - LOGS_TIME_RELATIVE_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
        - LOGS_TIME_RELATIVE_CONDITION_TYPE_LESS_THAN
      type: string
    LogsTimeRelativeRule:
      title: Logs Time Relative Rule
      required:
        - condition
        - override
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/LogsTimeRelativeCondition'
        override:
          $ref: '#/components/schemas/AlertDefOverride'
      description: >-
        LogsTimeRelativeRule is a message that defines a rule for log-based
        time-relative alerts
      externalDocs:
        url: ''
    LogsTimeRelativeThresholdType:
      title: Log-based time-relative threshold alert type
      required:
        - rules
      type: object
      properties:
        evaluationDelayMs:
          type: integer
          description: The delay in milliseconds before evaluating the alert condition
          format: int32
          example: 60000
        ignoreInfinity:
          type: boolean
          description: Ignore infinity values in the alert
          example: true
        logsFilter:
          $ref: '#/components/schemas/v3.LogsFilter'
        notificationPayloadFilter:
          type: array
          items:
            pattern: ^[a-zA-Z0-9_.]+$
            type: string
            example:
              - obj.field
        rules:
          type: array
          items:
            $ref: '#/components/schemas/LogsTimeRelativeRule'
        undetectedValuesManagement:
          $ref: '#/components/schemas/v3.UndetectedValuesManagement'
      description: >-
        Configuration for alerts that are triggered when a fixed ratio reaches a
        set threshold compared to a past time frame.
      externalDocs:
        description: Learn more about log-based, time-relative alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/logs/time-relative-alerts/
    LogsTimeWindow:
      title: Log-based alert time window
      type: object
      properties:
        logsTimeWindowSpecificValue:
          $ref: '#/components/schemas/LogsTimeWindowValue'
      additionalProperties: false
      description: Time window configuration for log-based alerts
      externalDocs:
        url: ''
    LogsTimeWindowValue:
      enum:
        - LOGS_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED
        - LOGS_TIME_WINDOW_VALUE_MINUTES_10
        - LOGS_TIME_WINDOW_VALUE_MINUTES_20
        - LOGS_TIME_WINDOW_VALUE_MINUTES_15
        - LOGS_TIME_WINDOW_VALUE_MINUTES_30
        - LOGS_TIME_WINDOW_VALUE_HOUR_1
        - LOGS_TIME_WINDOW_VALUE_HOURS_2
        - LOGS_TIME_WINDOW_VALUE_HOURS_4
        - LOGS_TIME_WINDOW_VALUE_HOURS_6
        - LOGS_TIME_WINDOW_VALUE_HOURS_12
        - LOGS_TIME_WINDOW_VALUE_HOURS_24
        - LOGS_TIME_WINDOW_VALUE_HOURS_36
      type: string
    LogsUniqueCountCondition:
      title: Logs unique count condition
      required:
        - maxUniqueCount
        - timeWindow
      type: object
      properties:
        maxUniqueCount:
          type: string
          description: The maximum unique count
          format: int64
          example: 100
        timeWindow:
          $ref: '#/components/schemas/LogsUniqueValueTimeWindow'
      description: Defines conditions for unique count alerts
      externalDocs:
        url: ''
    LogsUniqueCountRule:
      title: Log-based unique count rule
      required:
        - condition
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/LogsUniqueCountCondition'
      description: Defines the rule for detecting unique counts in logs
      externalDocs:
        url: ''
    LogsUniqueCountType:
      title: Log-based unique count alert type
      required:
        - rules
        - uniqueCountKeypath
      type: object
      properties:
        logsFilter:
          $ref: '#/components/schemas/v3.LogsFilter'
        maxUniqueCountPerGroupByKey:
          type: string
          description: The maximum unique count per group by key
          format: int64
          example: 100
        notificationPayloadFilter:
          type: array
          items:
            pattern: ^[a-zA-Z0-9_.]+$
            type: string
            description: >-
              The filter to specify which fields to include in the notification
              payload
            example:
              - obj.field
        rules:
          type: array
          items:
            $ref: '#/components/schemas/LogsUniqueCountRule'
        uniqueCountKeypath:
          type: string
          description: The keypath in the logs to be used for unique count
          example: obj.field
      description: Configuration for alerts based on unique value counts in logs
      externalDocs:
        description: Learn more about log-based, unique count alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/logs/unique-count-alerts/
    LogsUniqueValueTimeWindow:
      title: Log-based unique value alert time window
      type: object
      properties:
        logsUniqueValueTimeWindowSpecificValue:
          $ref: '#/components/schemas/LogsUniqueValueTimeWindowValue'
      additionalProperties: false
      description: Time window configuration for log-based unique value alerts
      externalDocs:
        url: ''
    LogsUniqueValueTimeWindowValue:
      enum:
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTE_1_OR_UNSPECIFIED
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_5
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_10
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_15
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_20
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_MINUTES_30
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_1
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_2
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_4
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_6
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_12
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_24
        - LOGS_UNIQUE_VALUE_TIME_WINDOW_VALUE_HOURS_36
      type: string
    LuceneQuery:
      type: object
      properties:
        value:
          type: string
    LuceneQueryValue:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/StringValueLabel'
    MSTeamsWorkflowConfig:
      title: Microsoft Teams workflow configuration
      type: object
      externalDocs:
        url: ''
    Managed:
      title: Managed
      required:
        - variant
      type: object
      properties:
        variant:
          $ref: '#/components/schemas/Variant'
      description: This data structure represents a managed integration.
      externalDocs:
        url: ''
    ManagedService:
      title: Managed service
      type: object
      description: This data structure represents a managed service.
      externalDocs:
        url: ''
    ManualSource:
      type: object
      properties:
        messageTemplate:
          type: string
        orientation:
          $ref: '#/components/schemas/AnnotationOrientation'
        strategy:
          $ref: '#/components/schemas/ManualSource.Strategy'
    ManualSource.Strategy:
      oneOf:
        - type: object
          properties:
            instant:
              $ref: '#/components/schemas/ManualSource.Strategy.Instant'
          additionalProperties: false
        - type: object
          properties:
            range:
              $ref: '#/components/schemas/ManualSource.Strategy.Range'
          additionalProperties: false
    ManualSource.Strategy.Instant:
      type: object
      properties:
        customUnit:
          type: string
        unit:
          $ref: '#/components/schemas/common.Unit'
        value:
          type: number
          format: double
    ManualSource.Strategy.Range:
      type: object
      properties:
        customUnit:
          type: string
        endValue:
          type: number
          format: double
        startValue:
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/common.Unit'
    Markdown:
      type: object
      properties:
        markdownText:
          type: string
          description: Markdown text
          example:
            value: '# This is a markdown example'
        tooltipText:
          type: string
          description: Tooltip text to display on widget hover
          example:
            value: This is a description in a tooltip
    MatchEntityTypeAndSubTypeCondition:
      type: object
      properties:
        entitySubType:
          type: string
    MatchEntityTypeCondition:
      type: object
    Max:
      type: object
      properties:
        field:
          type: string
        observationField:
          $ref: '#/components/schemas/ObservationField'
    Measurement:
      type: object
      properties:
        appendableMetrics:
          type: array
          items:
            type: string
        dataSource:
          $ref: '#/components/schemas/DataSource'
        dataSourceType:
          $ref: '#/components/schemas/DataSourceType'
        description:
          type: string
        displayName:
          type: string
        groupLeft:
          type: string
        id:
          type: string
        joinOn:
          type: string
        labels:
          type: array
          items:
            type: string
            deprecated: true
        logicalGroup:
          type: string
        measurementName:
          type: string
        orderingQuery:
          type: string
          deprecated: true
        query:
          type: string
        subjectLabel:
          type: string
    MeasurementMetadata:
      type: object
      properties:
        aggregationType:
          $ref: '#/components/schemas/AggregationType'
        aggregationWindowSeconds:
          type: integer
          format: int32
        measurementName:
          type: string
        queryType:
          $ref: '#/components/schemas/QueryType'
        step:
          type: integer
          format: int32
        topkAggregation:
          $ref: '#/components/schemas/TopkAggregation'
    MeasurementQuery:
      type: object
      properties:
        aggregationType:
          $ref: '#/components/schemas/AggregationType'
        aggregationWindowSeconds:
          type: integer
          format: int32
        description:
          type: string
        displayName:
          type: string
        labelValues:
          $ref: '#/components/schemas/LabelValues'
        logicalGroup:
          type: string
        name:
          type: string
        orderingQuery:
          type: string
        query:
          type: string
        queryResults:
          type: array
          items:
            $ref: '#/components/schemas/QueryResult'
        queryType:
          $ref: '#/components/schemas/QueryType'
        step:
          type: integer
          format: int32
    MessageConfig:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/notification_center.MessageConfigField'
    MetaLabels:
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/meta_labels_protobuf.v1.MetaLabel'
    MetadataEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    MetadataField:
      enum:
        - METADATA_FIELD_UNSPECIFIED
        - METADATA_FIELD_APPLICATION_NAME
        - METADATA_FIELD_SUBSYSTEM_NAME
        - METADATA_FIELD_SERVICE_NAME
        - METADATA_FIELD_OPERATION_NAME
      type: string
    MethodType:
      enum:
        - UNKNOWN
        - GET
        - POST
        - PUT
      type: string
    Metric:
      title: Metric
      required:
        - query
      type: object
      properties:
        query:
          type: string
          example: sum(rate(http_requests_total{status="200"}[5m]))
      description: Definition of a metric used in SLOs
      externalDocs:
        url: ''
    MetricAggregation:
      type: object
      properties:
        aggregationType:
          $ref: '#/components/schemas/MetricAggregationType'
        metricField:
          $ref: '#/components/schemas/MetricAggregation.MetricField'
    MetricAggregation.MetricField:
      enum:
        - METRIC_FIELD_UNSPECIFIED
        - METRIC_FIELD_DURATION
      type: string
    MetricAggregationType:
      enum:
        - METRIC_AGGREGATION_TYPE_UNSPECIFIED
        - METRIC_AGGREGATION_TYPE_MIN
        - METRIC_AGGREGATION_TYPE_MAX
        - METRIC_AGGREGATION_TYPE_AVERAGE
        - METRIC_AGGREGATION_TYPE_SUM
        - METRIC_AGGREGATION_TYPE_PERCENTILE_99
        - METRIC_AGGREGATION_TYPE_PERCENTILE_95
        - METRIC_AGGREGATION_TYPE_PERCENTILE_50
      type: string
    MetricAnomalyCondition:
      title: Metric-based anomaly condition
      required:
        - threshold
        - minNonNullValuesPct
        - ofTheLast
        - conditionType
      type: object
      properties:
        conditionType:
          $ref: '#/components/schemas/MetricAnomalyConditionType'
        forOverPct:
          type: integer
          description: >-
            The percentage of the metric that must exceed the threshold to
            trigger the alert
          format: int64
          example: 20
        minNonNullValuesPct:
          type: integer
          description: The percentage of non-null values required to trigger the alert
          format: int64
          example: 10
        ofTheLast:
          $ref: '#/components/schemas/MetricTimeWindow'
        threshold:
          type: number
          description: The threshold value for the alert condition
          format: double
          example: 10
      externalDocs:
        url: ''
    MetricAnomalyConditionType:
      enum:
        - METRIC_ANOMALY_CONDITION_TYPE_MORE_THAN_USUAL_OR_UNSPECIFIED
        - METRIC_ANOMALY_CONDITION_TYPE_LESS_THAN_USUAL
      type: string
    MetricAnomalyRule:
      title: Metric-based anomaly rule
      required:
        - condition
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/MetricAnomalyCondition'
      description: A rule for metric-based anomaly detection alerts
      externalDocs:
        url: ''
    MetricAnomalyType:
      title: Metric-based anomaly alert type
      required:
        - metricFilter
        - rules
      type: object
      properties:
        anomalyAlertSettings:
          $ref: '#/components/schemas/AnomalyAlertSettings'
        evaluationDelayMs:
          type: integer
          description: The delay in milliseconds before evaluating the alert condition
          format: int32
          example: 60000
        metricFilter:
          $ref: '#/components/schemas/MetricFilter'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/MetricAnomalyRule'
      description: Configuration for alerts triggered by anomalous metric patterns
      externalDocs:
        description: Learn more about metric-based anomaly alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/metrics/anomaly-detection-alerts/
    MetricEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    MetricFilter:
      title: Metric filter configuration in alerts
      required:
        - promql
      type: object
      properties:
        promql:
          type: string
          description: A PromQL filter for metrics
          example: avg_over_time(metric_name[5m]) > 10
      additionalProperties: false
      externalDocs:
        url: ''
    MetricLabel:
      title: Metric Label
      required:
        - targetLabel
        - sourceField
      type: object
      properties:
        sourceField:
          type: string
          example: log_obj.string_value
        targetLabel:
          pattern: ^[\w/-]+$
          type: string
          example: alias_label_name
      description: This data structure represents a metric label
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    MetricLabelSource:
      type: object
      properties:
        label:
          type: string
        metricName:
          type: string
    MetricMissingValues:
      oneOf:
        - title: Metric Missing Values Configuration
          type: object
          properties:
            replaceWithZero:
              type: boolean
              description: If set to true, missing values will be replaced with zero
              example: true
          additionalProperties: false
          description: >-
            Configuration for handling missing values in metric threshold
            alerts.
          externalDocs:
            url: ''
        - title: Metric Missing Values Configuration
          type: object
          properties:
            minNonNullValuesPct:
              pattern: ^(100|[1-9][0-9]?)$
              type: integer
              description: >-
                If set, specifies the minimum percentage of non-null values
                required for the alert to be triggered
              format: int64
              example: 80
          additionalProperties: false
          description: >-
            Configuration for handling missing values in metric threshold
            alerts.
          externalDocs:
            url: ''
    MetricThresholdCondition:
      title: Metric Threshold Condition
      required:
        - threshold
        - forOverPct
        - ofTheLast
        - conditionType
      type: object
      properties:
        conditionType:
          $ref: '#/components/schemas/MetricThresholdConditionType'
        forOverPct:
          pattern: ^(100|[1-9]?\d)$
          type: integer
          description: >-
            The percentage of values that must exceed the threshold to trigger
            the alert
          format: int64
          example: 80
        ofTheLast:
          $ref: '#/components/schemas/MetricTimeWindow'
        threshold:
          pattern: ^\d+(\.\d+)?$
          type: number
          description: The threshold value for the alert condition
          format: double
          example: 100
      description: Defines conditions for metric threshold alerts
      externalDocs:
        url: ''
    MetricThresholdConditionType:
      enum:
        - METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
        - METRIC_THRESHOLD_CONDITION_TYPE_LESS_THAN
        - METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_EQUALS
        - METRIC_THRESHOLD_CONDITION_TYPE_LESS_THAN_OR_EQUALS
      type: string
    MetricThresholdNotification:
      type: object
      properties:
        avgValueOverThreshold:
          type: number
          format: double
        conditionType:
          $ref: '#/components/schemas/MetricThresholdConditionType'
        fromTimestamp:
          type: string
          format: date-time
        isUndetectedValue:
          type: boolean
        maxValueOverThreshold:
          type: number
          format: double
        minValueOverThreshold:
          type: number
          format: double
        pctOverThreshold:
          type: number
          format: double
        toTimestamp:
          type: string
          format: date-time
    MetricThresholdRule:
      title: Metric Threshold Rule
      required:
        - condition
        - override
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/MetricThresholdCondition'
        override:
          $ref: '#/components/schemas/AlertDefOverride'
      description: Defines a rule for metric-based threshold alerts
      externalDocs:
        url: ''
    MetricThresholdType:
      title: Metric-based threshold alert type
      required:
        - metricFilter
        - rules
        - missingValues
      type: object
      properties:
        evaluationDelayMs:
          type: integer
          description: The delay in milliseconds before evaluating the alert condition
          format: int32
          example: 60000
        metricFilter:
          $ref: '#/components/schemas/MetricFilter'
        missingValues:
          $ref: '#/components/schemas/MetricMissingValues'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/MetricThresholdRule'
        undetectedValuesManagement:
          $ref: '#/components/schemas/v3.UndetectedValuesManagement'
      description: Configuration for alerts based on metric threshold violations
      externalDocs:
        description: Learn more about metric-based threshold alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/metrics/threshold-alerts/
    MetricTimeWindow:
      oneOf:
        - title: Metric time window
          type: object
          properties:
            metricTimeWindowSpecificValue:
              $ref: '#/components/schemas/MetricTimeWindowValue'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Metric time window
          type: object
          properties:
            metricTimeWindowDynamicDuration:
              type: string
              description: The time window as a dynamic value
              example: 1h30m
          additionalProperties: false
          externalDocs:
            url: ''
    MetricTimeWindowValue:
      enum:
        - METRIC_TIME_WINDOW_VALUE_MINUTES_1_OR_UNSPECIFIED
        - METRIC_TIME_WINDOW_VALUE_MINUTES_5
        - METRIC_TIME_WINDOW_VALUE_MINUTES_10
        - METRIC_TIME_WINDOW_VALUE_MINUTES_15
        - METRIC_TIME_WINDOW_VALUE_MINUTES_20
        - METRIC_TIME_WINDOW_VALUE_MINUTES_30
        - METRIC_TIME_WINDOW_VALUE_HOUR_1
        - METRIC_TIME_WINDOW_VALUE_HOURS_2
        - METRIC_TIME_WINDOW_VALUE_HOURS_4
        - METRIC_TIME_WINDOW_VALUE_HOURS_6
        - METRIC_TIME_WINDOW_VALUE_HOURS_12
        - METRIC_TIME_WINDOW_VALUE_HOURS_24
        - METRIC_TIME_WINDOW_VALUE_HOURS_36
      type: string
    Metrics:
      title: MetricsQuery
      type: object
      properties:
        editorMode:
          $ref: '#/components/schemas/MetricsQueryEditorMode'
        promqlQuery:
          $ref: '#/components/schemas/PromQlQuery'
        promqlQueryType:
          $ref: '#/components/schemas/PromQLQueryType'
        seriesLimitType:
          $ref: '#/components/schemas/MetricsSeriesLimitType'
      description: A metrics variant of the query
      externalDocs:
        url: ''
    MetricsFilter:
      title: MetricsFilter
      type: object
      properties:
        label:
          type: string
          description: The label associated with the metric.
        metric:
          type: string
          description: The name of the metric to which the filter is applied.
        operator:
          $ref: '#/components/schemas/Filter.Operator'
      description: This data structure represents the filter criteria for metrics.
      externalDocs:
        url: ''
    MetricsQueryEditorMode:
      enum:
        - METRICS_QUERY_EDITOR_MODE_UNSPECIFIED
        - METRICS_QUERY_EDITOR_MODE_TEXT
        - METRICS_QUERY_EDITOR_MODE_BUILDER
      type: string
    MetricsSeriesLimitType:
      enum:
        - METRICS_SERIES_LIMIT_TYPE_UNSPECIFIED
        - METRICS_SERIES_LIMIT_TYPE_BY_SERIES_COUNT
        - METRICS_SERIES_LIMIT_TYPE_BY_POINT_COUNT
      type: string
    MetricsSource:
      type: object
      properties:
        labels:
          type: array
          items:
            type: string
        messageTemplate:
          type: string
        orientation:
          $ref: '#/components/schemas/AnnotationOrientation'
        promqlQuery:
          $ref: '#/components/schemas/PromQlQuery'
        strategy:
          $ref: '#/components/schemas/MetricsSource.Strategy'
    MetricsSource.Strategy:
      type: object
      properties:
        startTimeMetric:
          $ref: '#/components/schemas/StartTimeMetric'
      additionalProperties: false
    MicrosoftTeamsConfig:
      title: Microsoft Teams configuration
      type: object
      externalDocs:
        url: ''
    MigrateTenantRequest:
      type: object
      properties:
        tenantId:
          type: integer
          format: int64
    Min:
      type: object
      properties:
        field:
          type: string
        observationField:
          $ref: '#/components/schemas/ObservationField'
    MissingDataStrategy:
      enum:
        - MISSING_DATA_STRATEGY_UNCOUNTED
        - MISSING_DATA_STRATEGY_GOOD
        - MISSING_DATA_STRATEGY_BAD
      type: string
    Monthly:
      type: object
      properties:
        daysOfMonth:
          type: array
          items:
            type: integer
            format: int32
    MoreThanConditionOperator:
      type: object
    MoreThanOrEqualsConditionOperator:
      type: object
    MoveQuotaRequest:
      type: object
      properties:
        destinationTeam:
          $ref: '#/components/schemas/v2.TeamId'
        sourceTeam:
          $ref: '#/components/schemas/v2.TeamId'
        unitsToMove:
          type: number
          format: double
    MoveQuotaResponse:
      type: object
      properties:
        destinationTeamQuota:
          type: number
          format: double
        sourceTeamQuota:
          type: number
          format: double
    MultiGroup:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldGroup'
        values:
          type: array
          items:
            type: number
            format: double
    MultiSelect:
      type: object
      properties:
        selected:
          type: array
          items:
            type: string
            deprecated: true
        selection:
          $ref: '#/components/schemas/MultiSelect.Selection'
        selectionOptions:
          $ref: '#/components/schemas/VariableSelectionOptions'
        source:
          $ref: '#/components/schemas/MultiSelect.Source'
        valuesOrderDirection:
          $ref: '#/components/schemas/OrderDirection'
    MultiSelect.Query:
      oneOf:
        - type: object
          properties:
            logsQuery:
              $ref: '#/components/schemas/Query.LogsQuery'
          additionalProperties: false
        - type: object
          properties:
            metricsQuery:
              $ref: '#/components/schemas/Query.MetricsQuery'
          additionalProperties: false
        - type: object
          properties:
            spansQuery:
              $ref: '#/components/schemas/Query.SpansQuery'
          additionalProperties: false
    MultiSelect.QuerySource:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/MultiSelect.Query'
        refreshStrategy:
          $ref: '#/components/schemas/MultiSelect.RefreshStrategy'
        valueDisplayOptions:
          $ref: '#/components/schemas/MultiSelect.ValueDisplayOptions'
    MultiSelect.RefreshStrategy:
      enum:
        - REFRESH_STRATEGY_UNSPECIFIED
        - REFRESH_STRATEGY_ON_DASHBOARD_LOAD
        - REFRESH_STRATEGY_ON_TIME_FRAME_CHANGE
      type: string
    MultiSelect.Selection:
      oneOf:
        - type: object
          properties:
            all:
              $ref: '#/components/schemas/MultiSelect.Selection.AllSelection'
          additionalProperties: false
        - type: object
          properties:
            list:
              $ref: '#/components/schemas/MultiSelect.Selection.ListSelection'
          additionalProperties: false
    MultiSelect.Selection.AllSelection:
      type: object
    MultiSelect.Selection.ListSelection:
      type: object
      properties:
        labels:
          type: array
          items:
            type: string
        values:
          type: array
          items:
            type: string
    MultiSelect.Source:
      oneOf:
        - type: object
          properties:
            logsPath:
              $ref: '#/components/schemas/LogsPathSource'
          additionalProperties: false
        - type: object
          properties:
            metricLabel:
              $ref: '#/components/schemas/MetricLabelSource'
          additionalProperties: false
        - type: object
          properties:
            constantList:
              $ref: '#/components/schemas/ConstantListSource'
          additionalProperties: false
        - type: object
          properties:
            spanField:
              $ref: '#/components/schemas/SpanFieldSource'
          additionalProperties: false
        - type: object
          properties:
            query:
              $ref: '#/components/schemas/MultiSelect.QuerySource'
          additionalProperties: false
    MultiSelect.ValueDisplayOptions:
      type: object
      properties:
        labelRegex:
          type: string
        valueRegex:
          type: string
    MultiStringValue:
      oneOf:
        - type: object
          properties:
            all:
              $ref: '#/components/schemas/AllValue'
          additionalProperties: false
        - type: object
          properties:
            list:
              $ref: '#/components/schemas/ListValue'
          additionalProperties: false
    MultipleSelectionValue:
      title: Multiple selection value
      type: object
      properties:
        options:
          type: array
          items:
            type: string
      externalDocs:
        url: ''
    MultipleValues:
      type: object
      properties:
        matcher:
          $ref: '#/components/schemas/events.v3.FilterMatcher'
        values:
          type: array
          items:
            type: string
    NamedInterval:
      type: object
      properties:
        durationMs:
          type: string
          format: int64
        name:
          type: string
    NextOp:
      enum:
        - NEXT_OP_AND_OR_UNSPECIFIED
        - NEXT_OP_OR
      type: string
    NextPageToken:
      title: NextPageToken
      type: object
      properties:
        nextPageToken:
          type: string
      description: >-
        This data structure represents the information associated with an API
        key.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    NoDeployment:
      title: No deployment
      type: object
      description: >-
        This data structure represents an integration that does not require
        deployment.
      externalDocs:
        url: ''
    NoMorePages:
      title: NoMorePages
      type: object
      description: >-
        This data structure represents the information associated with an API
        key.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    NotEquals.Selection:
      title: Selection
      type: object
      properties:
        list:
          $ref: '#/components/schemas/NotEquals.Selection.ListSelection'
      additionalProperties: false
      description: This data structure defines the values for the non-equality comparison.
      externalDocs:
        url: ''
    NotEquals.Selection.ListSelection:
      title: ListSelection
      type: object
      properties:
        values:
          type: array
          items:
            type: string
            description: A list of values for the selection.
      description: >-
        This data structure represents a selection from a list of specific
        values.
      externalDocs:
        url: ''
    NotificationDestination:
      title: Notification destination configuration
      required:
        - connectorId
      type: object
      properties:
        connectorId:
          type: string
          description: The connector ID used to send notifications
          example: connector_id_example
        notifyOn:
          $ref: '#/components/schemas/NotifyOn'
        presetId:
          type: string
          description: Optional preset ID for the notification destination
          example: preset_id_example
        resolvedRouteOverrides:
          $ref: '#/components/schemas/NotificationRouting'
        triggeredRoutingOverrides:
          $ref: '#/components/schemas/NotificationRouting'
      additionalProperties: false
      description: Configuration for where and how alert notifications should be sent
      externalDocs:
        description: Learn more about alert notification destinations in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/configure-notifications/destinations/
    NotificationRouter:
      title: Notification router
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the notification router
          example: 123e4567-e89b-12d3-a456-426614174000
        notifyOn:
          $ref: '#/components/schemas/NotifyOn'
      additionalProperties: false
      description: Configuration for routing notifications
      externalDocs:
        url: ''
    NotificationRouting:
      title: Notification routing
      type: object
      properties:
        configOverrides:
          $ref: '#/components/schemas/v3.SourceOverrides'
      additionalProperties: false
      externalDocs:
        url: ''
    NotifyOn:
      enum:
        - NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED
        - NOTIFY_ON_TRIGGERED_AND_RESOLVED
      type: string
    NumericValueLabel:
      type: object
      properties:
        label:
          type: string
        value:
          type: number
          format: float
    ObjectTag:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    ObservationField:
      type: object
      properties:
        keypath:
          type: array
          items:
            type: string
        scope:
          $ref: '#/components/schemas/DatasetScope'
    ObservedDetails:
      type: object
      properties:
        fromTimestamp:
          type: string
          format: date-time
        ratio:
          type: number
          format: double
        toTimestamp:
          type: string
          format: date-time
    OneTime:
      type: object
      properties:
        timeframe:
          $ref: '#/components/schemas/Timeframe'
    OpsgenieConfig:
      title: Opsgenie configuration
      type: object
      externalDocs:
        url: ''
    OrderActionsRequest:
      type: object
      properties:
        privateActionsOrder:
          type: object
          additionalProperties:
            type: integer
            format: int64
        sharedActionsOrder:
          type: object
          additionalProperties:
            type: integer
            format: int64
    OrderActionsResponse:
      type: object
    OrderByAlertEventDirection:
      enum:
        - ORDER_BY_ALERT_EVENT_DIRECTION_UNSPECIFIED
        - ORDER_BY_ALERT_EVENT_DIRECTION_ASC
        - ORDER_BY_ALERT_EVENT_DIRECTION_DESC
      type: string
    OrderByAlertEventFields:
      enum:
        - ORDER_BY_ALERT_EVENT_FIELDS_UNSPECIFIED
        - ORDER_BY_ALERT_EVENT_FIELDS_TIMESTAMP
      type: string
    OrderByList:
      title: Order by list
      required:
        - orderBys
      type: object
      properties:
        orderBys:
          type: array
          items:
            $ref: '#/components/schemas/alerts.v3.OrderBy'
      description: List of fields to order by
      externalDocs:
        url: ''
    OrderDirection:
      enum:
        - ORDER_DIRECTION_UNSPECIFIED
        - ORDER_DIRECTION_ASC
        - ORDER_DIRECTION_DESC
      type: string
    OrderingField:
      type: object
      properties:
        field:
          type: string
          description: Field name to order by
          example:
            value: coralogix.metadata.applicationName
        orderDirection:
          $ref: '#/components/schemas/OrderDirection'
    OrgGroup:
      type: object
      properties:
        name:
          type: string
        orgGroupId:
          $ref: '#/components/schemas/OrgGroupId'
        orgId:
          $ref: '#/components/schemas/OrganizationId'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    OrgGroupId:
      type: object
      properties:
        id:
          type: string
    OrganisationId:
      type: object
      properties:
        id:
          type: string
    OrganizationId:
      type: object
      properties:
        id:
          type: string
    OriginatorType:
      enum:
        - ORIGINATOR_TYPE_UNSPECIFIED
        - ORIGINATOR_TYPE_OPERATIONAL
        - ORIGINATOR_TYPE_ADMINISTRATIVE
      type: string
    OutRule:
      type: object
      properties:
        expr:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        lastEvalDurationMs:
          type: string
          format: int64
        record:
          type: string
      additionalProperties: false
    OutRule.LabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    OutRuleGroup:
      type: object
      properties:
        id:
          type: string
        interval:
          type: integer
          format: int64
        lastEvalAt:
          type: string
          format: int64
        limit:
          type: string
          format: int64
        name:
          type: string
        rules:
          type: array
          items:
            $ref: '#/components/schemas/OutRule'
        version:
          type: integer
          format: int64
      additionalProperties: false
    OutRuleGroupSet:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/OutRuleGroup'
        id:
          type: string
        name:
          type: string
    OutboundWebhookSummary:
      title: Outbound webhook summary
      required:
        - id
        - name
        - createdAt
        - externalId
        - type
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        externalId:
          type: integer
          format: int64
        id:
          type: string
        name:
          type: string
        type:
          $ref: '#/components/schemas/WebhookType'
        updatedAt:
          type: string
          format: date-time
      externalDocs:
        url: ''
    OutgoingWebhook:
      oneOf:
        - title: Outgoing webhook
          required:
            - id
            - type
            - name
            - createdAt
            - externalId
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            externalId:
              type: integer
              format: int64
              example: 123456
            genericWebhook:
              $ref: '#/components/schemas/GenericWebhookConfig'
            id:
              type: string
              example: webhook_id
            name:
              type: string
              example: my_webhook
            type:
              $ref: '#/components/schemas/WebhookType'
            updatedAt:
              type: string
              format: date-time
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook
          required:
            - id
            - type
            - name
            - createdAt
            - externalId
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            externalId:
              type: integer
              format: int64
              example: 123456
            id:
              type: string
              example: webhook_id
            name:
              type: string
              example: my_webhook
            slack:
              $ref: '#/components/schemas/SlackConfig'
            type:
              $ref: '#/components/schemas/WebhookType'
            updatedAt:
              type: string
              format: date-time
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook
          required:
            - id
            - type
            - name
            - createdAt
            - externalId
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            externalId:
              type: integer
              format: int64
              example: 123456
            id:
              type: string
              example: webhook_id
            name:
              type: string
              example: my_webhook
            pagerDuty:
              $ref: '#/components/schemas/PagerDutyConfig'
            type:
              $ref: '#/components/schemas/WebhookType'
            updatedAt:
              type: string
              format: date-time
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook
          required:
            - id
            - type
            - name
            - createdAt
            - externalId
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            externalId:
              type: integer
              format: int64
              example: 123456
            id:
              type: string
              example: webhook_id
            name:
              type: string
              example: my_webhook
            sendLog:
              $ref: '#/components/schemas/SendLogConfig'
            type:
              $ref: '#/components/schemas/WebhookType'
            updatedAt:
              type: string
              format: date-time
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook
          required:
            - id
            - type
            - name
            - createdAt
            - externalId
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            emailGroup:
              $ref: '#/components/schemas/EmailGroupConfig'
            externalId:
              type: integer
              format: int64
              example: 123456
            id:
              type: string
              example: webhook_id
            name:
              type: string
              example: my_webhook
            type:
              $ref: '#/components/schemas/WebhookType'
            updatedAt:
              type: string
              format: date-time
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook
          required:
            - id
            - type
            - name
            - createdAt
            - externalId
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            externalId:
              type: integer
              format: int64
              example: 123456
            id:
              type: string
              example: webhook_id
            microsoftTeams:
              $ref: '#/components/schemas/MicrosoftTeamsConfig'
            name:
              type: string
              example: my_webhook
            type:
              $ref: '#/components/schemas/WebhookType'
            updatedAt:
              type: string
              format: date-time
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook
          required:
            - id
            - type
            - name
            - createdAt
            - externalId
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            externalId:
              type: integer
              format: int64
              example: 123456
            id:
              type: string
              example: webhook_id
            jira:
              $ref: '#/components/schemas/JiraConfig'
            name:
              type: string
              example: my_webhook
            type:
              $ref: '#/components/schemas/WebhookType'
            updatedAt:
              type: string
              format: date-time
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook
          required:
            - id
            - type
            - name
            - createdAt
            - externalId
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            externalId:
              type: integer
              format: int64
              example: 123456
            id:
              type: string
              example: webhook_id
            name:
              type: string
              example: my_webhook
            opsgenie:
              $ref: '#/components/schemas/OpsgenieConfig'
            type:
              $ref: '#/components/schemas/WebhookType'
            updatedAt:
              type: string
              format: date-time
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook
          required:
            - id
            - type
            - name
            - createdAt
            - externalId
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            demisto:
              $ref: '#/components/schemas/DemistoConfig'
            externalId:
              type: integer
              format: int64
              example: 123456
            id:
              type: string
              example: webhook_id
            name:
              type: string
              example: my_webhook
            type:
              $ref: '#/components/schemas/WebhookType'
            updatedAt:
              type: string
              format: date-time
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook
          required:
            - id
            - type
            - name
            - createdAt
            - externalId
          type: object
          properties:
            awsEventBridge:
              $ref: '#/components/schemas/AwsEventBridgeConfig'
            createdAt:
              type: string
              format: date-time
            externalId:
              type: integer
              format: int64
              example: 123456
            id:
              type: string
              example: webhook_id
            name:
              type: string
              example: my_webhook
            type:
              $ref: '#/components/schemas/WebhookType'
            updatedAt:
              type: string
              format: date-time
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook
          required:
            - id
            - type
            - name
            - createdAt
            - externalId
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            externalId:
              type: integer
              format: int64
              example: 123456
            ibmEventNotifications:
              $ref: '#/components/schemas/IbmEventNotificationsConfig'
            id:
              type: string
              example: webhook_id
            name:
              type: string
              example: my_webhook
            type:
              $ref: '#/components/schemas/WebhookType'
            updatedAt:
              type: string
              format: date-time
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook
          required:
            - id
            - type
            - name
            - createdAt
            - externalId
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            externalId:
              type: integer
              format: int64
              example: 123456
            id:
              type: string
              example: webhook_id
            msTeamsWorkflow:
              $ref: '#/components/schemas/MSTeamsWorkflowConfig'
            name:
              type: string
              example: my_webhook
            type:
              $ref: '#/components/schemas/WebhookType'
            updatedAt:
              type: string
              format: date-time
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
    OutgoingWebhookDetails:
      title: Outgoing webhook details
      required:
        - label
        - type
      type: object
      properties:
        label:
          type: string
          example: example_label
        type:
          $ref: '#/components/schemas/WebhookType'
      externalDocs:
        url: ''
    OutgoingWebhookExtendedSummary:
      title: Outgoing webhook extended summary
      required:
        - id
        - name
        - createdAt
        - externalId
        - type
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        externalId:
          type: integer
          format: int64
          example: 123456
        id:
          type: string
          example: webhook_id
        name:
          type: string
          example: my_webhook
        type:
          $ref: '#/components/schemas/WebhookType'
        updatedAt:
          type: string
          format: date-time
        url:
          type: string
          example: slack.webhook.com
      externalDocs:
        url: ''
    OutgoingWebhookInputData:
      oneOf:
        - title: Outgoing webhook input data
          required:
            - name
            - config
            - type
          type: object
          properties:
            genericWebhook:
              $ref: '#/components/schemas/GenericWebhookConfig'
            name:
              type: string
              example: my_webhook
            type:
              $ref: '#/components/schemas/WebhookType'
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook input data
          required:
            - name
            - config
            - type
          type: object
          properties:
            name:
              type: string
              example: my_webhook
            slack:
              $ref: '#/components/schemas/SlackConfig'
            type:
              $ref: '#/components/schemas/WebhookType'
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook input data
          required:
            - name
            - config
            - type
          type: object
          properties:
            name:
              type: string
              example: my_webhook
            pagerDuty:
              $ref: '#/components/schemas/PagerDutyConfig'
            type:
              $ref: '#/components/schemas/WebhookType'
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook input data
          required:
            - name
            - config
            - type
          type: object
          properties:
            name:
              type: string
              example: my_webhook
            sendLog:
              $ref: '#/components/schemas/SendLogConfig'
            type:
              $ref: '#/components/schemas/WebhookType'
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook input data
          required:
            - name
            - config
            - type
          type: object
          properties:
            emailGroup:
              $ref: '#/components/schemas/EmailGroupConfig'
            name:
              type: string
              example: my_webhook
            type:
              $ref: '#/components/schemas/WebhookType'
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook input data
          required:
            - name
            - config
            - type
          type: object
          properties:
            microsoftTeams:
              $ref: '#/components/schemas/MicrosoftTeamsConfig'
            name:
              type: string
              example: my_webhook
            type:
              $ref: '#/components/schemas/WebhookType'
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook input data
          required:
            - name
            - config
            - type
          type: object
          properties:
            jira:
              $ref: '#/components/schemas/JiraConfig'
            name:
              type: string
              example: my_webhook
            type:
              $ref: '#/components/schemas/WebhookType'
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook input data
          required:
            - name
            - config
            - type
          type: object
          properties:
            name:
              type: string
              example: my_webhook
            opsgenie:
              $ref: '#/components/schemas/OpsgenieConfig'
            type:
              $ref: '#/components/schemas/WebhookType'
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook input data
          required:
            - name
            - config
            - type
          type: object
          properties:
            demisto:
              $ref: '#/components/schemas/DemistoConfig'
            name:
              type: string
              example: my_webhook
            type:
              $ref: '#/components/schemas/WebhookType'
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook input data
          required:
            - name
            - config
            - type
          type: object
          properties:
            awsEventBridge:
              $ref: '#/components/schemas/AwsEventBridgeConfig'
            name:
              type: string
              example: my_webhook
            type:
              $ref: '#/components/schemas/WebhookType'
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook input data
          required:
            - name
            - config
            - type
          type: object
          properties:
            ibmEventNotifications:
              $ref: '#/components/schemas/IbmEventNotificationsConfig'
            name:
              type: string
              example: my_webhook
            type:
              $ref: '#/components/schemas/WebhookType'
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Outgoing webhook input data
          required:
            - name
            - config
            - type
          type: object
          properties:
            msTeamsWorkflow:
              $ref: '#/components/schemas/MSTeamsWorkflowConfig'
            name:
              type: string
              example: my_webhook
            type:
              $ref: '#/components/schemas/WebhookType'
            url:
              type: string
              example: slack.webhook.com
          additionalProperties: false
          externalDocs:
            url: ''
    OutgoingWebhookSummary:
      title: Outgoing webhook summary
      required:
        - id
        - name
        - createdAt
        - externalId
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        externalId:
          type: integer
          format: int64
          example: 123456
        id:
          type: string
          example: webhook_id
        name:
          type: string
          example: my_webhook
        updatedAt:
          type: string
          format: date-time
        url:
          type: string
          example: slack.webhook.com
      externalDocs:
        url: ''
    OutgoingWebhookType:
      title: Outgoing webhook type
      required:
        - label
        - count
        - type
      type: object
      properties:
        count:
          type: integer
          format: int64
          example: 3
        label:
          type: string
          example: example_label
        type:
          $ref: '#/components/schemas/WebhookType'
      externalDocs:
        url: ''
    Owner:
      oneOf:
        - type: object
          properties:
            userId:
              type: string
          additionalProperties: false
        - type: object
          properties:
            teamId:
              type: integer
              format: int64
          additionalProperties: false
        - type: object
          properties:
            organisationId:
              type: string
          additionalProperties: false
    PagerDutyConfig:
      title: PagerDuty configuration
      required:
        - serviceKey
      type: object
      properties:
        serviceKey:
          type: string
          example: pager_duty_service_key
      externalDocs:
        url: ''
    Pagination:
      type: object
      properties:
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
    PaginationData:
      type: object
      properties:
        orderBy:
          $ref: '#/components/schemas/SortOrder'
        orderByMeasurement:
          type: string
        pageIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
    Parameter:
      oneOf:
        - title: Parameter
          type: object
          properties:
            key:
              type: string
            stringValue:
              type: string
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Parameter
          type: object
          properties:
            booleanValue:
              type: boolean
            key:
              type: string
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Parameter
          type: object
          properties:
            key:
              type: string
            stringList:
              $ref: '#/components/schemas/StringList'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Parameter
          type: object
          properties:
            apiKey:
              $ref: '#/components/schemas/ApiKeyData'
            key:
              type: string
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Parameter
          type: object
          properties:
            key:
              type: string
            numericValue:
              type: number
              format: double
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Parameter
          type: object
          properties:
            key:
              type: string
            sensitiveData:
              $ref: '#/components/schemas/SensitiveDataPlaceholder'
          additionalProperties: false
          externalDocs:
            url: ''
    ParametersEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    ParseParameters:
      type: object
      properties:
        destinationField:
          type: string
        rule:
          type: string
    PartitioningScheme:
      enum:
        - PARTITIONING_SCHEME_UNSPECIFIED
        - PARTITIONING_SCHEME_DT_HR
        - PARTITIONING_SCHEME_NONE
      type: string
    Percentile:
      type: object
      properties:
        field:
          type: string
        observationField:
          $ref: '#/components/schemas/ObservationField'
        percent:
          type: number
          format: double
    Permission:
      enum:
        - PERMISSION_UNSPECIFIED
        - PERMISSION_ALERTS_MAP_READ
        - PERMISSION_ALERTS_READ_CONFIG
        - PERMISSION_ALERTS_UPDATE_CONFIG
        - PERMISSION_CLOUD_METADATA_ENRICHMENT_READ_CONFIG
        - PERMISSION_CLOUD_METADATA_ENRICHMENT_UPDATE_CONFIG
        - PERMISSION_CLOUD_METADATA_INGRESS_SEND_DATA
        - PERMISSION_CLOUD_SECURITY_DEPLOY
        - PERMISSION_CLOUD_SECURITY_READ_CONFIG
        - PERMISSION_CONTEXTUAL_DATA_READ_CONFIG
        - PERMISSION_CONTEXTUAL_DATA_UPDATE_CONFIG
        - PERMISSION_DATA_MAP_READ_MAPS
        - PERMISSION_DATA_MAP_UPDATE_MAPS
        - PERMISSION_DATA_USAGE_MANAGE
        - PERMISSION_DATA_USAGE_READ
        - PERMISSION_EXTENSIONS_DEPLOY
        - PERMISSION_EXTENSIONS_READ_CONFIG
        - PERMISSION_GEO_ENRICHMENT_READ_CONFIG
        - PERMISSION_GEO_ENRICHMENT_UPDATE_CONFIG
        - PERMISSION_GLOBAL_MAPPING_READ_CONFIG
        - PERMISSION_GLOBAL_MAPPING_UPDATE_CONFIG
        - PERMISSION_GRAFANA_READ
        - PERMISSION_GRAFANA_UPDATE
        - PERMISSION_HOME_DASHBOARD_READ_TEAM_WIDGETS
        - PERMISSION_HOME_DASHBOARD_READ_USER_WIDGETS
        - PERMISSION_HOME_DASHBOARD_UPDATE_TEAM_WIDGETS
        - PERMISSION_HOME_DASHBOARD_UPDATE_USER_WIDGETS
        - PERMISSION_INCIDENTS_ACKNOWLEDGE
        - PERMISSION_INCIDENTS_ASSIGN
        - PERMISSION_INCIDENTS_CLOSE
        - PERMISSION_INCIDENTS_READ
        - PERMISSION_INCIDENTS_SNOOZE
        - PERMISSION_INTEGRATIONS_DEPLOY
        - PERMISSION_INTEGRATIONS_READ_CONFIG
        - PERMISSION_JAEGER_VIEW
        - PERMISSION_K_8_S_INFRA_MONITORING_READ_CONFIG
        - PERMISSION_K_8_S_INFRA_MONITORING_UPDATE_CONFIG
        - PERMISSION_LEGACY_ARCHIVE_QUERIES_EXECUTE
        - PERMISSION_LEGACY_ARCHIVE_QUERIES_REINDEX
        - PERMISSION_LOGS_DATA_ANALYTICS_HIGH_READ
        - PERMISSION_LOGS_DATA_ANALYTICS_LOW_READ
        - PERMISSION_LOGS_DATA_API_HIGH_READ_DATA
        - PERMISSION_LOGS_DATA_API_LOW_READ_DATA
        - PERMISSION_LOGS_DATA_INGRESS_SEND_DATA
        - PERMISSION_LOGS_DATA_SETUP_HIGH_READ_CONFIG
        - PERMISSION_LOGS_DATA_SETUP_HIGH_UPDATE_CONFIG
        - PERMISSION_LOGS_DATA_SETUP_LOW_READ_CONFIG
        - PERMISSION_LOGS_DATA_SETUP_LOW_UPDATE_CONFIG
        - PERMISSION_LOGS_EVENTS_2_METRICS_READ_CONFIG
        - PERMISSION_LOGS_EVENTS_2_METRICS_UPDATE_CONFIG
        - PERMISSION_LOGS_TCO_READ_POLICIES
        - PERMISSION_LOGS_TCO_UPDATE_POLICIES
        - PERMISSION_METRICS_DATA_ANALYTICS_HIGH_READ
        - PERMISSION_METRICS_DATA_ANALYTICS_LOW_READ
        - PERMISSION_METRICS_DATA_API_HIGH_READ_DATA
        - PERMISSION_METRICS_DATA_API_LOW_READ_DATA
        - PERMISSION_METRICS_DATA_INGRESS_SEND_DATA
        - PERMISSION_METRICS_DATA_SETUP_HIGH_READ_CONFIG
        - PERMISSION_METRICS_DATA_SETUP_HIGH_UPDATE_CONFIG
        - PERMISSION_METRICS_DATA_SETUP_LOW_READ_CONFIG
        - PERMISSION_METRICS_DATA_SETUP_LOW_UPDATE_CONFIG
        - PERMISSION_METRICS_RECORDING_RULES_READ_CONFIG
        - PERMISSION_METRICS_RECORDING_RULES_UPDATE_CONFIG
        - PERMISSION_METRICS_TCO_READ_POLICIES
        - PERMISSION_METRICS_TCO_UPDATE_POLICIES
        - PERMISSION_OPENSEARCH_DASHBOARDS_READ
        - PERMISSION_OPENSEARCH_DASHBOARDS_UPDATE
        - PERMISSION_ORG_ADMINS_MANAGE
        - PERMISSION_ORG_ADMINS_READ_CONFIG
        - PERMISSION_ORG_QUOTA_MANAGE
        - PERMISSION_ORG_QUOTA_READ
        - PERMISSION_ORG_SETTINGS_READ_CONFIG
        - PERMISSION_ORG_SETTINGS_UPDATE_CONFIG
        - PERMISSION_ORG_TEAMS_MANAGE
        - PERMISSION_ORG_TEAMS_READ_CONFIG
        - PERMISSION_OUTBOUND_WEBHOOKS_READ_CONFIG
        - PERMISSION_OUTBOUND_WEBHOOKS_UPDATE_CONFIG
        - PERMISSION_PARSING_RULES_READ_CONFIG
        - PERMISSION_PARSING_RULES_UPDATE_CONFIG
        - PERMISSION_RUM_INGRESS_SEND_DATA
        - PERMISSION_RUM_VIEW
        - PERMISSION_SECURITY_ENRICHMENT_READ_CONFIG
        - PERMISSION_SECURITY_ENRICHMENT_UPDATE_CONFIG
        - PERMISSION_SERVERLESS_READ
        - PERMISSION_SERVICE_CATALOG_READ_DIMENSIONS_CONFIG
        - PERMISSION_SERVICE_CATALOG_READ_SLI_CONFIG
        - PERMISSION_SERVICE_CATALOG_UPDATE_DIMENSIONS_CONFIG
        - PERMISSION_SERVICE_CATALOG_UPDATE_SLI_CONFIG
        - PERMISSION_SERVICE_MAP_READ
        - PERMISSION_SNOWBIT_ALERTS_CREATE_SECURITY_ALERT
        - PERMISSION_SNOWBIT_ALERTS_READ
        - PERMISSION_SNOWBIT_CSPM_READ
        - PERMISSION_SNOWBIT_OVERVIEW_READ
        - PERMISSION_SNOWBIT_RESOURCE_EXPLORER_READ
        - PERMISSION_SNOWBIT_SETUP_MANAGE
        - PERMISSION_SNOWBIT_SSPM_READ
        - PERMISSION_SOURCE_MAPPING_READ_MAPPING
        - PERMISSION_SOURCE_MAPPING_UPLOAD_MAPPING
        - PERMISSION_SPANS_DATA_ANALYTICS_HIGH_READ
        - PERMISSION_SPANS_DATA_ANALYTICS_LOW_READ
        - PERMISSION_SPANS_DATA_API_HIGH_READ_DATA
        - PERMISSION_SPANS_DATA_API_LOW_READ_DATA
        - PERMISSION_SPANS_DATA_INGRESS_SEND_DATA
        - PERMISSION_SPANS_DATA_SETUP_HIGH_READ_CONFIG
        - PERMISSION_SPANS_DATA_SETUP_HIGH_UPDATE_CONFIG
        - PERMISSION_SPANS_DATA_SETUP_LOW_READ_CONFIG
        - PERMISSION_SPANS_DATA_SETUP_LOW_UPDATE_CONFIG
        - PERMISSION_SPANS_EVENTS_2_METRICS_READ_CONFIG
        - PERMISSION_SPANS_EVENTS_2_METRICS_UPDATE_CONFIG
        - PERMISSION_SPANS_TCO_READ_POLICIES
        - PERMISSION_SPANS_TCO_UPDATE_POLICIES
        - PERMISSION_TEAM_ACTIONS_EXECUTE
        - PERMISSION_TEAM_ACTIONS_READ_CONFIG
        - PERMISSION_TEAM_ACTIONS_UPDATE_CONFIG
        - PERMISSION_TEAM_API_KEYS_SECURITY_SETTINGS_MANAGE
        - PERMISSION_TEAM_API_KEYS_SECURITY_SETTINGS_READ_CONFIG
        - PERMISSION_TEAM_API_KEYS_MANAGE
        - PERMISSION_TEAM_API_KEYS_READ_CONFIG
        - PERMISSION_TEAM_AUDITING_READ_CONFIG
        - PERMISSION_TEAM_AUDITING_UPDATE_CONFIG
        - PERMISSION_TEAM_CUSTOM_ENRICHMENT_READ_CONFIG
        - PERMISSION_TEAM_CUSTOM_ENRICHMENT_READ_DATA
        - PERMISSION_TEAM_CUSTOM_ENRICHMENT_UPDATE_CONFIG
        - PERMISSION_TEAM_CUSTOM_ENRICHMENT_UPDATE_DATA
        - PERMISSION_TEAM_DASHBOARDS_READ
        - PERMISSION_TEAM_DASHBOARDS_UPDATE
        - PERMISSION_TEAM_DOMAIN_MANAGE
        - PERMISSION_TEAM_DOMAIN_READ_CONFIG
        - PERMISSION_TEAM_GROUPS_MANAGE
        - PERMISSION_TEAM_GROUPS_READ_CONFIG
        - PERMISSION_TEAM_IP_ACCESS_MANAGE
        - PERMISSION_TEAM_IP_ACCESS_READ_CONFIG
        - PERMISSION_TEAM_MEMBERS_MANAGE
        - PERMISSION_TEAM_MEMBERS_READ_CONFIG
        - PERMISSION_TEAM_PAY_AS_YOU_GO_READ_CONFIG
        - PERMISSION_TEAM_PAY_AS_YOU_GO_UPDATE_CONFIG
        - PERMISSION_TEAM_PAYMENTS_READ_CONFIG
        - PERMISSION_TEAM_PAYMENTS_UPDATE_CONFIG
        - PERMISSION_TEAM_ROLES_MANAGE
        - PERMISSION_TEAM_ROLES_READ_CONFIG
        - PERMISSION_TEAM_SAVED_VIEWS_READ
        - PERMISSION_TEAM_SAVED_VIEWS_UPDATE
        - PERMISSION_TEAM_SCIM_MANAGE
        - PERMISSION_TEAM_SCIM_READ_CONFIG
        - PERMISSION_TEAM_SESSIONS_MANAGE
        - PERMISSION_TEAM_SESSIONS_READ_CONFIG
        - PERMISSION_TEAM_SLACK_NOTIFICATIONS_READ_CONFIG
        - PERMISSION_TEAM_SLACK_NOTIFICATIONS_UPDATE_CONFIG
        - PERMISSION_TEAM_SSO_MANAGE
        - PERMISSION_TEAM_SSO_READ_CONFIG
        - PERMISSION_USER_ACTIONS_EXECUTE
        - PERMISSION_USER_ACTIONS_READ_CONFIG
        - PERMISSION_USER_ACTIONS_UPDATE_CONFIG
        - PERMISSION_USER_DASHBOARDS_READ
        - PERMISSION_USER_DASHBOARDS_UPDATE
        - PERMISSION_USER_EMAIL_NOTIFICATIONS_READ_CONFIG
        - PERMISSION_USER_EMAIL_NOTIFICATIONS_UPDATE_CONFIG
        - PERMISSION_USER_LEGACY_LOGS_QUERY_API_KEYS_MANAGE
        - PERMISSION_USER_LEGACY_LOGS_QUERY_API_KEYS_READ_CONFIG
        - PERMISSION_USER_LEGACY_OTHER_API_KEYS_MANAGE
        - PERMISSION_USER_LEGACY_OTHER_API_KEYS_READ_CONFIG
        - PERMISSION_USER_SAVED_VIEWS_READ
        - PERMISSION_USER_SAVED_VIEWS_UPDATE
        - PERMISSION_USER_SETTINGS_READ_CONFIG
        - PERMISSION_USER_SETTINGS_UPDATE_CONFIG
        - PERMISSION_VERSION_BENCHMARK_TAGS_READ
        - PERMISSION_VERSION_BENCHMARKS_REPORTS_READ_TEAM_WIDGETS
        - PERMISSION_VERSION_BENCHMARKS_REPORTS_READ_USER_WIDGETS
        - PERMISSION_VERSION_BENCHMARKS_REPORTS_UPDATE_TEAM_WIDGETS
        - PERMISSION_VERSION_BENCHMARKS_REPORTS_UPDATE_USER_WIDGETS
        - PERMISSION_VERSION_BENCHMARKS_REPORTS_READ
        - PERMISSION_LOGS_ALERTS_READ_CONFIG
        - PERMISSION_LOGS_ALERTS_UPDATE_CONFIG
        - PERMISSION_SPANS_ALERTS_READ_CONFIG
        - PERMISSION_SPANS_ALERTS_UPDATE_CONFIG
        - PERMISSION_METRICS_ALERTS_READ_CONFIG
        - PERMISSION_METRICS_ALERTS_UPDATE_CONFIG
        - PERMISSION_CONTEXTUAL_DATA_SEND_DATA
        - PERMISSION_K_8_S_INFRA_MONITORING_READ
        - PERMISSION_LIVETAIL_READ
        - PERMISSION_SERVICE_CATALOG_READ
        - PERMISSION_VERSION_BENCHMARK_TAGS_UPDATE
        - PERMISSION_ALERTS_SNOOZE
        - PERMISSION_EXTENSIONS_UPDATE_CONFIG
        - PERMISSION_SERVICE_CATALOG_READ_APDEX_CONFIG
        - PERMISSION_SERVICE_CATALOG_UPDATE_APDEX_CONFIG
        - PERMISSION_TEAM_MANAGE_CONNECTION_TO_ORG
        - PERMISSION_SERVICE_CATALOG_UPDATE
        - PERMISSION_SUPPRESSION_RULES_READ_CONFIG
        - PERMISSION_SUPPRESSION_RULES_UPDATE_CONFIG
        - PERMISSION_USER_AUTH_INFO_READ_GROUPS
        - PERMISSION_USER_EMAIL_NOTIFICATIONS_GET_DAILY_EMAILS
        - PERMISSION_USER_EMAIL_NOTIFICATIONS_GET_DATA_USAGE_WARNINGS
        - PERMISSION_USER_EMAIL_NOTIFICATIONS_GET_FLOW_ANOMALIES
        - PERMISSION_USER_EMAIL_NOTIFICATIONS_GET_SPIKE_ANOMALIES
        - PERMISSION_TEAM_QUOTA_MANAGE
        - PERMISSION_TEAM_QUOTA_READ
        - PERMISSION_TEAM_SCOPES_MANAGE
        - PERMISSION_TEAM_SCOPES_READ_CONFIG
        - PERMISSION_RUM_TEAM_SAVED_FILTER_READ
        - PERMISSION_RUM_TEAM_SAVED_FILTER_UPDATE
        - PERMISSION_RUM_USER_SAVED_FILTER_READ
        - PERMISSION_RUM_USER_SAVED_FILTER_UPDATE
        - PERMISSION_INVESTIGATIONS_READ
        - PERMISSION_INVESTIGATIONS_READ_ALL
        - PERMISSION_INVESTIGATIONS_UPDATE
        - PERMISSION_INVESTIGATIONS_UPDATE_ALL
        - PERMISSION_DATA_INGEST_API_KEYS_MANAGE
        - PERMISSION_DATA_INGEST_API_KEYS_READ_CONFIG
        - PERMISSION_PERSONAL_CUSTOM_API_KEYS_MANAGE
        - PERMISSION_PERSONAL_CUSTOM_API_KEYS_READ_CONFIG
        - PERMISSION_TEAM_CUSTOM_API_KEYS_MANAGE
        - PERMISSION_TEAM_CUSTOM_API_KEYS_READ_CONFIG
        - PERMISSION_LOGS_DATA_OUT_SETUP_READ_CONFIG
        - PERMISSION_LOGS_DATA_OUT_SETUP_UPDATE_CONFIG
        - PERMISSION_OUTBOUND_WEBHOOKS_READ_SUMMARY
        - PERMISSION_DATAPRIME_AI_QUERY_ASSISTANT_MANAGE
        - PERMISSION_DATAPRIME_AI_QUERY_ASSISTANT_READ_CONFIG
        - PERMISSION_TEAM_LANDING_PAGE_MANAGE
        - PERMISSION_TEAM_LANDING_PAGE_READ_CONFIG
        - PERMISSION_RESOURCE_CATALOG_READ
        - PERMISSION_TEAM_ALERTS_SETTINGS_MANAGE
        - PERMISSION_TEAM_ALERTS_SETTINGS_READ_CONFIG
        - PERMISSION_TEAM_AI_SETTINGS_MANAGE
        - PERMISSION_TEAM_AI_SETTINGS_READ_CONFIG
        - PERMISSION_NOTIFICATION_CENTER_CONNECTORS_READ_CONFIG
        - PERMISSION_NOTIFICATION_CENTER_CONNECTORS_READ_SUMMARY
        - PERMISSION_NOTIFICATION_CENTER_CONNECTORS_UPDATE_CONFIG
        - PERMISSION_NOTIFICATION_CENTER_PRESETS_READ_CONFIG
        - PERMISSION_NOTIFICATION_CENTER_PRESETS_READ_SUMMARY
        - PERMISSION_NOTIFICATION_CENTER_PRESETS_UPDATE_CONFIG
        - PERMISSION_HIDE_ERRORS_READ_CONFIG
        - PERMISSION_HIDE_ERRORS_UPDATE_CONFIG
        - PERMISSION_RUM_SETTINGS_UPDATE_CONFIG
        - PERMISSION_SESSION_RECORDING_READ_CONFIG
        - PERMISSION_NOTIFICATION_CENTER_ROUTERS_READ_CONFIG
        - PERMISSION_NOTIFICATION_CENTER_ROUTERS_READ_SUMMARY
        - PERMISSION_NOTIFICATION_CENTER_ROUTERS_UPDATE_CONFIG
        - PERMISSION_PROFILES_DATA_INGRESS_SEND_DATA_OLD
        - PERMISSION_AI_APP_CATALOG_READ
        - PERMISSION_AI_APP_DISCOVERY_MANAGE
        - PERMISSION_AI_APP_DISCOVERY_READ
        - PERMISSION_AI_APP_EVALUATORS_MANAGE
        - PERMISSION_AI_APP_EVALUATORS_READ
        - PERMISSION_AI_OVERVIEW_READ
        - PERMISSION_AI_SPM_READ
        - PERMISSION_LOGS_RESERVED_FIELDS_MANAGE
        - PERMISSION_LOGS_RESERVED_FIELDS_READ
        - PERMISSION_PROFILES_CPU_PROFILES_READ
        - PERMISSION_PROFILES_DATA_INGRESS_SEND_DATA
        - PERMISSION_PROFILES_DEBUG_SYMBOLS_UPLOAD
        - PERMISSION_SLO_MGMT_ALERTS_READ_CONFIG
        - PERMISSION_SLO_MGMT_ALERTS_UPDATE_CONFIG
        - PERMISSION_SLO_READ_CONFIG
        - PERMISSION_SLO_UPDATE_CONFIG
        - PERMISSION_SYSTEM_DATASETS_MANAGE
        - PERMISSION_SYSTEM_DATASETS_READ_CONFIG
        - PERMISSION_TEAM_QUOTA_RULES_MANAGE
        - PERMISSION_TEAM_QUOTA_RULES_READ
        - PERMISSION_SPLIT_INDEX_MANAGE
        - PERMISSION_ACCESS_POLICIES_READ_ALL
        - PERMISSION_ACCESS_POLICIES_UPDATE_ALL
        - PERMISSION_PIPELINE_ANALYZER_READ
        - PERMISSION_TEAM_API_KEYS_READ_ACCESS_POLICY
        - PERMISSION_TEAM_API_KEYS_UPDATE_ACCESS_POLICY
        - PERMISSION_DATA_INGEST_API_KEYS_READ_ACCESS_POLICY
        - PERMISSION_DATA_INGEST_API_KEYS_UPDATE_ACCESS_POLICY
        - PERMISSION_TEAM_CUSTOM_API_KEYS_READ_ACCESS_POLICY
        - PERMISSION_TEAM_CUSTOM_API_KEYS_UPDATE_ACCESS_POLICY
        - PERMISSION_TEAM_DASHBOARDS_READ_ACCESS_POLICY
        - PERMISSION_TEAM_DASHBOARDS_UPDATE_ACCESS_POLICY
        - PERMISSION_TEAM_DATASETS_APPEND_DATA
        - PERMISSION_TEAM_DATASETS_OVERWRITE_DATA
        - PERMISSION_TEAM_DATASETS_READ_ACCESS_POLICY
        - PERMISSION_TEAM_DATASETS_READ_DATA
        - PERMISSION_TEAM_DATASETS_UPDATE_ACCESS_POLICY
        - PERMISSION_TEAM_ROLES_READ_SUMMARY
        - PERMISSION_TEAM_ROLES_READ_TEAM_MEMBERS_SUMMARY
        - PERMISSION_TEAM_SCHEMA_MANAGER_MANAGE
        - PERMISSION_TEAM_SCHEMA_MANAGER_READ_CONFIG
        - PERMISSION_CASE_CONFIG_READ
        - PERMISSION_CASE_CONFIG_UPDATE
        - PERMISSION_CASE_ACKNOWLEDGE
        - PERMISSION_CASE_ASSIGN
        - PERMISSION_CASE_CLOSE
        - PERMISSION_CASE_COMMENT
        - PERMISSION_CASE_READ
        - PERMISSION_CASE_UPDATE
      type: string
    PermissionGroup:
      enum:
        - PERMISSION_GROUP_UNSPECIFIED
        - PERMISSION_GROUP_AAA
        - PERMISSION_GROUP_ACTIONS
        - PERMISSION_GROUP_ALERTS
        - PERMISSION_GROUP_ANOMALIES
        - PERMISSION_GROUP_APM
        - PERMISSION_GROUP_APPS
        - PERMISSION_GROUP_AUDITING
        - PERMISSION_GROUP_DASHBOARDS
        - PERMISSION_GROUP_DATA_MAP
        - PERMISSION_GROUP_DATAPLANS
        - PERMISSION_GROUP_DATAPRIME
        - PERMISSION_GROUP_ENRICHMENTS
        - PERMISSION_GROUP_HOSTED_APPS
        - PERMISSION_GROUP_INCIDENTS
        - PERMISSION_GROUP_INFRASTRUCTURE_MONITORING
        - PERMISSION_GROUP_INGRESS
        - PERMISSION_GROUP_INTEGRATIONS
        - PERMISSION_GROUP_INTERNAL_TOOLS
        - PERMISSION_GROUP_LIVETAIL
        - PERMISSION_GROUP_LOGS
        - PERMISSION_GROUP_METRICS
        - PERMISSION_GROUP_NOTIFICATIONS
        - PERMISSION_GROUP_PARSING_RULES
        - PERMISSION_GROUP_PLATFORM
        - PERMISSION_GROUP_RECORDING_RULES
        - PERMISSION_GROUP_RUM
        - PERMISSION_GROUP_SCHEMA
        - PERMISSION_GROUP_SHARED_LIBRARIES
        - PERMISSION_GROUP_SNOWBIT
        - PERMISSION_GROUP_SPANS
        - PERMISSION_GROUP_TEMPLATES
        - PERMISSION_GROUP_UNKNOWN_FEATURE_GROUP
        - PERMISSION_GROUP_VERSION_BENCHMARKS
        - PERMISSION_GROUP_INVESTIGATIONS
        - PERMISSION_GROUP_ADMINISTRATION
        - PERMISSION_GROUP_PROFILES
        - PERMISSION_GROUP_AI
        - PERMISSION_GROUP_SLO_MGMT
        - PERMISSION_GROUP_QUOTA_RULES
        - PERMISSION_GROUP_DATAENGINE
        - PERMISSION_GROUP_CASE
      type: string
    PermissionGroupMetadata:
      type: object
      properties:
        description:
          type: string
        displayName:
          type: string
        name:
          type: string
        permissionGroup:
          $ref: '#/components/schemas/PermissionGroup'
    PermissionMetadata:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/v1.Action'
        description:
          type: string
        docLink:
          type: string
        explanation:
          type: string
        expression:
          type: string
        isSendData:
          type: boolean
        permission:
          $ref: '#/components/schemas/Permission'
        permissionGroup:
          $ref: '#/components/schemas/PermissionGroupMetadata'
        resource:
          $ref: '#/components/schemas/Resource'
    PermissionResource:
      enum:
        - UNKNOWN
        - ACTION
        - ALERT
        - CUSTOM_ENRICHMENT
        - GEO_ENRICHMENT
        - SECURITY_ENRICHMENT
        - RESOURCE_CLOUD_METADATA_ENRICHMENT
        - GRAFANA_DASHBOARD
        - KIBANA_DASHBOARD
        - PARSING_RULE
        - SAVED_VIEW
        - CX_CUSTOM_DASHBOARD
        - METRICS_RULE_GROUP
        - SPAN_EVENTS_TO_METRICS
        - LOGS_EVENTS_TO_METRICS
      type: string
    Permutation:
      title: Permutation data structure
      type: object
      properties:
        permutationLabels:
          type: object
          additionalProperties:
            type: string
      externalDocs:
        url: ''
    Permutation.PermutationLabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    PieChart.DataprimeQuery:
      title: DataprimeQuery
      type: object
      properties:
        dataprimeQuery:
          $ref: '#/components/schemas/common.DataprimeQuery'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter.Source'
        groupNames:
          type: array
          items:
            type: string
            description: List of field names by which results are grouped
        stackedGroupName:
          type: string
          description: Field name by which results in groups are divided into subgroups
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A Dataprime variant of the query
      externalDocs:
        url: ''
    PieChart.LogsQuery:
      title: LogsQuery
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/LogsAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter.LogsFilter'
        groupNames:
          type: array
          items:
            type: string
            description: List of field names to group the query results
        groupNamesFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
        stackedGroupName:
          type: string
          description: Field name by which results are stacked in individual group
        stackedGroupNameField:
          $ref: '#/components/schemas/ObservationField'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A logs variant of the query
      externalDocs:
        url: ''
    PieChart.MetricsQuery:
      title: MetricsQuery
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/common.Aggregation'
        editorMode:
          $ref: '#/components/schemas/MetricsQueryEditorMode'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/MetricsFilter'
        groupNames:
          type: array
          items:
            type: string
            description: List of field names by which metric results are grouped
        promqlQuery:
          $ref: '#/components/schemas/PromQlQuery'
        promqlQueryType:
          $ref: '#/components/schemas/PromQLQueryType'
        stackedGroupName:
          type: string
          description: Field name by which results in groups are divided into subgroups
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A metrics variant of the query
      externalDocs:
        url: ''
    PieChart.Query:
      oneOf:
        - type: object
          properties:
            logs:
              $ref: '#/components/schemas/PieChart.LogsQuery'
          additionalProperties: false
        - type: object
          properties:
            spans:
              $ref: '#/components/schemas/PieChart.SpansQuery'
          additionalProperties: false
        - type: object
          properties:
            metrics:
              $ref: '#/components/schemas/PieChart.MetricsQuery'
          additionalProperties: false
        - type: object
          properties:
            dataprime:
              $ref: '#/components/schemas/PieChart.DataprimeQuery'
          additionalProperties: false
    PieChart.SpansQuery:
      title: SpansQuery
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/SpansAggregation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/SpansFilter'
        groupNames:
          type: array
          items:
            $ref: '#/components/schemas/SpanField'
        groupNamesFields:
          type: array
          items:
            $ref: '#/components/schemas/SpanObservationField'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
        stackedGroupName:
          $ref: '#/components/schemas/SpanField'
        stackedGroupNameField:
          $ref: '#/components/schemas/SpanObservationField'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
      description: A spans variant of the query
      externalDocs:
        url: ''
    PieChart.StackDefinition:
      type: object
      properties:
        maxSlicesPerStack:
          type: integer
          description: How many slices can fit in a single slice stack
          format: int32
        stackNameTemplate:
          type: string
          description: Custom template name of an individual slice in the stack
          example:
            value: Slice {{ group }} - subslice {{ subgroup }}
    PinDashboardRequest:
      title: Pin dashboard request data structure
      required:
        - requestId
        - dashboardId
      type: object
      properties:
        dashboardId:
          type: string
        requestId:
          type: string
      description: This is a request used to mark certain dashboard as pinned
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    PinDashboardResponse:
      title: Pin dashboard response data structure
      type: object
      description: This is a response received on successful pinning of the dashboard
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    Placement:
      oneOf:
        - type: object
          properties:
            first:
              $ref: '#/components/schemas/First'
          additionalProperties: false
        - type: object
          properties:
            last:
              $ref: '#/components/schemas/Last'
          additionalProperties: false
    PlanType:
      enum:
        - PLAN_TYPE_UNSPECIFIED
        - PLAN_TYPE_POST_TRIAL
        - PLAN_TYPE_PLAN
        - PLAN_TYPE_TRIAL
      type: string
    Policy:
      oneOf:
        - type: object
          properties:
            applicationRule:
              $ref: '#/components/schemas/quota.v1.Rule'
            archiveRetention:
              $ref: '#/components/schemas/ArchiveRetention'
            companyId:
              type: integer
              format: int32
            createdAt:
              type: string
            deleted:
              type: boolean
            description:
              type: string
            enabled:
              type: boolean
            id:
              type: string
            logRules:
              $ref: '#/components/schemas/LogRules'
            name:
              type: string
            order:
              type: integer
              format: int32
            priority:
              $ref: '#/components/schemas/quota.v1.Priority'
            subsystemRule:
              $ref: '#/components/schemas/quota.v1.Rule'
            updatedAt:
              type: string
          additionalProperties: false
        - type: object
          properties:
            applicationRule:
              $ref: '#/components/schemas/quota.v1.Rule'
            archiveRetention:
              $ref: '#/components/schemas/ArchiveRetention'
            companyId:
              type: integer
              format: int32
            createdAt:
              type: string
            deleted:
              type: boolean
            description:
              type: string
            enabled:
              type: boolean
            id:
              type: string
            name:
              type: string
            order:
              type: integer
              format: int32
            priority:
              $ref: '#/components/schemas/quota.v1.Priority'
            spanRules:
              $ref: '#/components/schemas/SpanRules'
            subsystemRule:
              $ref: '#/components/schemas/quota.v1.Rule'
            updatedAt:
              type: string
          additionalProperties: false
    PolicyOrder:
      type: object
      properties:
        id:
          type: string
        order:
          type: integer
          format: int32
    PostInstallationStepsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    Preset:
      title: Preset
      required:
        - entityType
        - configOverrides
        - name
      type: object
      properties:
        configOverrides:
          type: array
          items:
            $ref: '#/components/schemas/ConfigOverrides'
        connectorType:
          $ref: '#/components/schemas/ConnectorType'
        createTime:
          type: string
          format: date-time
        description:
          type: string
          example: Custom preset for alerts
        entityType:
          $ref: '#/components/schemas/notification_center.EntityType'
        id:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
        name:
          type: string
          example: My Preset
        parentId:
          type: string
          example: preset_system_slack_alerts_basic
        presetType:
          $ref: '#/components/schemas/PresetType'
        updateTime:
          type: string
          format: date-time
      additionalProperties: false
      description: Set of preconfigured templates for notification content rendering
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    PresetInfo:
      title: Preset Info
      required:
        - name
        - permissions
      type: object
      properties:
        name:
          type: string
          example: my_preset
        permissions:
          type: array
          items:
            type: string
            example:
              - read_logs
      description: >-
        This data structure represents a preset set of permissions on an API
        key.
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
    PresetSummary:
      title: Preset Summary
      type: object
      properties:
        connectorType:
          $ref: '#/components/schemas/ConnectorType'
        createTime:
          type: string
          format: date-time
        description:
          maxLength: 5000
          type: string
          example: Custom preset for alerts
        entityType:
          $ref: '#/components/schemas/notification_center.EntityType'
        id:
          type: string
          example: a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9
        name:
          maxLength: 200
          type: string
          example: My Preset
        parentId:
          type: string
          example: c246e826-10c2-405e-8d3f-afcc24ad4d15
        presetType:
          $ref: '#/components/schemas/PresetType'
        updateTime:
          type: string
          format: date-time
      additionalProperties: false
      description: Provides a concise overview of a preset
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    PresetType:
      enum:
        - PRESET_TYPE_UNSPECIFIED
        - SYSTEM
        - CUSTOM
      type: string
    Presets:
      title: Presets
      required:
        - presets
      type: object
      properties:
        presets:
          type: array
          items:
            type: string
      description: >-
        This data structure represents a set of permissions presets on an API
        key.
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
    PresetsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/Preset'
    PriorityCount:
      title: Priority count
      type: object
      properties:
        count:
          type: integer
          description: The count for this alert priority
          format: int64
          example: 15
        priority:
          $ref: '#/components/schemas/AlertDefPriority'
      description: Count for a specific alert priority
      externalDocs:
        url: ''
    PrivateActionsOrderEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: integer
          format: int64
    ProcessTagsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    PromQLQueryType:
      enum:
        - PROM_QL_QUERY_TYPE_UNSPECIFIED
        - PROM_QL_QUERY_TYPE_RANGE
        - PROM_QL_QUERY_TYPE_INSTANT
      type: string
    PromQlQuery:
      type: object
      properties:
        value:
          type: string
    ProviderType:
      enum:
        - PROVIDER_TYPE_UNSPECIFIED
        - PROVIDER_TYPE_S3
        - PROVIDER_TYPE_IBM_COS
      type: string
    PushBasedContextualData:
      title: Push based contextual data
      type: object
      description: This data structure represents a push based contextual data integration.
      externalDocs:
        url: ''
    Query.LogsQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/Query.LogsQuery.Type'
    Query.LogsQuery.Type:
      oneOf:
        - type: object
          properties:
            fieldName:
              $ref: '#/components/schemas/Query.LogsQuery.Type.FieldName'
          additionalProperties: false
        - type: object
          properties:
            fieldValue:
              $ref: '#/components/schemas/Query.LogsQuery.Type.FieldValue'
          additionalProperties: false
    Query.LogsQuery.Type.FieldName:
      type: object
      properties:
        logRegex:
          type: string
    Query.LogsQuery.Type.FieldValue:
      type: object
      properties:
        observationField:
          $ref: '#/components/schemas/ObservationField'
    Query.MetricsQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/Query.MetricsQuery.Type'
    Query.MetricsQuery.Equals:
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/Query.MetricsQuery.Selection'
    Query.MetricsQuery.MetricsLabelFilter:
      type: object
      properties:
        label:
          $ref: '#/components/schemas/Query.MetricsQuery.StringOrVariable'
        metric:
          $ref: '#/components/schemas/Query.MetricsQuery.StringOrVariable'
        operator:
          $ref: '#/components/schemas/Query.MetricsQuery.Operator'
    Query.MetricsQuery.NotEquals:
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/Query.MetricsQuery.Selection'
    Query.MetricsQuery.Operator:
      oneOf:
        - type: object
          properties:
            equals:
              $ref: '#/components/schemas/Query.MetricsQuery.Equals'
          additionalProperties: false
        - type: object
          properties:
            notEquals:
              $ref: '#/components/schemas/Query.MetricsQuery.NotEquals'
          additionalProperties: false
    Query.MetricsQuery.Selection:
      type: object
      properties:
        list:
          $ref: '#/components/schemas/Query.MetricsQuery.Selection.ListSelection'
      additionalProperties: false
    Query.MetricsQuery.Selection.ListSelection:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Query.MetricsQuery.StringOrVariable'
    Query.MetricsQuery.StringOrVariable:
      oneOf:
        - type: object
          properties:
            stringValue:
              type: string
          additionalProperties: false
        - type: object
          properties:
            variableName:
              type: string
          additionalProperties: false
    Query.MetricsQuery.Type:
      oneOf:
        - type: object
          properties:
            metricName:
              $ref: '#/components/schemas/Query.MetricsQuery.Type.MetricName'
          additionalProperties: false
        - type: object
          properties:
            labelName:
              $ref: '#/components/schemas/Query.MetricsQuery.Type.LabelName'
          additionalProperties: false
        - type: object
          properties:
            labelValue:
              $ref: '#/components/schemas/Query.MetricsQuery.Type.LabelValue'
          additionalProperties: false
    Query.MetricsQuery.Type.LabelName:
      type: object
      properties:
        metricRegex:
          type: string
    Query.MetricsQuery.Type.LabelValue:
      type: object
      properties:
        labelFilters:
          type: array
          items:
            $ref: '#/components/schemas/Query.MetricsQuery.MetricsLabelFilter'
        labelName:
          $ref: '#/components/schemas/Query.MetricsQuery.StringOrVariable'
        metricName:
          $ref: '#/components/schemas/Query.MetricsQuery.StringOrVariable'
    Query.MetricsQuery.Type.MetricName:
      type: object
      properties:
        metricRegex:
          type: string
    Query.SpansQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/Query.SpansQuery.Type'
    Query.SpansQuery.Type:
      oneOf:
        - type: object
          properties:
            fieldName:
              $ref: '#/components/schemas/Query.SpansQuery.Type.FieldName'
          additionalProperties: false
        - type: object
          properties:
            fieldValue:
              $ref: '#/components/schemas/Query.SpansQuery.Type.FieldValue'
          additionalProperties: false
    Query.SpansQuery.Type.FieldName:
      type: object
      properties:
        spanRegex:
          type: string
    Query.SpansQuery.Type.FieldValue:
      type: object
      properties:
        observationField:
          $ref: '#/components/schemas/ObservationField'
        value:
          $ref: '#/components/schemas/SpanField'
    QueryDefinition:
      title: LineChart
      required:
        - id
        - query
      type: object
      properties:
        colorScheme:
          type: string
          description: Applied color scheme for this query, one of the predefined values
          example:
            value: classic
        customUnit:
          type: string
          description: Custom unit (requires to have unit field as 'custom' to take effect)
          example:
            value: rpm
        dataModeType:
          $ref: '#/components/schemas/widgets.common.DataModeType'
        decimal:
          type: integer
          description: >-
            Number indicating the decimal precision of the numeric values,
            within range 0-15
          format: int32
          example: 4
        decimalPrecision:
          type: boolean
          description: Whether to render numeric value without abbreviation
          example: false
        hashColors:
          type: boolean
          description: Whether to ignore color scheme and derive colors from algorithm
          example: false
        id:
          type: string
          description: Unique id of the query definition
          example:
            value: 73c65643-91d5-dba2-35cd-baa49dc65331
        isVisible:
          type: boolean
          description: Is the query visible
          example: true
        name:
          type: string
          description: Custom name of the query
          example:
            value: Query A
        query:
          $ref: '#/components/schemas/LineChart.Query'
        resolution:
          $ref: '#/components/schemas/LineChart.Resolution'
        scaleType:
          $ref: '#/components/schemas/ScaleType'
        seriesCountLimit:
          type: string
          description: Max count of the series per query
          format: int64
          example:
            value: 50
        seriesNameTemplate:
          type: string
          description: Custom template for the series name
          example:
            value: Trace of {{ application }}
        unit:
          $ref: '#/components/schemas/common.Unit'
        yAxisMax:
          type: number
          description: Number indicating the upper band for y axis
          format: float
          example: 1000
        yAxisMin:
          type: number
          description: Number indicating the lower band for y axis
          format: float
          example: -1000
      description: LineChart represents the configuration of a line chart widget.
      externalDocs:
        url: ''
    QueryResult:
      type: object
      properties:
        metric:
          type: object
          additionalProperties:
            type: string
        values:
          type: array
          items:
            type: array
            items:
              type: object
    QuerySource.DataprimeQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/DataprimeQuery.Type'
    QuerySource.LogsQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/QuerySource.LogsQuery.Type'
    QuerySource.LogsQuery.Type:
      oneOf:
        - type: object
          properties:
            fieldName:
              $ref: '#/components/schemas/QuerySource.LogsQuery.Type.FieldName'
          additionalProperties: false
        - type: object
          properties:
            fieldValue:
              $ref: '#/components/schemas/QuerySource.LogsQuery.Type.FieldValue'
          additionalProperties: false
    QuerySource.LogsQuery.Type.FieldName:
      type: object
      properties:
        logRegex:
          type: string
    QuerySource.LogsQuery.Type.FieldValue:
      type: object
      properties:
        observationField:
          $ref: '#/components/schemas/ObservationField'
    QuerySource.MetricsQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/QuerySource.MetricsQuery.Type'
    QuerySource.MetricsQuery.Equals:
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/QuerySource.MetricsQuery.Selection'
    QuerySource.MetricsQuery.MetricsLabelFilter:
      type: object
      properties:
        label:
          $ref: '#/components/schemas/QuerySource.MetricsQuery.StringOrVariable'
        metric:
          $ref: '#/components/schemas/QuerySource.MetricsQuery.StringOrVariable'
        operator:
          $ref: '#/components/schemas/QuerySource.MetricsQuery.Operator'
    QuerySource.MetricsQuery.NotEquals:
      type: object
      properties:
        selection:
          $ref: '#/components/schemas/QuerySource.MetricsQuery.Selection'
    QuerySource.MetricsQuery.Operator:
      oneOf:
        - type: object
          properties:
            equals:
              $ref: '#/components/schemas/QuerySource.MetricsQuery.Equals'
          additionalProperties: false
        - type: object
          properties:
            notEquals:
              $ref: '#/components/schemas/QuerySource.MetricsQuery.NotEquals'
          additionalProperties: false
    QuerySource.MetricsQuery.Selection:
      type: object
      properties:
        list:
          $ref: >-
            #/components/schemas/QuerySource.MetricsQuery.Selection.ListSelection
      additionalProperties: false
    QuerySource.MetricsQuery.Selection.ListSelection:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/QuerySource.MetricsQuery.StringOrVariable'
    QuerySource.MetricsQuery.StringOrVariable:
      oneOf:
        - type: object
          properties:
            stringValue:
              type: string
          additionalProperties: false
        - type: object
          properties:
            variableName:
              type: string
          additionalProperties: false
    QuerySource.MetricsQuery.Type:
      oneOf:
        - type: object
          properties:
            metricName:
              $ref: '#/components/schemas/QuerySource.MetricsQuery.Type.MetricName'
          additionalProperties: false
        - type: object
          properties:
            labelName:
              $ref: '#/components/schemas/QuerySource.MetricsQuery.Type.LabelName'
          additionalProperties: false
        - type: object
          properties:
            labelValue:
              $ref: '#/components/schemas/QuerySource.MetricsQuery.Type.LabelValue'
          additionalProperties: false
    QuerySource.MetricsQuery.Type.LabelName:
      type: object
      properties:
        metricRegex:
          type: string
    QuerySource.MetricsQuery.Type.LabelValue:
      type: object
      properties:
        labelFilters:
          type: array
          items:
            $ref: '#/components/schemas/QuerySource.MetricsQuery.MetricsLabelFilter'
        labelName:
          $ref: '#/components/schemas/QuerySource.MetricsQuery.StringOrVariable'
        metricName:
          $ref: '#/components/schemas/QuerySource.MetricsQuery.StringOrVariable'
    QuerySource.MetricsQuery.Type.MetricName:
      type: object
      properties:
        metricRegex:
          type: string
    QuerySource.SpansQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/QuerySource.SpansQuery.Type'
    QuerySource.SpansQuery.Type:
      oneOf:
        - type: object
          properties:
            fieldName:
              $ref: '#/components/schemas/QuerySource.SpansQuery.Type.FieldName'
          additionalProperties: false
        - type: object
          properties:
            fieldValue:
              $ref: '#/components/schemas/QuerySource.SpansQuery.Type.FieldValue'
          additionalProperties: false
    QuerySource.SpansQuery.Type.FieldName:
      type: object
      properties:
        spanRegex:
          type: string
    QuerySource.SpansQuery.Type.FieldValue:
      type: object
      properties:
        observationField:
          $ref: '#/components/schemas/ObservationField'
        value:
          $ref: '#/components/schemas/SpanField'
    QueryText:
      type: object
      properties:
        dataModeType:
          $ref: '#/components/schemas/v1.common.DataModeType'
        query:
          $ref: '#/components/schemas/common.DataprimeQuery'
    QueryType:
      enum:
        - QUERY_TYPE_UNSPECIFIED
        - QUERY_TYPE_RANGE
        - QUERY_TYPE_INSTANT
      type: string
    QuickTimeSelection:
      required:
        - seconds
      type: object
      properties:
        caption:
          minLength: 1
          type: string
          description: Folder name
          example: Last Hour
          deprecated: true
        seconds:
          type: integer
          description: Folder name
          format: int64
          example: 3600
      externalDocs:
        url: ''
    Range.LabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    Recipients:
      title: Recipients
      required:
        - emails
      type: object
      properties:
        emails:
          type: array
          items:
            type: string
            description: The list of email recipients for alert notifications
            example:
              - mail@gmail.com
      description: List of email recipients for alert notifications
      externalDocs:
        url: ''
    RecreateCompanyMeasurementsRequest:
      type: object
      properties:
        measurementIds:
          type: array
          items:
            type: string
    RecreateCompanyMeasurementsResponse:
      type: object
      properties:
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/Measurement'
    Recurring:
      oneOf:
        - type: object
          properties:
            always:
              $ref: '#/components/schemas/Always'
          additionalProperties: false
        - type: object
          properties:
            dynamic:
              $ref: '#/components/schemas/Recurring.Dynamic'
          additionalProperties: false
    Recurring.Dynamic:
      oneOf:
        - type: object
          properties:
            daily:
              $ref: '#/components/schemas/Daily'
            repeatEvery:
              type: integer
              format: int32
            terminationDate:
              type: string
            timeframe:
              $ref: '#/components/schemas/Timeframe'
          additionalProperties: false
        - type: object
          properties:
            repeatEvery:
              type: integer
              format: int32
            terminationDate:
              type: string
            timeframe:
              $ref: '#/components/schemas/Timeframe'
            weekly:
              $ref: '#/components/schemas/Weekly'
          additionalProperties: false
        - type: object
          properties:
            monthly:
              $ref: '#/components/schemas/Monthly'
            repeatEvery:
              type: integer
              format: int32
            terminationDate:
              type: string
            timeframe:
              $ref: '#/components/schemas/Timeframe'
          additionalProperties: false
    RegexValue:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/StringValueLabel'
    RegisteredInstance:
      oneOf:
        - title: Registered instance
          type: object
          properties:
            definitionVersion:
              type: string
            empty:
              $ref: '#/components/schemas/NoDeployment'
            id:
              type: string
            integrationStatus:
              $ref: '#/components/schemas/IntegrationStatus'
            isTesting:
              type: boolean
            lastUpdated:
              type: string
              format: date-time
            parameters:
              type: array
              items:
                $ref: '#/components/schemas/Parameter'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Registered instance
          type: object
          properties:
            cloudformation:
              $ref: '#/components/schemas/CloudFormationStack'
            definitionVersion:
              type: string
            id:
              type: string
            integrationStatus:
              $ref: '#/components/schemas/IntegrationStatus'
            isTesting:
              type: boolean
            lastUpdated:
              type: string
              format: date-time
            parameters:
              type: array
              items:
                $ref: '#/components/schemas/Parameter'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Registered instance
          type: object
          properties:
            arm:
              $ref: '#/components/schemas/ARMStack'
            definitionVersion:
              type: string
            id:
              type: string
            integrationStatus:
              $ref: '#/components/schemas/IntegrationStatus'
            isTesting:
              type: boolean
            lastUpdated:
              type: string
              format: date-time
            parameters:
              type: array
              items:
                $ref: '#/components/schemas/Parameter'
          additionalProperties: false
          externalDocs:
            url: ''
    RemoveCompanyMeasurementsRequest:
      type: object
      properties:
        measurementIds:
          type: array
          items:
            type: string
    RemoveCompanyMeasurementsResponse:
      type: object
      properties:
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/Measurement'
    RemoveCustomLabelMappingsRequest:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
    RemoveCustomLabelMappingsResponse:
      type: object
      properties:
        numberOfDeletedMappings:
          type: integer
          format: int32
    RemoveEnrichmentsRequest:
      title: Encrichments Delettion Request
      required:
        - enrichmentIds
      type: object
      properties:
        enrichmentIds:
          type: array
          items:
            type: integer
            format: int64
            example:
              - 1
              - 2
              - 3
      description: Request data structure for enrichments deletion
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    RemoveEnrichmentsResponse:
      title: Encrichments Delettion Response
      required:
        - remainingEnrichments
      type: object
      properties:
        remainingEnrichments:
          type: array
          items:
            $ref: '#/components/schemas/Enrichment'
      description: Response data structure for enrichments deletion
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    RemoveFieldsParameters:
      type: object
      properties:
        fields:
          type: array
          items:
            type: string
    RemoveGlobalMeasurementsInternalRequest:
      type: object
      properties:
        measurementIds:
          type: array
          items:
            type: string
    RemoveGlobalMeasurementsInternalResponse:
      type: object
      properties:
        numberOfDeletedMeasurements:
          type: integer
          format: int32
    RemoveLabelMappingsRequest:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
    RemoveLabelMappingsResponse:
      type: object
      properties:
        numberOfDeletedMappings:
          type: integer
          format: int32
    RemoveMeasurementsRequest:
      type: object
      properties:
        measurementIds:
          type: array
          items:
            type: string
    RemoveMeasurementsResponse:
      type: object
      properties:
        numberOfDeletedMeasurements:
          type: integer
          format: int32
    RemoveUsersFromTeamGroup:
      title: RemoveUsersFromTeamGroup
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/TeamGroupId'
        userIds:
          type: array
          items:
            $ref: '#/components/schemas/v1.UserId'
      description: >-
        This data structure represents the information associated with an API
        key.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    RemoveUsersFromTeamGroupRequest:
      title: RemoveUsersFromTeamGroupRequest
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/TeamGroupId'
        userIds:
          type: array
          items:
            $ref: '#/components/schemas/v1.UserId'
      description: >-
        Request to remove specified users from a team group, revoking their
        access to the group's roles and scope permissions.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    RemoveUsersFromTeamGroupResponse:
      title: RemoveUsersFromTeamGroupResponse
      type: object
      description: >-
        Response confirming the successful removal of users from the specified
        team group.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    RemoveUsersFromTeamGroupsRequest:
      title: RemoveUsersFromTeamGroupsRequest
      type: object
      properties:
        removeUsersFromGroup:
          type: array
          items:
            $ref: '#/components/schemas/RemoveUsersFromTeamGroup'
        teamId:
          $ref: '#/components/schemas/permissions.v1.TeamId'
      description: >-
        Bulk request to remove users from multiple team groups simultaneously,
        efficiently managing group membership revocations at scale.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    RemoveUsersFromTeamGroupsResponse:
      title: RemoveUsersFromTeamGroupsResponse
      type: object
      description: >-
        Response confirming the successful bulk removal of users from multiple
        team groups.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    RenderedConnectorConfigField:
      type: object
      properties:
        fieldName:
          type: string
        value:
          type: string
    RenderedMessageConfigField:
      type: object
      properties:
        fieldName:
          type: string
        value:
          type: string
    ReorderPoliciesRequest:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/PolicyOrder'
        sourceType:
          $ref: '#/components/schemas/v1.SourceType'
    ReorderPoliciesResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/PolicyOrder'
    RepetitiveVar:
      type: object
      properties:
        name:
          type: string
          description: >-
            Variable name that can be applied on section making it repetitive
            section
          example: pod_name
    ReplaceActionRequest:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/v2.Action'
    ReplaceActionResponse:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/v2.Action'
    ReplaceAlertDefRequest:
      title: Replace alert definition request
      required:
        - alertDefProperties
        - id
      type: object
      properties:
        alertDefProperties:
          $ref: '#/components/schemas/AlertDefProperties'
        id:
          type: string
          description: Alert definition ID
          example: 123e4567-e89b-12d3-a456-426614174000
      description: A request to replace an existing alert definition
      externalDocs:
        url: ''
    ReplaceAlertDefResponse:
      title: Replace alert definition response
      required:
        - alertDef
      type: object
      properties:
        alertDef:
          $ref: '#/components/schemas/AlertDef'
      description: A response that contains the updated alert definition
      externalDocs:
        url: ''
    ReplaceCompanyIpAccessSettingsRequest:
      title: Replace company IP access settings request
      type: object
      properties:
        enableCoralogixCustomerSupportAccess:
          $ref: '#/components/schemas/CoralogixCustomerSupportAccess'
        id:
          type: string
          example: 405
        ipAccess:
          type: array
          items:
            $ref: '#/components/schemas/IpAccess'
      additionalProperties: false
      description: >-
        This data structure represents the request to replace company IP access
        settings.
      externalDocs:
        url: ''
    ReplaceCompanyIpAccessSettingsResponse:
      title: Replace company IP access settings response
      type: object
      properties:
        settings:
          $ref: '#/components/schemas/CompanyIpAccessSettings'
      description: >-
        This data structure represents the response to replace company IP access
        settings.
      externalDocs:
        url: ''
    ReplaceConnectorRequest:
      title: Replace Connector Request
      type: object
      properties:
        connector:
          $ref: '#/components/schemas/Connector'
      description: Request to replace an existing connector
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ReplaceConnectorResponse:
      title: Replace Connector Response
      type: object
      properties:
        connector:
          $ref: '#/components/schemas/Connector'
      description: Response containing the updated connector
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ReplaceCustomPresetRequest:
      title: Replace Custom Preset Request
      type: object
      properties:
        preset:
          $ref: '#/components/schemas/Preset'
      description: Request to replace an existing custom preset
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ReplaceCustomPresetResponse:
      title: Replace Custom Preset Response
      type: object
      properties:
        preset:
          $ref: '#/components/schemas/Preset'
      description: Response containing the updated custom preset
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ReplaceDashboardFolderRequest:
      title: Replace dashboard folder request data structure
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/DashboardFolder'
        requestId:
          type: string
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    ReplaceDashboardFolderResponse:
      title: Replace dashboard folder response data structure
      type: object
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    ReplaceDashboardRequest:
      title: Replace dashboard request data structure
      required:
        - requestId
        - dashboard
      type: object
      properties:
        dashboard:
          $ref: '#/components/schemas/Dashboard'
        isLocked:
          type: boolean
        requestId:
          type: string
      description: >-
        This is a request sent to update an existing dashboard with new
        information
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    ReplaceDashboardResponse:
      title: Replace dashboard response data structure
      type: object
      description: This is a response received when the dashboard is successfully updated
      externalDocs:
        description: Find out more Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    ReplaceDefaultDashboardRequest:
      title: Replace default dashboard request data structure
      required:
        - requestId
        - dashboardId
      type: object
      properties:
        dashboardId:
          type: string
        requestId:
          type: string
      description: This is a request to replace a default dashboard
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    ReplaceDefaultDashboardResponse:
      title: Replace default dashboard response data structure
      type: object
      description: This is a response received when default dashboard has been replaced
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    ReplaceE2MRequest:
      title: Replace E2M Request
      required:
        - e2m
      type: object
      properties:
        e2m:
          $ref: '#/components/schemas/E2M'
      description: >-
        This data structure is used to replace an existing event to metric
        definition
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    ReplaceE2MResponse:
      title: Replace E2M Response
      required:
        - e2m
      type: object
      properties:
        e2m:
          $ref: '#/components/schemas/E2M'
      description: >-
        This data structure is obtained when replacing an existing event to
        metric definition
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    ReplaceGlobalRouterRequest:
      title: Replace Global Router Request
      type: object
      properties:
        router:
          $ref: '#/components/schemas/GlobalRouter'
      description: Request which updates an existing global router
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ReplaceGlobalRouterResponse:
      title: Replace Global Router Response
      type: object
      properties:
        router:
          $ref: '#/components/schemas/GlobalRouter'
      description: Response which contains an updated global router
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ReplaceParameters:
      type: object
      properties:
        destinationField:
          type: string
        replaceNewVal:
          type: string
        rule:
          type: string
    ReplaceServiceSloRequest:
      title: Replace Service SLO Request
      required:
        - slo
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/ServiceSlo'
      description: This data structure represents a request to update a Service SLO.
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
    ReplaceServiceSloResponse:
      title: Replace Service SLO Response
      required:
        - slo
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/ServiceSlo'
      description: This data structure represents a response to update a Service SLO.
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
    ReplaceSloAlertsValidationsRequest:
      title: ReplaceSloAlertsValidationsRequest
      required:
        - slo
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/Slo'
      description: Request to validate alerts before replacing an existing SLO.
      externalDocs:
        url: ''
    ReplaceSloAlertsValidationsResponse:
      title: ReplaceSloAlertsValidationsResponse
      required:
        - alertsValidationResult
      type: object
      properties:
        alertsValidationResult:
          type: array
          items:
            $ref: '#/components/schemas/SloAlertValidityResult'
      description: Response with validated alerts before replacing an existing SLO.
      externalDocs:
        url: ''
    ReplaceSloRequest:
      title: ReplaceSloRequest
      required:
        - slo
      type: object
      properties:
        silenceDataValidations:
          type: boolean
          deprecated: true
        slo:
          $ref: '#/components/schemas/Slo'
      additionalProperties: false
      description: Request to replace an existing SLO.
      externalDocs:
        url: ''
    ReplaceSloResponse:
      title: ReplaceSloResponse
      required:
        - slo
      type: object
      properties:
        effectedSloAlertIds:
          type: array
          items:
            type: string
        slo:
          $ref: '#/components/schemas/Slo'
      description: Response after replacing an existing SLO.
      externalDocs:
        url: ''
    ReplaceViewFolderRequest:
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/ViewFolder'
    ReplaceViewFolderResponse:
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/ViewFolder'
    ReplaceViewRequest:
      type: object
      properties:
        view:
          $ref: '#/components/schemas/View'
    ReplaceViewResponse:
      type: object
      properties:
        view:
          $ref: '#/components/schemas/View'
    RequestBasedMetricSli:
      title: RequestBasedMetricSli
      required:
        - goodEvents
        - totalEvents
      type: object
      properties:
        goodEvents:
          $ref: '#/components/schemas/Metric'
        totalEvents:
          $ref: '#/components/schemas/Metric'
      description: Definition of a request-based SLI based on metrics
      externalDocs:
        url: ''
    RequestBasedPermutationData:
      type: object
      properties:
        badEvents:
          type: integer
          format: int64
        goodEvents:
          type: integer
          format: int64
    ResolveIncidentByEventIdRequest:
      title: Resolve incidents request
      required:
        - eventId
      type: object
      properties:
        eventId:
          type: string
          description: Event ID associated to the Incident to resolve
          example: event_id_1
      description: Request to resolve one or more incidents
      externalDocs:
        url: ''
    ResolveIncidentByEventIdResponse:
      title: Acknowledge incident by event id response
      required:
        - incident
      type: object
      properties:
        incident:
          $ref: '#/components/schemas/Incident'
      description: Response containing the updated incident after resolution
      externalDocs:
        url: ''
    ResolveIncidentsRequest:
      title: Resolve incidents request
      required:
        - incidentIds
      type: object
      properties:
        incidentIds:
          type: array
          items:
            type: string
            description: List of incident IDs to resolve
            example:
              - incident_id_1
              - incident_id_2
      description: Request to resolve one or more incidents
      externalDocs:
        url: ''
    ResolveIncidentsResponse:
      title: Resolve incidents response
      required:
        - incidents
      type: object
      properties:
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/Incident'
      description: Response containing the updated incidents after resolution
      externalDocs:
        url: ''
    Resource:
      enum:
        - RESOURCE_UNSPECIFIED
        - RESOURCE_CORALOGIX
        - RESOURCE_KIBANA
        - RESOURCE_APIACCESS
        - RESOURCE_GRAFANA
        - RESOURCE_ACCOUNTMANAGER
        - RESOURCE_GROUPS
        - RESOURCE_ALERTS
        - RESOURCE_WEBHOOKS
        - RESOURCE_LOGS_DATAINGRESS
        - RESOURCE_SPANS_DATAINGRESS
        - RESOURCE_METRICS_DATAINGRESS
        - RESOURCE_APIKEYS
        - RESOURCE_TEAM
        - RESOURCE_TEAM_INVITES
        - RESOURCE_SSO
        - RESOURCE_QUERY_DATA_LEGACY
        - RESOURCE_API_KEY_LEGACY
        - RESOURCE_SNOWBIT_SETUP
        - RESOURCE_SNOWBIT_OVERVIEW
        - RESOURCE_SNOWBIT_CSPM
        - RESOURCE_SNOWBIT_RESOURCE_EXPLORER
        - RESOURCE_SNOWBIT_SSPM
        - RESOURCE_SNOWBIT_ALERTS
        - RESOURCE_CLOUD_SECURITY
        - RESOURCE_USER_API_KEYS
        - RESOURCE_TEAM_API_KEYS
        - RESOURCE_TEAM_API_KEYS_SECURITY_SETTINGS
        - RESOURCE_TEAM_DASHBOARDS
        - RESOURCE_CLOUD_METADATA_ENRICHMENT
        - RESOURCE_GEO_ENRICHMENT
        - RESOURCE_GLOBAL_MAPPING
        - RESOURCE_K8S_INFRA_MONITORING
        - RESOURCE_SECURITY_ENRICHMENT
        - RESOURCE_SERVERLESS
        - RESOURCE_TEAM_CUSTOM_ENRICHMENT
        - RESOURCE_JAEGER
        - RESOURCE_SERVICE_MAP
        - RESOURCE_SPANS_DATA_ANALYTICS_HIGH
        - RESOURCE_SPANS_DATA_API_HIGH
        - RESOURCE_SPANS_DATA_SETUP_HIGH
        - RESOURCE_TEAM_ACTIONS
        - RESOURCE_TEAM_AUDITING
        - RESOURCE_TEAM_PAY_AS_YOU_GO
        - RESOURCE_TEAM_PAYMENTS
        - RESOURCE_TEAM_SLACK_NOTIFICATIONS
        - RESOURCE_USER_ACTIONS
        - RESOURCE_USER_EMAIL_NOTIFICATIONS
        - RESOURCE_VERSION_BENCHMARKS_REPORTS
        - RESOURCE_ALERTS_MAP
        - RESOURCE_CLOUD_METADATA_INGRESS
        - RESOURCE_CONTEXTUAL_DATA
        - RESOURCE_DATA_MAP
        - RESOURCE_DATA_USAGE
        - RESOURCE_EXTENSIONS
        - RESOURCE_HOME_DASHBOARD
        - RESOURCE_INCIDENTS
        - RESOURCE_INTEGRATIONS
        - RESOURCE_LEGACY_ARCHIVE_QUERIES
        - RESOURCE_LIVETAIL
        - RESOURCE_LOGS_DATA_ANALYTICS_HIGH
        - RESOURCE_LOGS_DATA_ANALYTICS_LOW
        - RESOURCE_LOGS_DATA_API_HIGH
        - RESOURCE_LOGS_DATA_API_LOW
        - RESOURCE_LOGS_DATA_SETUP_HIGH
        - RESOURCE_LOGS_DATA_SETUP_LOW
        - RESOURCE_LOGS_EVENTS2METRICS
        - RESOURCE_LOGS_TCO
        - RESOURCE_METRICS_DATA_ANALYTICS_HIGH
        - RESOURCE_METRICS_DATA_ANALYTICS_LOW
        - RESOURCE_METRICS_DATA_API_HIGH
        - RESOURCE_METRICS_DATA_API_LOW
        - RESOURCE_METRICS_DATA_SETUP_HIGH
        - RESOURCE_METRICS_DATA_SETUP_LOW
        - RESOURCE_METRICS_RECORDING_RULES
        - RESOURCE_METRICS_TCO
        - RESOURCE_OPENSEARCH_DASHBOARDS
        - RESOURCE_ORG_ADMINS
        - RESOURCE_ORG_QUOTA
        - RESOURCE_ORG_SETTINGS
        - RESOURCE_ORG_TEAMS
        - RESOURCE_OUTBOUND_WEBHOOKS
        - RESOURCE_PARSING_RULES
        - RESOURCE_RUM
        - RESOURCE_RUM_INGRESS
        - RESOURCE_SERVICE_CATALOG
        - RESOURCE_SPANS_DATA_ANALYTICS_LOW
        - RESOURCE_SPANS_DATA_API_LOW
        - RESOURCE_TRACES_DATA_INGRESS
        - RESOURCE_SPANS_DATA_SETUP_LOW
        - RESOURCE_SPANS_EVENTS2METRICS
        - RESOURCE_SPANS_TCO
        - RESOURCE_TEAM_DOMAIN
        - RESOURCE_TEAM_GROUPS
        - RESOURCE_TEAM_IP_ACCESS
        - RESOURCE_TEAM_MEMBERS
        - RESOURCE_TEAM_ROLES
        - RESOURCE_TEAM_SAVED_VIEWS
        - RESOURCE_TEAM_SCIM
        - RESOURCE_TEAM_SESSIONS
        - RESOURCE_TEAM_SSO
        - RESOURCE_USER_DASHBOARDS
        - RESOURCE_USER_LEGACY_LOGS_QUERY_API_KEYS
        - RESOURCE_USER_LEGACY_OTHER_API_KEYS
        - RESOURCE_USER_SAVED_VIEWS
        - RESOURCE_USER_SETTINGS
        - RESOURCE_VERSION_BENCHMARK_TAGS
        - RESOURCE_SOURCE_MAPPING
        - RESOURCE_SETUP_CORRELATION
        - RESOURCE_LOGS_ALERTS
        - RESOURCE_SPANS_ALERTS
        - RESOURCE_METRICS_ALERTS
        - RESOURCE_SUPPRESSION_RULES
        - RESOURCE_USER_AUTH_INFO
        - RESOURCE_TEAM_SCOPES
        - RESOURCE_TEAM_QUOTA
        - RESOURCE_RUM_TEAM_SAVED_FILTER
        - RESOURCE_RUM_USER_SAVED_FILTER
        - RESOURCE_INVESTIGATIONS
        - RESOURCE_DATA_INGEST_API_KEYS
        - RESOURCE_PERSONAL_CUSTOM_API_KEYS
        - RESOURCE_TEAM_CUSTOM_API_KEYS
        - RESOURCE_LOGS_DATA_OUT_SETUP
        - RESOURCE_DATAPRIME_AI_QUERY_ASSISTANT
        - RESOURCE_TEAM_LANDING_PAGE
        - RESOURCE_RESOURCE_CATALOG
        - RESOURCE_TEAM_ALERTS_SETTINGS
        - RESOURCE_TEAM_AI_SETTINGS
        - RESOURCE_NOTIFICATION_CENTER_CONNECTORS
        - RESOURCE_NOTIFICATION_CENTER_PRESETS
        - RESOURCE_HIDE_ERRORS
        - RESOURCE_RUM_SETTINGS
        - RESOURCE_SESSION_RECORDING
        - RESOURCE_NOTIFICATION_CENTER_ROUTERS
        - RESOURCE_PROFILES_DATA_INGRESS
        - RESOURCE_AI_APP_CATALOG
        - RESOURCE_AI_APP_DISCOVERY
        - RESOURCE_AI_APP_EVALUATORS
        - RESOURCE_AI_OVERVIEW
        - RESOURCE_AI_SPM
        - RESOURCE_LOGS_RESERVED_FIELDS
        - RESOURCE_PROFILES_CPU_PROFILES
        - RESOURCE_PROFILES_DEBUG_SYMBOLS
        - RESOURCE_SLO_MGMT_ALERTS
        - RESOURCE_SLO
        - RESOURCE_SYSTEM_DATASETS
        - RESOURCE_TEAM_QUOTA_RULES
        - RESOURCE_SPLIT_INDEX
        - RESOURCE_ACCESS_POLICIES
        - RESOURCE_PIPELINE_ANALYZER
        - RESOURCE_TEAM_DATASETS
        - RESOURCE_TEAM_SCHEMA_MANAGER
        - RESOURCE_CASE_CONFIG
        - RESOURCE_CASE
      type: string
    ResponseStatus:
      title: ResponseStatus
      required:
        - statusCode
      type: object
      properties:
        details:
          type: object
          additionalProperties:
            type: string
        message:
          type: string
        statusCode:
          $ref: '#/components/schemas/Code'
      additionalProperties: false
      description: Status of the response, including error code and message.
      externalDocs:
        url: ''
    ResponseStatus.DetailsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    RetentionPolicy:
      title: Retenion Policy
      required:
        - resolution
        - retentionDays
      type: object
      properties:
        resolution:
          type: integer
          format: int32
          example: 12
        retentionDays:
          type: integer
          format: int32
          example: 30
      description: This data structure represents the retention policy for a tenant.
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
    RetentionPolicyRequest:
      title: Retenion Policy Request
      required:
        - rawResolution
        - fiveMinutesResolution
        - oneHourResolution
      type: object
      properties:
        fiveMinutesResolution:
          type: integer
          format: int64
          example: 2
        oneHourResolution:
          type: integer
          format: int64
          example: 3
        rawResolution:
          type: integer
          format: int64
          example: 1
      description: This data structure is used to set the retention policy for a tenant.
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
    RetentionUpdateElement:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    RevisionRef:
      title: Revision reference
      type: object
      properties:
        descriptionMd:
          type: string
        version:
          type: string
      externalDocs:
        url: ''
    RevisionSummary:
      title: Revision summary
      required:
        - itemCounts
      type: object
      properties:
        isNew:
          type: boolean
        itemCounts:
          $ref: '#/components/schemas/ItemCounts'
      externalDocs:
        url: ''
    Role:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        roleId:
          $ref: '#/components/schemas/RoleId'
    RoleId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    RoleSummary:
      oneOf:
        - type: object
          properties:
            groups:
              type: array
              items:
                $ref: '#/components/schemas/TeamGroupSummary'
            permissions:
              type: array
              items:
                $ref: '#/components/schemas/PermissionMetadata'
            systemRole:
              $ref: '#/components/schemas/v1.SystemRole'
            userCount:
              type: integer
              format: int64
          additionalProperties: false
        - type: object
          properties:
            customRole:
              $ref: '#/components/schemas/v1.CustomRole'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/TeamGroupSummary'
            permissions:
              type: array
              items:
                $ref: '#/components/schemas/PermissionMetadata'
            userCount:
              type: integer
              format: int64
          additionalProperties: false
    RoleUpdates:
      title: RoleUpdates
      type: object
      properties:
        roleIds:
          type: array
          items:
            $ref: '#/components/schemas/RoleId'
      description: >-
        This data structure represents the information associated with an API
        key.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    RoutersEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/GlobalRouter'
    RoutingRule:
      title: Routing Rule
      required:
        - condition
        - targets
      type: object
      properties:
        condition:
          type: string
          example: alertDef.priority == 'P3'
        customDetails:
          type: object
          additionalProperties:
            type: string
        entityType:
          $ref: '#/components/schemas/notification_center.EntityType'
        name:
          type: string
        targets:
          type: array
          items:
            $ref: '#/components/schemas/RoutingTarget'
      additionalProperties: false
      description: Defines routing rule for notifications
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    RoutingRule.CustomDetailsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    RoutingTarget:
      title: Routing Target
      required:
        - connectorId
      type: object
      properties:
        connectorId:
          type: string
        customDetails:
          type: object
          additionalProperties:
            type: string
        presetId:
          type: string
      additionalProperties: false
      description: Defines routing target for notifications
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    RoutingTarget.CustomDetailsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    Row:
      type: object
      properties:
        appearance:
          $ref: '#/components/schemas/Row.Appearance'
        id:
          $ref: '#/components/schemas/UUID'
        widgets:
          type: array
          items:
            $ref: '#/components/schemas/Widget'
    Row.Appearance:
      type: object
      properties:
        height:
          type: integer
          description: >-
            Height of a row, defined as a multiplier number of the base height,
            where 1 = 1 * base height, 2 = 2 * base height etc
          format: int32
          example:
            value: 16
    RowStyle:
      enum:
        - ROW_STYLE_UNSPECIFIED
        - ROW_STYLE_ONE_LINE
        - ROW_STYLE_TWO_LINE
        - ROW_STYLE_CONDENSED
        - ROW_STYLE_JSON
        - ROW_STYLE_LIST
      type: string
    RuleGroup:
      type: object
      properties:
        creator:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        hidden:
          type: boolean
        id:
          type: string
        name:
          type: string
        order:
          type: integer
          format: int64
        ruleMatchers:
          type: array
          items:
            $ref: '#/components/schemas/RuleMatcher'
        ruleSubgroups:
          type: array
          items:
            $ref: '#/components/schemas/RuleSubgroup'
    RuleGroupListing:
      type: object
      properties:
        ruleGroups:
          type: array
          items:
            $ref: '#/components/schemas/OutRuleGroup'
    RuleGroupSetListing:
      type: object
      properties:
        sets:
          type: array
          items:
            $ref: '#/components/schemas/OutRuleGroupSet'
    RuleMatcher:
      oneOf:
        - type: object
          properties:
            applicationName:
              $ref: '#/components/schemas/ApplicationNameConstraint'
          additionalProperties: false
        - type: object
          properties:
            subsystemName:
              $ref: '#/components/schemas/SubsystemNameConstraint'
          additionalProperties: false
        - type: object
          properties:
            severity:
              $ref: '#/components/schemas/SeverityConstraint'
          additionalProperties: false
    RuleParameters:
      oneOf:
        - type: object
          properties:
            extractParameters:
              $ref: '#/components/schemas/ExtractParameters'
          additionalProperties: false
        - type: object
          properties:
            jsonExtractParameters:
              $ref: '#/components/schemas/JsonExtractParameters'
          additionalProperties: false
        - type: object
          properties:
            replaceParameters:
              $ref: '#/components/schemas/ReplaceParameters'
          additionalProperties: false
        - type: object
          properties:
            parseParameters:
              $ref: '#/components/schemas/ParseParameters'
          additionalProperties: false
        - type: object
          properties:
            allowParameters:
              $ref: '#/components/schemas/AllowParameters'
          additionalProperties: false
        - type: object
          properties:
            blockParameters:
              $ref: '#/components/schemas/BlockParameters'
          additionalProperties: false
        - type: object
          properties:
            extractTimestampParameters:
              $ref: '#/components/schemas/ExtractTimestampParameters'
          additionalProperties: false
        - type: object
          properties:
            removeFieldsParameters:
              $ref: '#/components/schemas/RemoveFieldsParameters'
          additionalProperties: false
        - type: object
          properties:
            jsonStringifyParameters:
              $ref: '#/components/schemas/JsonStringifyParameters'
          additionalProperties: false
        - type: object
          properties:
            jsonParseParameters:
              $ref: '#/components/schemas/JsonParseParameters'
          additionalProperties: false
    RuleSubgroup:
      type: object
      properties:
        enabled:
          type: boolean
        id:
          type: string
        order:
          type: integer
          format: int64
        rules:
          type: array
          items:
            $ref: '#/components/schemas/rules.v1.Rule'
    RuleTypeId:
      enum:
        - RULE_TYPE_ID_UNSPECIFIED
        - RULE_TYPE_ID_IS
        - RULE_TYPE_ID_IS_NOT
        - RULE_TYPE_ID_START_WITH
        - RULE_TYPE_ID_INCLUDES
      type: string
    Rum:
      title: RUM
      type: object
      properties:
        browserSdkCommands:
          type: array
          items:
            $ref: '#/components/schemas/CommandInformation'
        sourceMapCommands:
          type: array
          items:
            $ref: '#/components/schemas/CommandInformation'
      description: This data structure represents a RUM integration.
      externalDocs:
        url: ''
    RumVersionData:
      title: RUM version data
      type: object
      properties:
        syncedAt:
          type: string
          format: date-time
        versions:
          type: array
          items:
            $ref: '#/components/schemas/RumVersionData.Version'
      externalDocs:
        url: ''
    RumVersionData.Version:
      title: Version
      type: object
      properties:
        logMetadata:
          $ref: '#/components/schemas/LogMetadata'
        sourceMapMetadata:
          $ref: '#/components/schemas/SourceMapMetadata'
        version:
          type: string
      externalDocs:
        url: ''
    S3Config:
      title: S3 Configuration
      required:
        - bucket
        - region
      type: object
      properties:
        bucket:
          type: string
        region:
          type: string
      description: This data structure represents the S3 configuration for a tenant.
      externalDocs:
        description: Find out more about metrics cost optimization
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
    S3TargetServiceGetTargetRequest:
      type: object
    S3TargetServiceGetTargetResponse:
      title: Get Target Response
      required:
        - target
      type: object
      properties:
        target:
          $ref: '#/components/schemas/Target'
      description: This data structure is used to retrieve a storage target for logs.
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    S3TargetServiceSetTargetRequest:
      title: Set Target Response
      required:
        - isActive
        - targetSpec
      type: object
      properties:
        isActive:
          type: boolean
          example: true
        s3:
          $ref: '#/components/schemas/S3TargetSpec'
      additionalProperties: false
      description: This data structure is used to set a storage target for logs.
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    S3TargetServiceSetTargetResponse:
      title: Set Target Response
      required:
        - target
      type: object
      properties:
        target:
          $ref: '#/components/schemas/Target'
      description: This data structure is obtained after setting a storage target for logs.
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    S3TargetSpec:
      title: S3 Target Spec
      required:
        - bucket
      type: object
      properties:
        bucket:
          type: string
          example: bucket
        region:
          type: string
          example: us-west-2
      additionalProperties: false
      description: This data structure represents an S3 target.
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    SPParameters:
      title: Service Provider Parameters
      required:
        - metadataUrl
        - signingCertPem
        - nameIdFormat
        - assertionConsumerServiceUrl
        - binding
      type: object
      properties:
        assertionConsumerServiceUrl:
          type: string
          example: assertion
        binding:
          type: string
          example: binding
        metadataUrl:
          type: string
          example: https://<...>.okta.com/app/<...>/sso/saml/metadata
        nameIdFormat:
          type: string
          example: name_id
        signingCertPem:
          type: string
          example: certificate
      description: This data structure represents the parameters of a SAML service provider
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    SampleType:
      enum:
        - SAMPLE_TYPE_UNSPECIFIED
        - SAMPLE_TYPE_MIN
        - SAMPLE_TYPE_MAX
      type: string
    SaveContextualDataIntegrationRequest:
      title: Save contextual data integration request
      required:
        - metadata
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/IntegrationMetadata'
      externalDocs:
        url: ''
    SaveContextualDataIntegrationResponse:
      title: Save contextual data integration response
      required:
        - integrationId
      type: object
      properties:
        integrationId:
          type: string
      externalDocs:
        url: ''
    SaveIntegrationRequest:
      title: Save integration request
      required:
        - metadata
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/IntegrationMetadata'
      externalDocs:
        url: ''
    SaveIntegrationResponse:
      title: Save integration response
      required:
        - integrationId
      type: object
      properties:
        integrationId:
          type: string
      externalDocs:
        url: ''
    ScaleType:
      enum:
        - SCALE_TYPE_UNSPECIFIED
        - SCALE_TYPE_LINEAR
        - SCALE_TYPE_LOGARITHMIC
      type: string
    Schedule:
      oneOf:
        - type: object
          properties:
            oneTime:
              $ref: '#/components/schemas/OneTime'
            scheduleOperation:
              $ref: '#/components/schemas/ScheduleOperation'
          additionalProperties: false
        - type: object
          properties:
            recurring:
              $ref: '#/components/schemas/Recurring'
            scheduleOperation:
              $ref: '#/components/schemas/ScheduleOperation'
          additionalProperties: false
    ScheduleOperation:
      enum:
        - SCHEDULE_OPERATION_UNSPECIFIED
        - SCHEDULE_OPERATION_MUTE
        - SCHEDULE_OPERATION_ACTIVATE
      type: string
    ScopeFilter:
      type: object
      properties:
        filterType:
          $ref: '#/components/schemas/FilterType'
        term:
          type: string
    ScopeFilters:
      type: object
      properties:
        applications:
          type: array
          items:
            $ref: '#/components/schemas/ScopeFilter'
        subsystems:
          type: array
          items:
            $ref: '#/components/schemas/ScopeFilter'
    ScopeId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    ScopesFilter:
      title: Scopes Filter
      type: object
      properties:
        application:
          type: array
          items:
            type: string
            example: application1
        subsystem:
          type: array
          items:
            type: string
            example: subsystem1
      description: This data structure represents a filter for scopes.
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    SearchClause:
      oneOf:
        - title: Search Clause
          required:
            - searchBy
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1
          additionalProperties: false
          description: This data structure represents a search clause
          externalDocs:
            description: Find out more about enrichments
            url: >-
              https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
        - title: Search Clause
          required:
            - searchBy
          type: object
          properties:
            name:
              type: string
              example: custom_enrichment_name
          additionalProperties: false
          description: This data structure represents a search clause
          externalDocs:
            description: Find out more about enrichments
            url: >-
              https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    SearchCustomEnrichmentDataRequest:
      title: Search Custom Enrichment Data Request
      required:
        - searchClauses
      type: object
      properties:
        searchClauses:
          type: array
          items:
            $ref: '#/components/schemas/SearchClause'
      description: This request data structure is used to search custom enrichment data
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    SearchCustomEnrichmentDataResponse:
      type: object
      properties:
        customEnrichmentsData:
          type: array
          items:
            $ref: '#/components/schemas/CustomEnrichmentData'
    SearchQuery:
      title: SearchQuery
      required:
        - query
      type: object
      properties:
        query:
          minLength: 1
          type: string
      externalDocs:
        url: ''
    Section:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        options:
          $ref: '#/components/schemas/SectionOptions'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Row'
    SectionColor:
      type: object
      properties:
        predefined:
          $ref: '#/components/schemas/SectionPredefinedColor'
      additionalProperties: false
    SectionOptions:
      oneOf:
        - type: object
          properties:
            internal:
              $ref: '#/components/schemas/InternalSectionOptions'
          additionalProperties: false
        - type: object
          properties:
            custom:
              $ref: '#/components/schemas/CustomSectionOptions'
          additionalProperties: false
    SectionPredefinedColor:
      enum:
        - SECTION_PREDEFINED_COLOR_UNSPECIFIED
        - SECTION_PREDEFINED_COLOR_CYAN
        - SECTION_PREDEFINED_COLOR_GREEN
        - SECTION_PREDEFINED_COLOR_BLUE
        - SECTION_PREDEFINED_COLOR_PURPLE
        - SECTION_PREDEFINED_COLOR_MAGENTA
        - SECTION_PREDEFINED_COLOR_PINK
        - SECTION_PREDEFINED_COLOR_ORANGE
      type: string
    SelectedFilters:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/views.v1.Filter'
    SelectedValuesEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: boolean
    SelectionType:
      enum:
        - SELECTION_TYPE_UNSPECIFIED
        - SELECTION_TYPE_MULTI_ALL
        - SELECTION_TYPE_MULTI
        - SELECTION_TYPE_SINGLE
      type: string
    SelectionValue:
      title: Selection value
      type: object
      properties:
        defaultValue:
          type: string
        options:
          type: array
          items:
            type: string
      additionalProperties: false
      externalDocs:
        url: ''
    SendLogConfig:
      title: Send log configuration
      required:
        - uuid
        - payload
      type: object
      properties:
        payload:
          type: string
          example:
            key: value
        uuid:
          type: string
          example: d838cd7b-087b-40c6-bc33-80997020f5d0
      externalDocs:
        url: ''
    SensitiveDataPlaceholder:
      title: Sensitive data placeholder
      type: object
      externalDocs:
        url: ''
    SerializedDataprimeQuery:
      type: object
      properties:
        data:
          type: string
          format: byte
    ServiceSlo:
      oneOf:
        - title: Service SLO
          required:
            - name
            - serviceName
            - status
            - description
            - targetPercentage
            - sliType
            - filters
            - period
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
              example: '2021-01-01T00:00:00.000Z'
            description:
              type: string
              example: slo_description
            filters:
              type: array
              items:
                $ref: '#/components/schemas/SliFilter'
            id:
              type: string
              example: slo_id
            latencySli:
              $ref: '#/components/schemas/LatencySli'
            name:
              type: string
              example: slo_name
            period:
              $ref: '#/components/schemas/SloPeriod'
            remainingErrorBudgetPercentage:
              type: integer
              format: int64
              example: 1
            serviceName:
              type: string
              example: service_name
            status:
              $ref: '#/components/schemas/services.v1.SloStatus'
            targetPercentage:
              type: integer
              format: int64
              example: 99
          additionalProperties: false
          description: >-
            This data structure represents a Service Level Objective (SLO) in
            Coralogix APM.
          externalDocs:
            description: Find out more about SLOs in Coralogix APM
            url: >-
              https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
        - title: Service SLO
          required:
            - name
            - serviceName
            - status
            - description
            - targetPercentage
            - sliType
            - filters
            - period
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
              example: '2021-01-01T00:00:00.000Z'
            description:
              type: string
              example: slo_description
            errorSli:
              $ref: '#/components/schemas/ErrorSli'
            filters:
              type: array
              items:
                $ref: '#/components/schemas/SliFilter'
            id:
              type: string
              example: slo_id
            name:
              type: string
              example: slo_name
            period:
              $ref: '#/components/schemas/SloPeriod'
            remainingErrorBudgetPercentage:
              type: integer
              format: int64
              example: 1
            serviceName:
              type: string
              example: service_name
            status:
              $ref: '#/components/schemas/services.v1.SloStatus'
            targetPercentage:
              type: integer
              format: int64
              example: 99
          additionalProperties: false
          description: >-
            This data structure represents a Service Level Objective (SLO) in
            Coralogix APM.
          externalDocs:
            description: Find out more about SLOs in Coralogix APM
            url: >-
              https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
    SetCustomPresetAsDefaultRequest:
      type: object
      properties:
        id:
          type: string
    SetCustomPresetAsDefaultResponse:
      type: object
    SetDailyQuotaRequest:
      type: object
      properties:
        targetDailyQuota:
          type: number
          format: float
        teamId:
          $ref: '#/components/schemas/v2.TeamId'
    SetDailyQuotaResponse:
      type: object
    SetExternalTargetRequest:
      oneOf:
        - title: Set External Target Request
          required:
            - isActive
            - targetSpec
            - companyId
          type: object
          properties:
            companyId:
              type: integer
              format: int64
              example: true
            isActive:
              type: boolean
              example: true
            s3:
              $ref: '#/components/schemas/S3TargetSpec'
          additionalProperties: false
          description: >-
            This data structure is obtained after setting an external storage
            target for logs.
          externalDocs:
            description: Find out more about archives
            url: >-
              https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
        - title: Set External Target Request
          required:
            - isActive
            - targetSpec
            - companyId
          type: object
          properties:
            companyId:
              type: integer
              format: int64
              example: true
            ibmCos:
              $ref: '#/components/schemas/IBMCosTargetSpec'
            isActive:
              type: boolean
              example: true
          additionalProperties: false
          description: >-
            This data structure is obtained after setting an external storage
            target for logs.
          externalDocs:
            description: Find out more about archives
            url: >-
              https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    SetExternalTargetResponse:
      title: Set Target Response
      required:
        - target
      type: object
      properties:
        target:
          $ref: '#/components/schemas/Target'
      description: >-
        This data structure is obtained after setting an external storage target
        for logs.
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    SetIDPParametersRequest:
      title: Set IDP Parameters Request
      required:
        - teamId
        - params
      type: object
      properties:
        params:
          $ref: '#/components/schemas/IDPParameters'
        teamId:
          type: integer
          format: int64
      description: >-
        This data structure is used to set the parameters of a SAML identity
        provider
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    SetIDPParametersResponse:
      type: object
    SetPresetAsDefaultRequest:
      title: Set Preset As Default Request
      type: object
      properties:
        id:
          type: string
      description: Request to set custom or system preset as default
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    SetPresetAsDefaultResponse:
      type: object
    SetTargetRequest:
      oneOf:
        - title: Set Target Response
          required:
            - isActive
            - targetSpec
          type: object
          properties:
            isActive:
              type: boolean
              example: true
            s3:
              $ref: '#/components/schemas/S3TargetSpec'
          additionalProperties: false
          description: This data structure is used to set a storage target for logs.
          externalDocs:
            description: Find out more about archives
            url: >-
              https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
        - title: Set Target Response
          required:
            - isActive
            - targetSpec
          type: object
          properties:
            ibmCos:
              $ref: '#/components/schemas/IBMCosTargetSpec'
            isActive:
              type: boolean
              example: true
          additionalProperties: false
          description: This data structure is used to set a storage target for logs.
          externalDocs:
            description: Find out more about archives
            url: >-
              https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    SetTargetResponse:
      title: Set Target Response
      required:
        - target
      type: object
      properties:
        target:
          $ref: '#/components/schemas/Target'
      description: This data structure is obtained after setting a storage target for logs.
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    SetTeamGroupScopeRequest:
      title: SetTeamGroupScopeRequest
      type: object
      properties:
        groupId:
          $ref: '#/components/schemas/TeamGroupId'
        scopeFilters:
          $ref: '#/components/schemas/ScopeFilters'
      description: >-
        Request message for setting scope filters (subsystems and applications)
        for a team group to control access permissions
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    SetTeamGroupScopeResponse:
      title: SetTeamGroupScopeResponse
      type: object
      properties:
        scopeId:
          $ref: '#/components/schemas/ScopeId'
      description: >-
        Response message containing the ID of the newly created or updated scope
        for a team group
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    SeverityConstraint:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Value'
    SharedActionsOrderEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: integer
          format: int64
    SingleBooleanValue:
      title: Single boolean value
      type: object
      properties:
        defaultValue:
          type: boolean
      additionalProperties: false
      externalDocs:
        url: ''
    SingleStringValue:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/StringValueLabel'
    SingleValue:
      title: Single value
      type: object
      properties:
        defaultValue:
          type: string
      additionalProperties: false
      externalDocs:
        url: ''
    SlackConfig:
      title: Slack configuration
      type: object
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        digests:
          type: array
          items:
            $ref: '#/components/schemas/Digest'
      externalDocs:
        url: ''
    SliFilter:
      title: SLI Filter
      required:
        - field
        - compareType
        - fieldValues
      type: object
      properties:
        compareType:
          $ref: '#/components/schemas/CompareType'
        field:
          type: string
          example: field_name
        fieldValues:
          type: array
          items:
            type: string
            example:
              - value1
              - value2
      description: >-
        This data structure represents a filter for a Service Level Indicator
        (SLI) in Coralogix APM.
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
    SliMetricType:
      enum:
        - SLI_METRIC_TYPE_UNSPECIFIED
        - SLI_METRIC_TYPE_ERROR
        - SLI_METRIC_TYPE_LATENCY
        - SLI_METRIC_TYPE_CUSTOM
      type: string
    Slo:
      oneOf:
        - title: Slo
          required:
            - name
            - targetThresholdPercentage
            - window
            - sli
          type: object
          properties:
            createTime:
              type: string
              format: date-time
            creator:
              type: string
              example: test@domain.com
            description:
              type: string
              example: A brief description of my SLO
            grouping:
              $ref: '#/components/schemas/v1.Grouping'
            id:
              type: string
              example: b11919d5-ef85-4bb1-8655-02640dbe94d9
            labels:
              type: object
              additionalProperties:
                type: string
            name:
              type: string
              example: Example Slo Name
            requestBasedMetricSli:
              $ref: '#/components/schemas/RequestBasedMetricSli'
            revision:
              $ref: '#/components/schemas/v1.Revision'
            sloTimeFrame:
              $ref: '#/components/schemas/SloTimeFrame'
            targetThresholdPercentage:
              type: number
              format: float
              example: 99.999
            type:
              type: string
              example: request
            updateTime:
              type: string
              format: date-time
          additionalProperties: false
          description: Definition of an SLO
          externalDocs:
            url: ''
        - title: Slo
          required:
            - name
            - targetThresholdPercentage
            - window
            - sli
          type: object
          properties:
            createTime:
              type: string
              format: date-time
            creator:
              type: string
              example: test@domain.com
            description:
              type: string
              example: A brief description of my SLO
            grouping:
              $ref: '#/components/schemas/v1.Grouping'
            id:
              type: string
              example: b11919d5-ef85-4bb1-8655-02640dbe94d9
            labels:
              type: object
              additionalProperties:
                type: string
            name:
              type: string
              example: Example Slo Name
            revision:
              $ref: '#/components/schemas/v1.Revision'
            sloTimeFrame:
              $ref: '#/components/schemas/SloTimeFrame'
            targetThresholdPercentage:
              type: number
              format: float
              example: 99.999
            type:
              type: string
              example: request
            updateTime:
              type: string
              format: date-time
            windowBasedMetricSli:
              $ref: '#/components/schemas/WindowBasedMetricSli'
          additionalProperties: false
          description: Definition of an SLO
          externalDocs:
            url: ''
    Slo.LabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    SloAlertValidityResult:
      type: object
      properties:
        alertVersionId:
          type: string
        errorMessage:
          type: string
        id:
          type: string
        name:
          type: string
      additionalProperties: false
    SloBurnRateThresholdNotification:
      type: object
      properties:
        fromTimestamp:
          type: string
          format: date-time
        pctOverThreshold:
          type: number
          format: double
        shortWindow:
          $ref: '#/components/schemas/SloShortWindowNotification'
        toTimestamp:
          type: string
          format: date-time
      additionalProperties: false
    SloConstantFilterField:
      enum:
        - SLO_CONST_FILTER_FIELD_UNSPECIFIED
        - SLO_CONST_FILTER_FIELD_USER_NAME
        - SLO_CONST_FILTER_FIELD_SLO_NAME
      type: string
    SloData:
      type: object
      properties:
        incompleteData:
          type: boolean
        minCompliance:
          type: number
          format: float
        minRemainingErrorBudget:
          type: number
          format: float
        statusCount:
          type: array
          items:
            $ref: '#/components/schemas/SloStatusCount'
      additionalProperties: false
    SloError:
      type: object
      properties:
        errorDetails:
          $ref: '#/components/schemas/ErrorDetails'
        errorType:
          $ref: '#/components/schemas/ErrorType'
      additionalProperties: false
    SloErrorBudgetThresholdNotification:
      type: object
      properties:
        fromTimestamp:
          type: string
          format: date-time
        pctOverThreshold:
          type: number
          format: double
        toTimestamp:
          type: string
          format: date-time
    SloExecutionRequest:
      oneOf:
        - title: SloExecutionRequest
          required:
            - request
          type: object
          properties:
            createSloRequest:
              $ref: '#/components/schemas/CreateSloRequest'
          additionalProperties: false
          description: Request for executing an SLO operation.
          externalDocs:
            url: ''
        - title: SloExecutionRequest
          required:
            - request
          type: object
          properties:
            replaceSloRequest:
              $ref: '#/components/schemas/ReplaceSloRequest'
          additionalProperties: false
          description: Request for executing an SLO operation.
          externalDocs:
            url: ''
        - title: SloExecutionRequest
          required:
            - request
          type: object
          properties:
            deleteSloRequest:
              $ref: '#/components/schemas/DeleteSloRequest'
          additionalProperties: false
          description: Request for executing an SLO operation.
          externalDocs:
            url: ''
    SloExecutionResponse:
      oneOf:
        - title: SloExecutionResponse
          type: object
          properties:
            createSloResponse:
              $ref: '#/components/schemas/CreateSloResponse'
          additionalProperties: false
          description: Response for an executed SLO operation.
          externalDocs:
            url: ''
        - title: SloExecutionResponse
          type: object
          properties:
            replaceSloResponse:
              $ref: '#/components/schemas/ReplaceSloResponse'
          additionalProperties: false
          description: Response for an executed SLO operation.
          externalDocs:
            url: ''
        - title: SloExecutionResponse
          type: object
          properties:
            deleteSloResponse:
              $ref: '#/components/schemas/DeleteSloResponse'
          additionalProperties: false
          description: Response for an executed SLO operation.
          externalDocs:
            url: ''
    SloFilter:
      title: SloFilter
      required:
        - field
        - predicate
      type: object
      properties:
        field:
          $ref: '#/components/schemas/SloFilterField'
        predicate:
          $ref: '#/components/schemas/SloFilterPredicate'
      description: A filter for SLOs, consisting of a field and a predicate
      externalDocs:
        url: ''
    SloFilterField:
      oneOf:
        - title: SloFilterField
          type: object
          properties:
            constFilter:
              $ref: '#/components/schemas/SloConstantFilterField'
          additionalProperties: false
          description: Field used for filtering SLOs
          externalDocs:
            url: ''
        - title: SloFilterField
          type: object
          properties:
            labelName:
              type: string
              example: environment
          additionalProperties: false
          description: Field used for filtering SLOs
          externalDocs:
            url: ''
    SloFilterPredicate:
      title: SloFilterPredicate
      type: object
      properties:
        is:
          $ref: '#/components/schemas/IsFilterPredicate'
      additionalProperties: false
      description: Predicate used for filtering SLOs
      externalDocs:
        url: ''
    SloFilters:
      title: SloFilters
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/SloFilter'
      description: A collection of filters for SLOs
      externalDocs:
        url: ''
    SloHubRow:
      type: object
      properties:
        errorMessage:
          type: string
          deprecated: true
        slo:
          $ref: '#/components/schemas/Slo'
        sloData:
          $ref: '#/components/schemas/SloData'
        sloError:
          $ref: '#/components/schemas/SloError'
      additionalProperties: false
    SloMetricFilter:
      type: object
      properties:
        promql:
          type: string
      additionalProperties: false
    SloMetricMissingValues:
      oneOf:
        - type: object
          properties:
            replaceWithZero:
              type: boolean
          additionalProperties: false
        - type: object
          properties:
            minNonNullValuesPct:
              type: integer
              format: int64
          additionalProperties: false
    SloMetricThresholdConditionType:
      enum:
        - METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
        - METRIC_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_EQUALS
      type: string
    SloMetricTimeWindow:
      type: object
      properties:
        sloMetricTimeWindowSpecificValue:
          $ref: '#/components/schemas/SloMetricTimeWindowValue'
      additionalProperties: false
    SloMetricTimeWindowValue:
      enum:
        - SLO_METRIC_TIME_WINDOW_VALUE_UNSPECIFIED
        - SLO_METRIC_TIME_WINDOW_VALUE_1_MINUTE
      type: string
    SloPeriod:
      enum:
        - SLO_PERIOD_UNSPECIFIED
        - SLO_PERIOD_7_DAYS
        - SLO_PERIOD_14_DAYS
        - SLO_PERIOD_30_DAYS
      type: string
    SloPermutationData:
      oneOf:
        - type: object
          properties:
            compliance:
              type: number
              format: float
            group:
              $ref: '#/components/schemas/GroupValue'
            incompleteData:
              type: boolean
            remainingErrorBudget:
              type: number
              format: float
            requestBasedPermutationData:
              $ref: '#/components/schemas/RequestBasedPermutationData'
            status:
              $ref: '#/components/schemas/slo.v1.SloStatus'
          additionalProperties: false
        - type: object
          properties:
            compliance:
              type: number
              format: float
            group:
              $ref: '#/components/schemas/GroupValue'
            incompleteData:
              type: boolean
            remainingErrorBudget:
              type: number
              format: float
            status:
              $ref: '#/components/schemas/slo.v1.SloStatus'
            windowBasedPermutationData:
              $ref: '#/components/schemas/WindowBasedPermutationData'
          additionalProperties: false
    SloShortWindowNotification:
      type: object
      properties:
        pctOverThreshold:
          type: number
          format: double
    SloStatusCount:
      type: object
      properties:
        count:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/slo.v1.SloStatus'
    SloThresholdCondition:
      title: SLO Threshold Condition
      required:
        - threshold
      type: object
      properties:
        threshold:
          type: number
          format: double
      description: Condition for the SLO threshold rule
      externalDocs:
        url: ''
    SloThresholdRule:
      title: SLO Threshold Rule
      required:
        - condition
        - override
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/SloThresholdCondition'
        override:
          $ref: '#/components/schemas/AlertDefOverride'
      description: SLO threshold rule definition
      externalDocs:
        url: ''
    SloThresholdType:
      oneOf:
        - title: SLO Threshold Type
          required:
            - sloDefinition
          type: object
          properties:
            errorBudget:
              $ref: '#/components/schemas/ErrorBudgetThreshold'
            sloDefinition:
              $ref: '#/components/schemas/v3.SloDefinition'
          additionalProperties: false
          description: SLO threshold type definition
          externalDocs:
            url: ''
        - title: SLO Threshold Type
          required:
            - sloDefinition
          type: object
          properties:
            burnRate:
              $ref: '#/components/schemas/BurnRateThreshold'
            sloDefinition:
              $ref: '#/components/schemas/v3.SloDefinition'
          additionalProperties: false
          description: SLO threshold type definition
          externalDocs:
            url: ''
    SloTimeFrame:
      enum:
        - SLO_TIME_FRAME_UNSPECIFIED
        - SLO_TIME_FRAME_7_DAYS
        - SLO_TIME_FRAME_14_DAYS
        - SLO_TIME_FRAME_21_DAYS
        - SLO_TIME_FRAME_28_DAYS
      type: string
    SlosEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/ServiceSlo'
    SortByType:
      enum:
        - SORT_BY_TYPE_UNSPECIFIED
        - SORT_BY_TYPE_VALUE
        - SORT_BY_TYPE_NAME
      type: string
    SortOrder:
      enum:
        - SORT_ORDER_DESCENDING_OR_UNSPECIFIED
        - SORT_ORDER_ASCENDING
      type: string
    SourceEntityLabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/EntityLabelValues'
    SourceMapMetadata:
      title: Source map metadata
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        isUploadedSuccessful:
          type: boolean
      externalDocs:
        url: ''
    SpanField:
      oneOf:
        - type: object
          properties:
            metadataField:
              $ref: '#/components/schemas/MetadataField'
          additionalProperties: false
        - type: object
          properties:
            tagField:
              type: string
          additionalProperties: false
        - type: object
          properties:
            processTagField:
              type: string
          additionalProperties: false
    SpanFieldSource:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/SpanField'
    SpanObservationField:
      type: object
      properties:
        keypath:
          type: array
          items:
            type: string
        relationType:
          $ref: '#/components/schemas/SpanRelationType'
        scope:
          $ref: '#/components/schemas/DatasetScope'
    SpanRelationType:
      enum:
        - SPAN_RELATION_TYPE_NONE_UNSPECIFIED
        - SPAN_RELATION_TYPE_OTHER
        - SPAN_RELATION_TYPE_PARENT
        - SPAN_RELATION_TYPE_ROOT
      type: string
    SpanRules:
      type: object
      properties:
        actionRule:
          $ref: '#/components/schemas/quota.v1.Rule'
        serviceRule:
          $ref: '#/components/schemas/quota.v1.Rule'
        tagRules:
          type: array
          items:
            $ref: '#/components/schemas/TagRule'
      additionalProperties: false
    SpanTimeRange:
      type: object
      properties:
        end:
          type: string
          format: date-time
        start:
          type: string
          format: date-time
    Spans:
      title: SpansQuery
      type: object
      properties:
        aggregation:
          type: array
          items:
            $ref: '#/components/schemas/LogsAggregation'
        dataModeType:
          $ref: '#/components/schemas/widgets.common.DataModeType'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/SpansFilter'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/SpanObservationField'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
      description: A spans variant of the query
      externalDocs:
        url: ''
    SpansAggregation:
      oneOf:
        - type: object
          properties:
            metricAggregation:
              $ref: '#/components/schemas/MetricAggregation'
          additionalProperties: false
        - type: object
          properties:
            dimensionAggregation:
              $ref: '#/components/schemas/DimensionAggregation'
          additionalProperties: false
    SpansAvro:
      type: object
    SpansCount:
      title: Spans Count
      type: object
      properties:
        errorSpanCount:
          type: string
          format: int64
          example: 10
        lowErrorSpanCount:
          type: string
          format: int64
          example: 5
        lowSuccessSpanCount:
          type: string
          format: int64
          example: 50
        mediumErrorSpanCount:
          type: string
          format: int64
          example: 20
        mediumSuccessSpanCount:
          type: string
          format: int64
          example: 200
        successSpanCount:
          type: string
          format: int64
          example: 100
        timestamp:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
      description: This data structure represents a spans count.
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    SpansFilter:
      title: SpansFilter
      type: object
      properties:
        field:
          $ref: '#/components/schemas/SpanField'
        observationField:
          $ref: '#/components/schemas/SpanObservationField'
        operator:
          $ref: '#/components/schemas/Filter.Operator'
      description: This data structure represents the filter criteria for spans.
      externalDocs:
        url: ''
    SpansQuery.Aggregation:
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/SpansAggregation'
        id:
          type: string
          description: Aggregation unique identifier
          example:
            value: 52d192ac-a28f-4c51-97f5-5ba004249ba1
        isVisible:
          type: boolean
          description: Whether the aggregation is visible in the table
        name:
          type: string
          description: Aggregation name
    SpansQuery.Grouping:
      type: object
      properties:
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/SpansQuery.Aggregation'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/SpanField'
        groupBys:
          type: array
          items:
            $ref: '#/components/schemas/SpanObservationField'
    SpansSource:
      type: object
      properties:
        dataModeType:
          $ref: '#/components/schemas/v1.common.DataModeType'
        labelFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        luceneQuery:
          $ref: '#/components/schemas/LuceneQuery'
        messageTemplate:
          type: string
        strategy:
          $ref: '#/components/schemas/SpansSource.Strategy'
    SpansSource.Strategy:
      oneOf:
        - type: object
          properties:
            instant:
              $ref: '#/components/schemas/SpansSource.Strategy.Instant'
          additionalProperties: false
        - type: object
          properties:
            range:
              $ref: '#/components/schemas/SpansSource.Strategy.Range'
          additionalProperties: false
        - type: object
          properties:
            duration:
              $ref: '#/components/schemas/SpansSource.Strategy.Duration'
          additionalProperties: false
    SpansSource.Strategy.Duration:
      type: object
      properties:
        durationField:
          $ref: '#/components/schemas/ObservationField'
        startTimestampField:
          $ref: '#/components/schemas/ObservationField'
    SpansSource.Strategy.Instant:
      type: object
      properties:
        timestampField:
          $ref: '#/components/schemas/ObservationField'
    SpansSource.Strategy.Range:
      type: object
      properties:
        endTimestampField:
          $ref: '#/components/schemas/ObservationField'
        startTimestampField:
          $ref: '#/components/schemas/ObservationField'
    SpecialRatioValues:
      enum:
        - SPECIAL_RATIO_VALUES_INFINITY_OR_UNSPECIFIED
      type: string
    SpecificWidgets:
      type: object
      properties:
        widgetIds:
          type: array
          items:
            type: string
    StartTimeMetric:
      type: object
    Stat:
      type: object
      properties:
        allowAbbreviation:
          type: boolean
          description: Whether to render numeric value without abbreviation
          example: false
        categoryFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        customUnit:
          type: string
          description: >-
            Custom unit (requires to have unit field set as UNIT_CUSTOM to take
            effect)
          example:
            value: rpm
        decimalPrecision:
          type: integer
          description: >-
            Number indicating the decimal precision of the numeric values,
            within range 0-15
          format: int32
          example: 2
        displaySeriesName:
          type: boolean
          description: >-
            (multi-stat display only) Whether to show the series names above the
            value
        legend:
          $ref: '#/components/schemas/Legend'
        legendBy:
          $ref: '#/components/schemas/LegendBy'
        max:
          type: number
          description: >-
            A maximum gauge value used in percentage threshold calculation and
            for visual value representation
          format: double
          example: 150000
        min:
          type: number
          description: >-
            A minimum gauge value used in percentage threshold calculation and
            for visual value representation
          format: double
          example: 0
        thresholdBy:
          $ref: '#/components/schemas/common.ThresholdBy'
        thresholdType:
          $ref: '#/components/schemas/ThresholdType'
        thresholds:
          type: array
          items:
            $ref: '#/components/schemas/common.Threshold'
        unit:
          $ref: '#/components/schemas/common.Unit'
        valueField:
          $ref: '#/components/schemas/ObservationField'
    StaticSource:
      type: object
      properties:
        allOption:
          $ref: '#/components/schemas/AllOption'
        values:
          type: array
          items:
            $ref: '#/components/schemas/ValueLabel'
        valuesOrderDirection:
          $ref: '#/components/schemas/OrderDirection'
    Status:
      type: object
      properties:
        code:
          type: integer
          format: int32
        details:
          type: array
          items:
            type: object
        message:
          type: string
    StatusCount:
      title: Status count
      type: object
      properties:
        count:
          type: integer
          description: The count for this alert status
          format: int64
          example: 15
        status:
          $ref: '#/components/schemas/AlertDefStatus'
      description: Count for a specific alert status
      externalDocs:
        url: ''
    StringList:
      title: String list
      type: object
      properties:
        values:
          type: array
          items:
            type: string
      externalDocs:
        url: ''
    StringValueLabel:
      type: object
      properties:
        label:
          type: string
        value:
          type: string
    SubsystemNameConstraint:
      type: object
      properties:
        value:
          type: string
    Sum:
      type: object
      properties:
        field:
          type: string
        observationField:
          $ref: '#/components/schemas/ObservationField'
    SuspiciousIpType:
      type: object
    SyncRumDataRequest:
      title: Sync RUM data request
      type: object
      properties:
        force:
          type: boolean
      externalDocs:
        url: ''
    SyncRumDataResponse:
      title: Sync RUM data response
      required:
        - syncedAt
      type: object
      properties:
        syncExecuted:
          type: boolean
        syncedAt:
          type: string
          format: date-time
      externalDocs:
        url: ''
    Table:
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: '#/components/schemas/Table.Column'
    Table.Column:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/ObservationField'
    TableRow:
      type: object
      properties:
        queries:
          type: array
          items:
            $ref: '#/components/schemas/MeasurementQuery'
    TagRule:
      type: object
      properties:
        ruleTypeId:
          $ref: '#/components/schemas/RuleTypeId'
        tagName:
          type: string
        tagValue:
          type: string
    TagsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    Target:
      oneOf:
        - title: Target
          required:
            - targetSpecarchiveSpec
          type: object
          properties:
            archiveSpec:
              $ref: '#/components/schemas/ArchiveSpec'
            s3:
              $ref: '#/components/schemas/S3TargetSpec'
          additionalProperties: false
          description: This data structure represents a target to archive logs.
          externalDocs:
            description: Find out more about archives
            url: >-
              https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
        - title: Target
          required:
            - targetSpecarchiveSpec
          type: object
          properties:
            archiveSpec:
              $ref: '#/components/schemas/ArchiveSpec'
            ibmCos:
              $ref: '#/components/schemas/IBMCosTargetSpec'
          additionalProperties: false
          description: This data structure represents a target to archive logs.
          externalDocs:
            description: Find out more about archives
            url: >-
              https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    TargetDomain:
      enum:
        - ACTION
        - ALERT
        - ENRICHMENT
        - GRAFANA_DASHBOARD
        - KIBANA_DASHBOARD
        - PARSING_RULE
        - SAVED_VIEW
        - CX_CUSTOM_DASHBOARD
        - METRICS_RULE_GROUP
        - EVENTS_TO_METRICS
        - ALERT_V3
      type: string
    TeamCount:
      type: object
      properties:
        teamId:
          $ref: '#/components/schemas/v2.TeamId'
        teamMemberCount:
          type: integer
          format: int64
    TeamGroup:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        description:
          type: string
        externalId:
          type: string
        groupId:
          $ref: '#/components/schemas/TeamGroupId'
        groupOrigin:
          $ref: '#/components/schemas/GroupOrigin'
        groupType:
          $ref: '#/components/schemas/GroupType'
        name:
          type: string
        nextGenScopeId:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        scope:
          $ref: '#/components/schemas/permissions.v1.Scope'
        teamId:
          $ref: '#/components/schemas/permissions.v1.TeamId'
        updatedAt:
          type: string
          format: date-time
      additionalProperties: false
    TeamGroupId:
      title: TeamGroupId
      type: object
      properties:
        id:
          type: integer
          format: int64
      description: >-
        This data structure represents the information associated with a team
        group.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    TeamGroupSummary:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/TeamGroupId'
        name:
          type: string
        userCount:
          type: integer
          format: int64
    TemplatedConnectorConfigField:
      type: object
      properties:
        fieldName:
          type: string
        template:
          type: string
    TenantConfig:
      oneOf:
        - type: object
          properties:
            bucketName:
              type: string
              deprecated: true
            disabled:
              type: boolean
            ibm:
              $ref: '#/components/schemas/IbmConfig'
            indexVersion:
              type: integer
              format: int64
            prefix:
              type: string
            region:
              type: string
              deprecated: true
            retentionPolicy:
              type: array
              items:
                $ref: '#/components/schemas/RetentionPolicy'
            tenantId:
              type: integer
              format: int64
          additionalProperties: false
        - type: object
          properties:
            bucketName:
              type: string
              deprecated: true
            disabled:
              type: boolean
            indexVersion:
              type: integer
              format: int64
            prefix:
              type: string
            region:
              type: string
              deprecated: true
            retentionPolicy:
              type: array
              items:
                $ref: '#/components/schemas/RetentionPolicy'
            s3:
              $ref: '#/components/schemas/S3Config'
            tenantId:
              type: integer
              format: int64
          additionalProperties: false
    TenantConfigV2:
      oneOf:
        - type: object
          properties:
            disabled:
              type: boolean
            ibm:
              $ref: '#/components/schemas/IbmConfigV2'
            prefix:
              type: string
            retentionPolicy:
              $ref: '#/components/schemas/RetentionPolicyRequest'
            tenantId:
              type: integer
              format: int64
          additionalProperties: false
        - type: object
          properties:
            disabled:
              type: boolean
            prefix:
              type: string
            retentionPolicy:
              $ref: '#/components/schemas/RetentionPolicyRequest'
            s3:
              $ref: '#/components/schemas/S3Config'
            tenantId:
              type: integer
              format: int64
          additionalProperties: false
    Terraform:
      title: Terraform
      type: object
      properties:
        configurationBlocks:
          type: array
          items:
            $ref: '#/components/schemas/ConfigurationBlock'
      description: This data structure represents a Terraform integration.
      externalDocs:
        url: ''
    TestConnectorConfigRequest:
      title: Test Connector Config Request
      type: object
      properties:
        entityType:
          $ref: '#/components/schemas/notification_center.EntityType'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/notification_center.ConnectorConfigField'
        payloadType:
          type: string
          example: default
        type:
          $ref: '#/components/schemas/ConnectorType'
      additionalProperties: false
      description: Request to test a connector configuration
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    TestConnectorConfigResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TestResult'
    TestContextualDataIntegrationRequest:
      title: Test contextual data integration request
      required:
        - integrationData
      type: object
      properties:
        integrationData:
          $ref: '#/components/schemas/IntegrationMetadata'
        integrationId:
          type: string
      externalDocs:
        url: ''
    TestContextualDataIntegrationResponse:
      title: Test contextual data integration response
      required:
        - result
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TestIntegrationResult'
      externalDocs:
        url: ''
    TestDestinationRequest:
      type: object
      properties:
        connectorConfigFields:
          type: array
          items:
            $ref: '#/components/schemas/TemplatedConnectorConfigField'
        connectorId:
          type: string
        entitySubType:
          type: string
          example: logsImmediateResolved
        entityType:
          $ref: '#/components/schemas/notification_center.EntityType'
        messageConfigFields:
          type: array
          items:
            $ref: '#/components/schemas/notification_center.MessageConfigField'
        payloadType:
          type: string
          example: default
        presetId:
          type: string
      additionalProperties: false
    TestDestinationResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TestResult'
    TestExistingConnectorRequest:
      type: object
      properties:
        connectorId:
          type: string
        payloadType:
          type: string
          example: default
    TestExistingConnectorResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TestResult'
    TestExistingOutgoingWebhookRequest:
      title: Test existing outgoing webhook request
      required:
        - id
      type: object
      properties:
        id:
          type: string
          example: example_id
      externalDocs:
        url: ''
    TestExistingPresetRequest:
      type: object
      properties:
        connectorId:
          type: string
        entitySubType:
          type: string
          example: logsImmediateResolved
        entityType:
          $ref: '#/components/schemas/notification_center.EntityType'
        presetId:
          type: string
      additionalProperties: false
    TestExistingPresetResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TestResult'
    TestExtensionRevisionRequest:
      title: Test extension revision request
      required:
        - extensionData
      type: object
      properties:
        cleanupAfterTest:
          type: boolean
        extensionData:
          $ref: '#/components/schemas/ExtensionData'
      externalDocs:
        url: ''
    TestExtensionRevisionResponse:
      title: Test extension revision response
      type: object
      externalDocs:
        url: ''
    TestIntegrationRequest:
      title: Test integration request
      required:
        - integrationData
      type: object
      properties:
        integrationData:
          $ref: '#/components/schemas/IntegrationMetadata'
        integrationId:
          type: string
      externalDocs:
        url: ''
    TestIntegrationResponse:
      title: Test integration response
      required:
        - result
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TestIntegrationResult'
      externalDocs:
        url: ''
    TestIntegrationResult:
      oneOf:
        - title: Test integration result
          type: object
          properties:
            success:
              $ref: '#/components/schemas/TestIntegrationResult.Success'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Test integration result
          type: object
          properties:
            failure:
              $ref: '#/components/schemas/TestIntegrationResult.Failure'
          additionalProperties: false
          externalDocs:
            url: ''
    TestIntegrationResult.Failure:
      title: Failure
      type: object
      properties:
        errorMessage:
          type: string
      externalDocs:
        url: ''
    TestIntegrationResult.Success:
      title: Success
      type: object
      externalDocs:
        url: ''
    TestOutgoingWebhookRequest:
      title: Test outgoing webhook request
      required:
        - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/OutgoingWebhookInputData'
      externalDocs:
        url: ''
    TestOutgoingWebhookResponse:
      oneOf:
        - title: Test outgoing webhook response
          type: object
          properties:
            success:
              $ref: '#/components/schemas/TestOutgoingWebhookResponse.Success'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Test outgoing webhook response
          type: object
          properties:
            failure:
              $ref: '#/components/schemas/TestOutgoingWebhookResponse.Failure'
          additionalProperties: false
          externalDocs:
            url: ''
    TestOutgoingWebhookResponse.Failure:
      title: Test outgoing webhook failure
      required:
        - errorMessage
        - displayMessage
      type: object
      properties:
        displayMessage:
          type: string
          example: example_display_message
        errorMessage:
          type: string
          example: example_error_message
        statusCode:
          type: integer
          format: int64
          example: 400
      additionalProperties: false
      externalDocs:
        url: ''
    TestOutgoingWebhookResponse.Success:
      title: Test outgoing webhook success
      type: object
      externalDocs:
        url: ''
    TestPoliciesResult:
      type: object
      properties:
        matched:
          type: boolean
        metaFieldsValues:
          $ref: '#/components/schemas/LogMetaFieldsValues'
        policy:
          $ref: '#/components/schemas/Policy'
    TestPresetConfigRequest:
      type: object
      properties:
        configOverrides:
          type: array
          items:
            $ref: '#/components/schemas/ConfigOverrides'
        connectorId:
          type: string
        entitySubType:
          type: string
          example: metric
        entityType:
          $ref: '#/components/schemas/notification_center.EntityType'
        parentPresetId:
          type: string
      additionalProperties: false
    TestPresetConfigResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TestResult'
    TestResult:
      oneOf:
        - type: object
          properties:
            success:
              $ref: '#/components/schemas/TestResult.Success'
          additionalProperties: false
        - type: object
          properties:
            failure:
              $ref: '#/components/schemas/TestResult.Failure'
          additionalProperties: false
    TestResult.Failure:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: integer
          format: int64
      additionalProperties: false
    TestResult.Success:
      type: object
    TestRoutingConditionValidRequest:
      title: Test Routing Condition Valid Request
      type: object
      properties:
        entityType:
          $ref: '#/components/schemas/notification_center.EntityType'
        template:
          type: string
          example: alertDef.priority == 'P1'
      description: Request to check that provided routing condition is valid
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    TestRoutingConditionValidResponse:
      oneOf:
        - title: Test Routing Condition Valid Response
          type: object
          properties:
            success:
              $ref: '#/components/schemas/TestRoutingConditionValidResponse.Success'
          additionalProperties: false
          description: Response which specifies condition evaluation result or error
          externalDocs:
            description: Find out more about notification center
            url: >-
              https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
        - title: Test Routing Condition Valid Response
          type: object
          properties:
            failure:
              $ref: '#/components/schemas/TestRoutingConditionValidResponse.Failure'
          additionalProperties: false
          description: Response which specifies condition evaluation result or error
          externalDocs:
            description: Find out more about notification center
            url: >-
              https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    TestRoutingConditionValidResponse.Failure:
      type: object
      properties:
        message:
          type: string
          example: >-
            Invalid condition: condition should be rendered to a boolean value
            (true or false)
    TestRoutingConditionValidResponse.Success:
      type: object
      properties:
        result:
          type: boolean
          example: true
    TestTemplateRenderRequest:
      type: object
      properties:
        entitySubType:
          type: string
          example: logsImmediateResolved
        entityType:
          $ref: '#/components/schemas/notification_center.EntityType'
        template:
          type: string
          example: '{{ alertDef.name }}'
      additionalProperties: false
    TestTemplateRenderResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TestTemplateRenderResult'
    TestTemplateRenderResult:
      oneOf:
        - type: object
          properties:
            success:
              $ref: '#/components/schemas/TestTemplateRenderResult.Success'
          additionalProperties: false
        - type: object
          properties:
            failure:
              $ref: '#/components/schemas/TestTemplateRenderResult.Failure'
          additionalProperties: false
    TestTemplateRenderResult.Failure:
      type: object
      properties:
        message:
          type: string
          example: Template rendering failed
        reason:
          $ref: '#/components/schemas/FailureReason'
    TestTemplateRenderResult.Success:
      type: object
      properties:
        renderedValue:
          type: string
          example: Rendered template result
    TextboxDefaultIntervalValue:
      type: object
      properties:
        value:
          type: string
    TextboxDefaultLuceneValue:
      type: object
      properties:
        dataModeType:
          $ref: '#/components/schemas/v1.common.DataModeType'
        value:
          type: string
    TextboxDefaultNumericValue:
      type: object
      properties:
        isInteger:
          type: boolean
        max:
          type: number
          format: float
        min:
          type: number
          format: float
        value:
          type: number
          format: float
    TextboxDefaultRegexValue:
      type: object
      properties:
        value:
          type: string
    TextboxDefaultStringValue:
      type: object
      properties:
        value:
          type: string
    TextboxDefaultValue:
      oneOf:
        - type: object
          properties:
            singleString:
              type: string
              deprecated: true
          additionalProperties: false
        - type: object
          properties:
            singleNumeric:
              type: number
              format: float
              deprecated: true
          additionalProperties: false
        - type: object
          properties:
            defaultStringValue:
              $ref: '#/components/schemas/TextboxDefaultStringValue'
          additionalProperties: false
        - type: object
          properties:
            defaultNumericValue:
              $ref: '#/components/schemas/TextboxDefaultNumericValue'
          additionalProperties: false
        - type: object
          properties:
            defaultLuceneValue:
              $ref: '#/components/schemas/TextboxDefaultLuceneValue'
          additionalProperties: false
        - type: object
          properties:
            defaultRegexValue:
              $ref: '#/components/schemas/TextboxDefaultRegexValue'
          additionalProperties: false
        - type: object
          properties:
            defaultIntervalValue:
              $ref: '#/components/schemas/TextboxDefaultIntervalValue'
          additionalProperties: false
    TextboxSource:
      type: object
      properties:
        defaultValue:
          $ref: '#/components/schemas/TextboxDefaultValue'
      additionalProperties: false
    ThresholdSymbol:
      enum:
        - THRESHOLD_SYMBOL_UNSPECIFIED
        - THRESHOLD_SYMBOL_GREATER
        - THRESHOLD_SYMBOL_GREATER_OR_EQUAL
        - THRESHOLD_SYMBOL_LESS
        - THRESHOLD_SYMBOL_LESS_OR_EQUAL
        - THRESHOLD_SYMBOL_EQUAL
        - THRESHOLD_SYMBOL_NOT_EQUAL
      type: string
    ThresholdType:
      enum:
        - THRESHOLD_TYPE_UNSPECIFIED
        - THRESHOLD_TYPE_RELATIVE
        - THRESHOLD_TYPE_ABSOLUTE
      type: string
    TimeDuration:
      title: Time duration
      required:
        - duration
        - unit
      type: object
      properties:
        duration:
          type: string
          description: The duration value
          format: uint64
          example: 60
        unit:
          $ref: '#/components/schemas/DurationUnit'
      description: Configuration for time duration
      externalDocs:
        url: ''
    TimeFrame:
      type: object
      properties:
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
    TimeFrameSelect:
      oneOf:
        - type: object
          properties:
            absoluteTimeFrame:
              $ref: '#/components/schemas/TimeFrame'
          additionalProperties: false
        - type: object
          properties:
            relativeTimeFrame:
              type: string
          additionalProperties: false
    TimeOfDay:
      title: Time of day
      required:
        - hours
        - minutes
      type: object
      properties:
        hours:
          type: integer
          format: int32
          example: 14
        minutes:
          type: integer
          format: int32
          example: 30
      description: Represents a specific time in a 24-hour format
      externalDocs:
        url: ''
    TimeRangeWithInterval:
      type: object
      properties:
        fromTimestamp:
          type: string
          format: date-time
        interval:
          $ref: '#/components/schemas/NamedInterval'
        toTimestamp:
          type: string
          format: date-time
    TimeSelection:
      oneOf:
        - type: object
          properties:
            quickSelection:
              $ref: '#/components/schemas/QuickTimeSelection'
          additionalProperties: false
        - type: object
          properties:
            customSelection:
              $ref: '#/components/schemas/CustomTimeSelection'
          additionalProperties: false
    TimeSeries:
      type: object
      properties:
        labels:
          type: object
          additionalProperties:
            type: string
        name:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/DataPoint'
    TimeSeries.LabelsEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    TimeSeriesBars:
      type: object
      properties:
        allowAbbreviation:
          type: boolean
          description: Whether to render numeric value without abbreviation
          example: false
        barValueDisplay:
          $ref: '#/components/schemas/Visualization.BarValueDisplay'
        categoryFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        colorScheme:
          type: string
          description: Applied color scheme for this query, one of the predefined values
          example:
            value: classic
        customUnit:
          type: string
          description: Custom unit (requires to have unit field as 'custom' to take effect)
          example:
            value: rpm
        decimalPrecision:
          type: integer
          description: >-
            Number indicating the decimal precision of the numeric values,
            within range 0-15
          format: int32
          example: 4
        hashColors:
          type: boolean
          description: Whether to ignore color scheme and derive colors from algorithm
          example: false
        legend:
          $ref: '#/components/schemas/Legend'
        maxSlicesPerBar:
          type: integer
          description: How many slices can fit in a single bar
          format: int32
          example:
            value: 8
        scaleType:
          $ref: '#/components/schemas/ScaleType'
        seriesNameTemplate:
          type: string
          description: Custom template for the series name
          example:
            value: Trace of {{ application }}
        sortBy:
          $ref: '#/components/schemas/SortByType'
        temporalField:
          $ref: '#/components/schemas/ObservationField'
        tooltip:
          $ref: '#/components/schemas/TimeSeriesTooltip'
        unit:
          $ref: '#/components/schemas/common.Unit'
        valueFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        yAxisMax:
          type: number
          description: Number indicating the upper band for y axis
          format: float
          example: 1000
        yAxisMin:
          type: number
          description: Number indicating the lower band for y axis
          format: float
          example: -1000
    TimeSeriesLines:
      type: object
      properties:
        allowAbbreviation:
          type: boolean
          description: Whether to render numeric value without abbreviation
          example: false
        categoryFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        colorScheme:
          type: string
          description: Applied color scheme for this query, one of the predefined values
          example:
            value: classic
        connectNulls:
          type: boolean
          description: >-
            Whether the line should remain connected instead of producing
            scattered points when null values are present in between
          example: false
        customUnit:
          type: string
          description: Custom unit (requires to have unit field as 'custom' to take effect)
          example:
            value: rpm
        decimalPrecision:
          type: integer
          description: >-
            Number indicating the decimal precision of the numeric values,
            within range 0-15
          format: int32
          example: 4
        hashColors:
          type: boolean
          description: Whether to ignore color scheme and derive colors from algorithm
          example: false
        legend:
          $ref: '#/components/schemas/Legend'
        scaleType:
          $ref: '#/components/schemas/ScaleType'
        seriesCountLimit:
          type: string
          description: Max count of the series per query
          format: int64
          example:
            value: 50
        seriesNameTemplate:
          type: string
          description: Custom template for the series name
          example:
            value: Trace of {{ application }}
        stackedLine:
          $ref: '#/components/schemas/TimeSeriesLines.StackedLine'
        temporalField:
          $ref: '#/components/schemas/ObservationField'
        tooltip:
          $ref: '#/components/schemas/TimeSeriesTooltip'
        unit:
          $ref: '#/components/schemas/common.Unit'
        valueFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        yAxisMax:
          type: number
          description: Number indicating the upper band for y axis
          format: float
          example: 1000
        yAxisMin:
          type: number
          description: Number indicating the lower band for y axis
          format: float
          example: -1000
    TimeSeriesLines.StackedLine:
      enum:
        - STACKED_LINE_UNSPECIFIED
        - STACKED_LINE_ABSOLUTE
        - STACKED_LINE_RELATIVE
      type: string
    TimeSeriesTooltip:
      type: object
      properties:
        showAllSeries:
          type: boolean
          description: >-
            Type of the tooltip display, can be showing single series value or
            all series values at once
          example: true
        showLabels:
          type: boolean
          example: true
    Timeframe:
      oneOf:
        - type: object
          properties:
            endTime:
              type: string
            startTime:
              type: string
            timezone:
              type: string
          additionalProperties: false
        - type: object
          properties:
            duration:
              $ref: '#/components/schemas/v1.Duration'
            startTime:
              type: string
            timezone:
              type: string
          additionalProperties: false
    TimeframeType:
      enum:
        - TIMEFRAME_TYPE_UNSPECIFIED
        - TIMEFRAME_TYPE_UP_TO
      type: string
    TimestampRange:
      title: TimestampRange
      required:
        - from
        - to
      type: object
      properties:
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
      description: This data structure represents a timestamp range
      externalDocs:
        url: ''
    TogglePolicyRequest:
      type: object
      properties:
        enabled:
          type: boolean
        id:
          type: string
    TogglePolicyResponse:
      type: object
      properties:
        enabled:
          type: boolean
        id:
          type: string
    Token:
      type: object
      properties:
        value:
          type: number
          format: float
    TokenOriginType:
      enum:
        - TOKEN_ORIGIN_TYPE_UNSPECIFIED
        - TOKEN_ORIGIN_TYPE_USER
        - TOKEN_ORIGIN_TYPE_API
      type: string
    Tooltip:
      type: object
      properties:
        showLabels:
          type: boolean
          example: true
        type:
          $ref: '#/components/schemas/TooltipType'
    TooltipType:
      enum:
        - TOOLTIP_TYPE_UNSPECIFIED
        - TOOLTIP_TYPE_ALL
        - TOOLTIP_TYPE_SINGLE
      type: string
    TopBucket:
      type: object
      properties:
        limits:
          type: array
          items:
            type: number
            format: double
        timestamp:
          type: string
          format: date-time
        value:
          type: number
          format: double
    TopkAggregation:
      type: object
      properties:
        aggregation:
          $ref: '#/components/schemas/TopkAggregationType'
        topk:
          type: integer
          format: int64
    TopkAggregationType:
      enum:
        - TOPK_AGGREGATION_TYPE_UNSPECIFIED
        - TOPK_AGGREGATION_TYPE_LAST
        - TOPK_AGGREGATION_TYPE_MAX
        - TOPK_AGGREGATION_TYPE_MIN
        - TOPK_AGGREGATION_TYPE_AVG
      type: string
    TracingFilter:
      title: Tracing filter
      required:
        - filterType
      type: object
      properties:
        simpleFilter:
          $ref: '#/components/schemas/TracingSimpleFilter'
      additionalProperties: false
      description: Filter configuration for tracing-based alerts
      externalDocs:
        url: ''
    TracingFilterOperationType:
      enum:
        - TRACING_FILTER_OPERATION_TYPE_IS_OR_UNSPECIFIED
        - TRACING_FILTER_OPERATION_TYPE_INCLUDES
        - TRACING_FILTER_OPERATION_TYPE_ENDS_WITH
        - TRACING_FILTER_OPERATION_TYPE_STARTS_WITH
        - TRACING_FILTER_OPERATION_TYPE_IS_NOT
      type: string
    TracingFilterType:
      title: Tracing filter type
      required:
        - values
        - operation
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/TracingFilterOperationType'
        values:
          type: array
          items:
            type: string
            description: The values of the label to filter by
            example:
              - value1
              - value2
      description: Filter type for trace entries
      externalDocs:
        url: ''
    TracingImmediateType:
      title: Trace-based immediate alert type
      required:
        - tracingFilter
      type: object
      properties:
        notificationPayloadFilter:
          type: array
          items:
            pattern: ^[a-zA-Z0-9_.]+$
            type: string
            description: Notification payload field filter
            example:
              - obj.field
        tracingFilter:
          $ref: '#/components/schemas/TracingFilter'
      description: Configuration for immediate alerts triggered on trace entries
      externalDocs:
        description: Learn more about trace-based alerts in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/traces/tracing-alerts/
    TracingLabelFilters:
      title: Tracing label filters
      type: object
      properties:
        applicationName:
          type: array
          items:
            $ref: '#/components/schemas/TracingFilterType'
        operationName:
          type: array
          items:
            $ref: '#/components/schemas/TracingFilterType'
        serviceName:
          type: array
          items:
            $ref: '#/components/schemas/TracingFilterType'
        spanFields:
          type: array
          items:
            $ref: '#/components/schemas/TracingSpanFieldsFilterType'
        subsystemName:
          type: array
          items:
            $ref: '#/components/schemas/TracingFilterType'
      description: >-
        Filters for application name, subsystem name, service name, operation
        name and span fields
      externalDocs:
        url: ''
    TracingSimpleFilter:
      title: Simple tracing filter
      required:
        - latencyThresholdMs
      type: object
      properties:
        latencyThresholdMs:
          pattern: ^\d+$
          type: string
          description: The latency threshold to filter traces in milliseconds
          format: uint64
          example: 1000
        tracingLabelFilters:
          $ref: '#/components/schemas/TracingLabelFilters'
      description: Basic filter configuration using a latency threshold and label filters
      externalDocs:
        url: ''
    TracingSpanFieldsFilterType:
      title: Tracing span fields filter type
      required:
        - key
        - filterType
      type: object
      properties:
        filterType:
          $ref: '#/components/schemas/TracingFilterType'
        key:
          pattern: ^\w+\.\w+$
          type: string
          description: The key of the span field to filter by
          example: span.field.key
      description: A filter for span fields in trace entries
      externalDocs:
        url: ''
    TracingThresholdCondition:
      title: Trace-based alert threshold condition
      required:
        - spanAmount
        - timeWindow
        - conditionType
      type: object
      properties:
        conditionType:
          $ref: '#/components/schemas/TracingThresholdConditionType'
        spanAmount:
          pattern: ^\d+?$
          type: number
          description: The threshold value for the alert condition
          format: double
          example: 100
        timeWindow:
          $ref: '#/components/schemas/TracingTimeWindow'
      externalDocs:
        url: ''
    TracingThresholdConditionType:
      enum:
        - TRACING_THRESHOLD_CONDITION_TYPE_MORE_THAN_OR_UNSPECIFIED
      type: string
    TracingThresholdRule:
      title: Trace Threshold Rule
      required:
        - condition
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/TracingThresholdCondition'
      description: A rule for trace-based threshold alerts
      externalDocs:
        url: ''
    TracingThresholdType:
      title: Trace-based threshold alert type
      required:
        - tracingFilter
        - rules
      type: object
      properties:
        notificationPayloadFilter:
          type: array
          items:
            pattern: ^[a-zA-Z0-9_.]+$
            type: string
            description: Notification payload field filter
            example:
              - obj.field
        rules:
          type: array
          items:
            $ref: '#/components/schemas/TracingThresholdRule'
        tracingFilter:
          $ref: '#/components/schemas/TracingFilter'
      description: Configuration for alerts based on trace count thresholds
      externalDocs:
        description: Learn more about trace-based alerts in our documentation
        url: >-
          https://coralogix.com/docs/user-guides/alerting/create-an-alert/traces/tracing-alerts/
    TracingTimeWindow:
      title: Tracing time window
      type: object
      properties:
        tracingTimeWindowValue:
          $ref: '#/components/schemas/TracingTimeWindowValue'
      additionalProperties: false
      externalDocs:
        url: ''
    TracingTimeWindowValue:
      enum:
        - TRACING_TIME_WINDOW_VALUE_MINUTES_5_OR_UNSPECIFIED
        - TRACING_TIME_WINDOW_VALUE_MINUTES_10
        - TRACING_TIME_WINDOW_VALUE_MINUTES_15
        - TRACING_TIME_WINDOW_VALUE_MINUTES_20
        - TRACING_TIME_WINDOW_VALUE_MINUTES_30
        - TRACING_TIME_WINDOW_VALUE_HOUR_1
        - TRACING_TIME_WINDOW_VALUE_HOURS_2
        - TRACING_TIME_WINDOW_VALUE_HOURS_4
        - TRACING_TIME_WINDOW_VALUE_HOURS_6
        - TRACING_TIME_WINDOW_VALUE_HOURS_12
        - TRACING_TIME_WINDOW_VALUE_HOURS_24
        - TRACING_TIME_WINDOW_VALUE_HOURS_36
      type: string
    TypeCount:
      title: Type count
      type: object
      properties:
        count:
          type: integer
          description: The count for this alert type
          format: int64
          example: 42
        type:
          $ref: '#/components/schemas/AlertDefType'
      description: Count for a specific alert type
      externalDocs:
        url: ''
    UUID:
      type: object
      properties:
        value:
          type: string
    UnassignIncidentsRequest:
      title: Unassign incidents request
      required:
        - incidentIds
      type: object
      properties:
        incidentIds:
          type: array
          items:
            type: string
            description: List of incident IDs to unassign
            example:
              - incident_id_1
              - incident_id_2
      description: Request to remove assignments from one or more incidents
      externalDocs:
        url: ''
    UnassignIncidentsResponse:
      title: Unassign incidents response
      required:
        - incidents
      type: object
      properties:
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/Incident'
      description: Response containing the updated incidents after unassignment
      externalDocs:
        url: ''
    UndeployExtensionRequest:
      title: Revert deployment of extension request
      required:
        - id
      type: object
      properties:
        id:
          type: string
        keptExtensionItems:
          type: array
          items:
            type: string
      externalDocs:
        url: ''
    UndeployExtensionResponse:
      title: Revert deployment of extension response
      type: object
      properties:
        extensionDeployment:
          $ref: '#/components/schemas/ExtensionDeployment'
        failedItems:
          type: array
          items:
            $ref: '#/components/schemas/FailedItem'
      additionalProperties: false
      externalDocs:
        url: ''
    UnpinDashboardRequest:
      title: Unpin dashboard request data structure
      required:
        - requestId
        - dashboardId
      type: object
      properties:
        dashboardId:
          type: string
        requestId:
          type: string
      description: This is a request used to unpin a certain dashboard
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    UnpinDashboardResponse:
      title: Unpin dashboard response data structure
      type: object
      description: This is a response received when dashboard has been unpinned
      externalDocs:
        description: Find out more about Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    Untracked:
      title: Untracked
      type: object
      description: This data structure represents an untracked integration.
      externalDocs:
        url: ''
    UpdateAlertSchedulerRuleRequest:
      title: Update alert scheduler rule request data structure
      required:
        - alertSchedulerRule
      type: object
      properties:
        alertSchedulerRule:
          $ref: '#/components/schemas/AlertSchedulerRule'
      description: This is a request sent to update an alert scheduler rule
      externalDocs:
        description: Find out more about alert scheduler rules in our documentation.
        url: >-
          https://coralogix.com/docs/developer-portal/apis/data-management/alert-suppression-rules-api/
    UpdateAlertSchedulerRuleResponse:
      title: Create alert scheduler rule response data structure
      required:
        - alertSchedulerRule
      type: object
      properties:
        alertSchedulerRule:
          $ref: '#/components/schemas/AlertSchedulerRule'
      description: This is a response sent after creating an alert scheduler rule
      externalDocs:
        description: Find out more about alert scheduler rules in our documentation.
        url: >-
          https://coralogix.com/docs/developer-portal/apis/data-management/alert-suppression-rules-api/
    UpdateApiKeyRequest:
      title: Update Api Key Request
      required:
        - keyId
      type: object
      properties:
        isActive:
          type: boolean
          example: true
        keyId:
          type: string
          example: my_key_id
        newName:
          type: string
          example: my_new_name
        permissions:
          $ref: '#/components/schemas/UpdateApiKeyRequest.Permissions'
        presets:
          $ref: '#/components/schemas/Presets'
      additionalProperties: false
      description: This data structure is used to update an API key.
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
    UpdateApiKeyRequest.Permissions:
      title: Permissions
      required:
        - permissions
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
      description: This data structure represents a set of permissions on an API key.
      externalDocs:
        description: Find out more about api keys
        url: >-
          https://coralogix.com/docs/user-guides/account-management/api-keys/api-keys/
    UpdateApiKeyResponse:
      type: object
    UpdateBulkAlertSchedulerRuleRequest:
      title: Update bulk alert scheduler rule request data structure
      required:
        - updateAlertSchedulerRuleRequests
      type: object
      properties:
        updateAlertSchedulerRuleRequests:
          type: array
          items:
            $ref: '#/components/schemas/UpdateAlertSchedulerRuleRequest'
      description: This is a request sent to update multiple alert scheduler rules
      externalDocs:
        description: Find out more about alert scheduler rules in our documentation.
        url: >-
          https://coralogix.com/docs/developer-portal/apis/data-management/alert-suppression-rules-api/
    UpdateBulkAlertSchedulerRuleResponse:
      title: Update bulk alert scheduler rule response data structure
      required:
        - updateSuppressionResponses
      type: object
      properties:
        updateSuppressionResponses:
          type: array
          items:
            $ref: '#/components/schemas/UpdateAlertSchedulerRuleResponse'
      description: This is a response sent after updating multiple alert scheduler rules
      externalDocs:
        description: Find out more about alert scheduler rules in our documentation.
        url: >-
          https://coralogix.com/docs/developer-portal/apis/data-management/alert-suppression-rules-api/
    UpdateContextualDataIntegrationRequest:
      title: Update contextual data integration request
      required:
        - integrationId
        - metadata
      type: object
      properties:
        integrationId:
          type: string
        metadata:
          $ref: '#/components/schemas/IntegrationMetadata'
      externalDocs:
        url: ''
    UpdateContextualDataIntegrationResponse:
      title: Update contextual data integration response
      type: object
      externalDocs:
        url: ''
    UpdateCustomEnrichmentRequest:
      title: Update Custom Enrichment Request
      required:
        - customEnrichmentId
        - name
        - description
        - file
      type: object
      properties:
        customEnrichmentId:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: custom_enrichment_description
        file:
          $ref: '#/components/schemas/File'
        name:
          type: string
          example: custom_enrichment_name
      description: This request data structure is used to update a custom enrichment
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    UpdateCustomEnrichmentResponse:
      title: Update Custom Enrichment Response
      required:
        - customEnrichment
      type: object
      properties:
        customEnrichment:
          $ref: '#/components/schemas/CustomEnrichment'
        message:
          type: string
          example: Custom enrichment updated successfully
      description: >-
        This response data structure is obtained when a custom enrichment is
        updated
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    UpdateDataUsageMetricsExportStatusRequest:
      title: Update Data Usage Metrics Export Status Request
      type: object
      properties:
        enabled:
          type: boolean
          example: true
      description: This data structure is used to update data usage metrics export status.
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    UpdateDataUsageMetricsExportStatusResponse:
      title: Update Data Usage Metrics Export Status Response
      type: object
      properties:
        enabled:
          type: boolean
          example: true
      description: This data structure is used to return data usage metrics export status.
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    UpdateExtensionRequest:
      title: Update extension request
      required:
        - id
        - version
        - itemIds
      type: object
      properties:
        applications:
          type: array
          items:
            type: string
        extensionDeployment:
          $ref: '#/components/schemas/ExtensionDeployment'
        id:
          type: string
        itemIds:
          type: array
          items:
            type: string
        subsystems:
          type: array
          items:
            type: string
        version:
          type: string
      additionalProperties: false
      externalDocs:
        url: ''
    UpdateExtensionResponse:
      title: Update extension response
      required:
        - extensionDeployment
      type: object
      properties:
        extensionDeployment:
          $ref: '#/components/schemas/ExtensionDeployment'
      externalDocs:
        url: ''
    UpdateIntegrationRequest:
      title: Update integration request
      required:
        - id
        - metadata
      type: object
      properties:
        id:
          type: string
        metadata:
          $ref: '#/components/schemas/IntegrationMetadata'
      description: This data structure represents a list of outgoing webhook types.
      externalDocs:
        url: ''
    UpdateIntegrationResponse:
      type: object
    UpdateOutgoingWebhookRequest:
      title: Update outgoing webhook request
      required:
        - id
        - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/OutgoingWebhookInputData'
        id:
          type: string
          example: example_id
      externalDocs:
        url: ''
    UpdateOutgoingWebhookResponse:
      title: Update outgoing webhook response
      type: object
      externalDocs:
        url: ''
    UpdatePolicyRequest:
      oneOf:
        - type: object
          properties:
            applicationRule:
              $ref: '#/components/schemas/quota.v1.Rule'
            archiveRetention:
              $ref: '#/components/schemas/ArchiveRetention'
            description:
              type: string
            enabled:
              type: boolean
            id:
              type: string
            logRules:
              $ref: '#/components/schemas/LogRules'
            name:
              type: string
            priority:
              $ref: '#/components/schemas/quota.v1.Priority'
            subsystemRule:
              $ref: '#/components/schemas/quota.v1.Rule'
          additionalProperties: false
        - type: object
          properties:
            applicationRule:
              $ref: '#/components/schemas/quota.v1.Rule'
            archiveRetention:
              $ref: '#/components/schemas/ArchiveRetention'
            description:
              type: string
            enabled:
              type: boolean
            id:
              type: string
            name:
              type: string
            priority:
              $ref: '#/components/schemas/quota.v1.Priority'
            spanRules:
              $ref: '#/components/schemas/SpanRules'
            subsystemRule:
              $ref: '#/components/schemas/quota.v1.Rule'
          additionalProperties: false
    UpdatePolicyResponse:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/Policy'
    UpdateRequest:
      oneOf:
        - title: Update Tenant Request
          required:
            - retentionDays
            - storageConfig
          type: object
          properties:
            ibm:
              $ref: '#/components/schemas/IbmConfigV2'
            retentionDays:
              type: integer
              format: int64
          additionalProperties: false
          description: This data structure is used to update the configuration of a tenant.
          externalDocs:
            description: Find out more about metrics cost optimization
            url: >-
              https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
        - title: Update Tenant Request
          required:
            - retentionDays
            - storageConfig
          type: object
          properties:
            retentionDays:
              type: integer
              format: int64
            s3:
              $ref: '#/components/schemas/S3Config'
          additionalProperties: false
          description: This data structure is used to update the configuration of a tenant.
          externalDocs:
            description: Find out more about metrics cost optimization
            url: >-
              https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
    UpdateRetentionsRequest:
      title: Update Retentions Request
      required:
        - retentionUpdateElements
      type: object
      properties:
        retentionUpdateElements:
          type: array
          items:
            $ref: '#/components/schemas/RetentionUpdateElement'
      description: This data structure is used to update retentions
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    UpdateRetentionsResponse:
      title: Update Retentions Response
      required:
        - retentions
      type: object
      properties:
        retentions:
          type: array
          items:
            $ref: '#/components/schemas/archive.v1.Retention'
      description: This data structure is obtained after updating retentions
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    UpdateRoleRequest:
      type: object
      properties:
        newDescription:
          type: string
        newName:
          type: string
        newPermissions:
          $ref: '#/components/schemas/v2.Permissions'
        roleId:
          type: integer
          format: int64
      additionalProperties: false
    UpdateRoleResponse:
      type: object
    UpdateRuleGroupRequest:
      type: object
      properties:
        groupId:
          type: string
        ruleGroup:
          $ref: '#/components/schemas/CreateRuleGroupRequest'
    UpdateRuleGroupResponse:
      type: object
      properties:
        ruleGroup:
          $ref: '#/components/schemas/RuleGroup'
    UpdateRuleGroupSet:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/InRuleGroup'
        id:
          type: string
        name:
          type: string
      additionalProperties: false
    UpdateScopeRequest:
      title: Update Scope Request
      required:
        - id
        - displayName
        - filters
        - defaultExpression
      type: object
      properties:
        defaultExpression:
          type: string
          example: <v1>true
        description:
          type: string
          example: The best scope
        displayName:
          type: string
          example: my-scope
        filters:
          type: array
          items:
            $ref: '#/components/schemas/scopes.v1.Filter'
        id:
          type: string
          example: 60c82be2-413f-4b8e-8201-7f5c51e2ef2b
      additionalProperties: false
      description: This data structure represents a request to update a scope
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
    UpdateScopeResponse:
      title: Update Scope Response
      required:
        - scope
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/scopes.v1.Scope'
      description: This data structure represents a response to update a scope
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
    UpdateTeamGroupRequest:
      title: UpdateTeamGroupRequest
      type: object
      properties:
        description:
          type: string
        externalId:
          type: string
        groupId:
          $ref: '#/components/schemas/TeamGroupId'
        groupType:
          $ref: '#/components/schemas/GroupType'
        name:
          type: string
        nextGenScopeId:
          type: string
        roleUpdates:
          $ref: '#/components/schemas/RoleUpdates'
        scopeFilters:
          $ref: '#/components/schemas/ScopeFilters'
        userUpdates:
          $ref: '#/components/schemas/UserUpdates'
      additionalProperties: false
      description: >-
        Request to modify an existing team group's details, including its name,
        description, roles, users, and scope settings.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    UpdateTeamGroupResponse:
      title: UpdateTeamGroupResponse
      type: object
      description: >-
        Response confirming the successful update of a team group's
        configuration.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    UpdateTeamRequest:
      type: object
      properties:
        dailyQuota:
          type: number
          format: double
        teamId:
          $ref: '#/components/schemas/v2.TeamId'
        teamName:
          type: string
      additionalProperties: false
    UpdateTeamResponse:
      type: object
    UpsertCompanyProvidersInternalRequest:
      type: object
      properties:
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/DataSource'
        providers:
          type: array
          items:
            type: string
            deprecated: true
    UpsertCompanyProvidersInternalResponse:
      type: object
      properties:
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/DataSource'
        providers:
          type: array
          items:
            type: string
            deprecated: true
    UpsertCompanyProvidersRequest:
      type: object
      properties:
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/DataSource'
        providers:
          type: array
          items:
            type: string
            deprecated: true
    UpsertCompanyProvidersResponse:
      type: object
      properties:
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/DataSource'
        providers:
          type: array
          items:
            type: string
            deprecated: true
    UpsertCustomLabelMappingsRequest:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/LabelMapping'
    UpsertCustomLabelMappingsResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/LabelMapping'
    UpsertGlobalMeasurementsInternalRequest:
      type: object
      properties:
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/Measurement'
    UpsertGlobalMeasurementsInternalResponse:
      type: object
      properties:
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/Measurement'
    UpsertIncidentStatePayload:
      type: object
      properties:
        cxEventKey:
          type: string
    UpsertIncidentStateType:
      enum:
        - UPSERT_INCIDENT_STATE_TYPE_UNSPECIFIED
        - UPSERT_INCIDENT_STATE_TYPE_TRIGGERED
        - UPSERT_INCIDENT_STATE_TYPE_RESOLVED
      type: string
    UpsertLabelMappingsInternalRequest:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/LabelMapping'
    UpsertLabelMappingsInternalResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/LabelMapping'
    UpsertLabelMappingsRequest:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/LabelMapping'
    UpsertLabelMappingsResponse:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/LabelMapping'
    UpsertMeasurementsInternalRequest:
      type: object
      properties:
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/Measurement'
    UpsertMeasurementsRequest:
      type: object
      properties:
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/Measurement'
    UpsertMeasurementsResponse:
      type: object
      properties:
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/Measurement'
    UserDetails:
      title: User details
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
          example: user_id
      externalDocs:
        url: ''
    UserStatus:
      enum:
        - USER_STATUS_UNSPECIFIED
        - USER_STATUS_ACTIVE
        - USER_STATUS_INACTIVE
      type: string
    UserUpdates:
      title: UserUpdates
      type: object
      properties:
        userIds:
          type: array
          items:
            $ref: '#/components/schemas/v1.UserId'
      description: >-
        This data structure represents the information associated with an API
        key.
      externalDocs:
        description: Find out more about groups
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/assign-user-roles-and-scopes-via-groups/
    ValidateBucketRequest:
      oneOf:
        - title: Bucket Validation Request
          required:
            - storageConfig
          type: object
          properties:
            ibm:
              $ref: '#/components/schemas/IbmConfigV2'
          additionalProperties: false
          description: This data structure is used to validate a bucket.
          externalDocs:
            description: Find out more about metrics cost optimization
            url: >-
              https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
        - title: Bucket Validation Request
          required:
            - storageConfig
          type: object
          properties:
            s3:
              $ref: '#/components/schemas/S3Config'
          additionalProperties: false
          description: This data structure is used to validate a bucket.
          externalDocs:
            description: Find out more about metrics cost optimization
            url: >-
              https://coralogix.com/docs/user-guides/account-management/payment-and-billing/metrics-optimization/
    ValidateEntityLabelMatcherRequest:
      title: Validate Entity Label Matcher Request
      type: object
      properties:
        entityLabelMatcher:
          type: object
          additionalProperties:
            type: string
      description: Request to validate an entity label matcher
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ValidateEntityLabelMatcherRequest.EntityLabelMatcherEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    ValidateEntityLabelMatcherResponse:
      title: Validate Entity Label Matcher Response
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ValidateEntityLabelMatcherResult'
      description: Response which contains whether the given entity label matcher is valid
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    ValidateEntityLabelMatcherResult:
      oneOf:
        - type: object
          properties:
            success:
              $ref: '#/components/schemas/ValidateEntityLabelMatcherResult.Success'
          additionalProperties: false
        - type: object
          properties:
            failure:
              $ref: '#/components/schemas/ValidateEntityLabelMatcherResult.Failure'
          additionalProperties: false
    ValidateEntityLabelMatcherResult.Failure:
      type: object
      properties:
        message:
          type: string
    ValidateEntityLabelMatcherResult.Success:
      type: object
    ValidateTargetRequest:
      oneOf:
        - title: Set Target Response
          required:
            - isActive
            - targetSpec
          type: object
          properties:
            isActive:
              type: boolean
            s3:
              $ref: '#/components/schemas/S3TargetSpec'
          additionalProperties: false
          description: This data structure is used to validate a storage target for logs.
          externalDocs:
            description: Find out more about archives
            url: >-
              https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
        - title: Set Target Response
          required:
            - isActive
            - targetSpec
          type: object
          properties:
            ibmCos:
              $ref: '#/components/schemas/IBMCosTargetSpec'
            isActive:
              type: boolean
          additionalProperties: false
          description: This data structure is used to validate a storage target for logs.
          externalDocs:
            description: Find out more about archives
            url: >-
              https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    ValidateTargetResponse:
      title: Validate Target Response
      required:
        - isValid
      type: object
      properties:
        isValid:
          type: boolean
          example: true
      description: >-
        This data structure is obtained after validating a storage target for
        logs.
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    Value:
      enum:
        - VALUE_DEBUG_OR_UNSPECIFIED
        - VALUE_VERBOSE
        - VALUE_INFO
        - VALUE_WARNING
        - VALUE_ERROR
        - VALUE_CRITICAL
      type: string
    ValueLabel:
      type: object
      properties:
        isDefault:
          type: boolean
        label:
          type: string
        value:
          type: string
      additionalProperties: false
    Variable:
      type: object
      properties:
        definition:
          $ref: '#/components/schemas/Variable.Definition'
        description:
          type: string
        displayName:
          type: string
        displayType:
          $ref: '#/components/schemas/VariableDisplayType'
        name:
          type: string
    Variable.Definition:
      oneOf:
        - type: object
          properties:
            constant:
              $ref: '#/components/schemas/Constant'
          additionalProperties: false
        - type: object
          properties:
            multiSelect:
              $ref: '#/components/schemas/MultiSelect'
          additionalProperties: false
    VariableDisplayType:
      enum:
        - VARIABLE_DISPLAY_TYPE_UNSPECIFIED
        - VARIABLE_DISPLAY_TYPE_LABEL_VALUE
        - VARIABLE_DISPLAY_TYPE_VALUE
        - VARIABLE_DISPLAY_TYPE_NOTHING
      type: string
    VariableDisplayTypeV2:
      enum:
        - VARIABLE_DISPLAY_TYPE_V2_UNSPECIFIED
        - VARIABLE_DISPLAY_TYPE_V2_LABEL_VALUE
        - VARIABLE_DISPLAY_TYPE_V2_VALUE
        - VARIABLE_DISPLAY_TYPE_V2_NOTHING
      type: string
    VariableSelectionOptions:
      type: object
      properties:
        selectionType:
          $ref: '#/components/schemas/SelectionType'
    VariableSourceV2:
      oneOf:
        - type: object
          properties:
            static:
              $ref: '#/components/schemas/StaticSource'
          additionalProperties: false
        - type: object
          properties:
            query:
              $ref: '#/components/schemas/VariableSourceV2.QuerySource'
          additionalProperties: false
        - type: object
          properties:
            textbox:
              $ref: '#/components/schemas/TextboxSource'
          additionalProperties: false
    VariableSourceV2.QuerySource:
      oneOf:
        - type: object
          properties:
            allOption:
              $ref: '#/components/schemas/AllOption'
            logsQuery:
              $ref: '#/components/schemas/QuerySource.LogsQuery'
            refreshStrategy:
              $ref: '#/components/schemas/VariableSourceV2.RefreshStrategy'
            valueDisplayOptions:
              $ref: '#/components/schemas/VariableSourceV2.ValueDisplayOptions'
            valuesOrderDirection:
              $ref: '#/components/schemas/OrderDirection'
          additionalProperties: false
        - type: object
          properties:
            allOption:
              $ref: '#/components/schemas/AllOption'
            metricsQuery:
              $ref: '#/components/schemas/QuerySource.MetricsQuery'
            refreshStrategy:
              $ref: '#/components/schemas/VariableSourceV2.RefreshStrategy'
            valueDisplayOptions:
              $ref: '#/components/schemas/VariableSourceV2.ValueDisplayOptions'
            valuesOrderDirection:
              $ref: '#/components/schemas/OrderDirection'
          additionalProperties: false
        - type: object
          properties:
            allOption:
              $ref: '#/components/schemas/AllOption'
            refreshStrategy:
              $ref: '#/components/schemas/VariableSourceV2.RefreshStrategy'
            spansQuery:
              $ref: '#/components/schemas/QuerySource.SpansQuery'
            valueDisplayOptions:
              $ref: '#/components/schemas/VariableSourceV2.ValueDisplayOptions'
            valuesOrderDirection:
              $ref: '#/components/schemas/OrderDirection'
          additionalProperties: false
        - type: object
          properties:
            allOption:
              $ref: '#/components/schemas/AllOption'
            dataprimeQuery:
              $ref: '#/components/schemas/QuerySource.DataprimeQuery'
            refreshStrategy:
              $ref: '#/components/schemas/VariableSourceV2.RefreshStrategy'
            valueDisplayOptions:
              $ref: '#/components/schemas/VariableSourceV2.ValueDisplayOptions'
            valuesOrderDirection:
              $ref: '#/components/schemas/OrderDirection'
          additionalProperties: false
    VariableSourceV2.RefreshStrategy:
      enum:
        - REFRESH_STRATEGY_UNSPECIFIED
        - REFRESH_STRATEGY_ON_DASHBOARD_LOAD
        - REFRESH_STRATEGY_ON_TIME_FRAME_CHANGE
      type: string
    VariableSourceV2.ValueDisplayOptions:
      type: object
      properties:
        labelRegex:
          type: string
        valueRegex:
          type: string
    VariableV2:
      type: object
      properties:
        description:
          type: string
        displayFullRow:
          type: boolean
        displayName:
          type: string
        displayType:
          $ref: '#/components/schemas/VariableDisplayTypeV2'
        name:
          type: string
        source:
          $ref: '#/components/schemas/VariableSourceV2'
        value:
          $ref: '#/components/schemas/VariableValueV2'
    VariableValueV2:
      oneOf:
        - type: object
          properties:
            multiString:
              $ref: '#/components/schemas/MultiStringValue'
          additionalProperties: false
        - type: object
          properties:
            singleString:
              $ref: '#/components/schemas/SingleStringValue'
          additionalProperties: false
        - type: object
          properties:
            singleNumeric:
              $ref: '#/components/schemas/VariableValueV2.SingleNumericValue'
          additionalProperties: false
        - type: object
          properties:
            regex:
              $ref: '#/components/schemas/RegexValue'
          additionalProperties: false
        - type: object
          properties:
            lucene:
              $ref: '#/components/schemas/LuceneQueryValue'
          additionalProperties: false
        - type: object
          properties:
            interval:
              $ref: '#/components/schemas/IntervalValue'
          additionalProperties: false
    VariableValueV2.SingleNumericValue:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/NumericValueLabel'
    Variant:
      enum:
        - DEFAULT
        - GCP
        - OAUTH
        - CUSTOM
      type: string
    VerticalBars:
      type: object
      properties:
        allowAbbreviation:
          type: boolean
          description: Whether to render numeric value without abbreviation
          example: false
        barValueDisplay:
          $ref: '#/components/schemas/Visualization.BarValueDisplay'
        categoryFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        colorScheme:
          type: string
          description: Applied color scheme, one of the predefined values
          example:
            value: classic
        colorsBy:
          $ref: '#/components/schemas/ColorsBy'
        customUnit:
          type: string
          description: >-
            Custom unit (requires to have unit field set to custom to take
            effect)
          example:
            value: mph
        decimalPrecision:
          type: integer
          description: >-
            Number indicating the decimal precision of the numeric values,
            within range 0-15
          format: int32
          example: 4
        groupNameTemplate:
          type: string
          description: Custom template name for a group, can contain variables
          example:
            value: Slice - {{ variable }}
        hashColors:
          type: boolean
          description: Whether to ignore color scheme and derive colors from algorithm
          example: false
        legend:
          $ref: '#/components/schemas/Legend'
        maxBarsPerChart:
          type: integer
          description: Maximum number of bars on a chart
          format: int32
          example: 20
        maxSlicesPerBar:
          type: integer
          description: How many slices can fit in a single bar
          format: int32
        scaleType:
          $ref: '#/components/schemas/ScaleType'
        sortBy:
          $ref: '#/components/schemas/SortByType'
        stackNameTemplate:
          type: string
          description: Custom template name of an individual stack
        subCategoryFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        unit:
          $ref: '#/components/schemas/common.Unit'
        valueField:
          $ref: '#/components/schemas/ObservationField'
        yAxisMax:
          type: number
          description: Number indicating the upper band for y axis
          format: float
          example: 1000
        yAxisMin:
          type: number
          description: Number indicating the lower band for y axis
          format: float
          example: -1000
    View:
      title: View
      required:
        - name
        - id
        - timeSelection
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/SelectedFilters'
        folderId:
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
          type: string
          description: Unique identifier for folders
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
        id:
          type: integer
          description: id
          format: int32
          example: 52
        isCompactMode:
          type: boolean
        name:
          minLength: 1
          type: string
          description: View name
          example: Logs view
        searchQuery:
          $ref: '#/components/schemas/SearchQuery'
        timeSelection:
          $ref: '#/components/schemas/TimeSelection'
        viewType:
          $ref: '#/components/schemas/ViewType'
      description: Response for views.
      externalDocs:
        url: ''
    ViewFolder:
      title: ViewFolder
      required:
        - name
      type: object
      properties:
        id:
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
          type: string
          description: Unique identifier for folders
          example: 3dc02998-0b50-4ea8-b68a-4779d716fa1f
        name:
          minLength: 1
          type: string
          description: Folder name
          example: My Folder
      description: View folder.
      externalDocs:
        url: ''
    ViewType:
      enum:
        - VIEW_TYPE_UNSPECIFIED
        - VIEW_TYPE_LOGS
        - VIEW_TYPE_TEMPLATES
        - VIEW_TYPE_ARCHIVE_LOGS
        - VIEW_TYPE_ARCHIVE_TEMPLATES
      type: string
    Visualization:
      oneOf:
        - type: object
          properties:
            table:
              $ref: '#/components/schemas/Table'
          additionalProperties: false
        - type: object
          properties:
            timeSeriesLines:
              $ref: '#/components/schemas/TimeSeriesLines'
          additionalProperties: false
        - type: object
          properties:
            timeSeriesBars:
              $ref: '#/components/schemas/TimeSeriesBars'
          additionalProperties: false
        - type: object
          properties:
            stat:
              $ref: '#/components/schemas/Stat'
          additionalProperties: false
        - type: object
          properties:
            gauge:
              $ref: '#/components/schemas/Visualization.Gauge'
          additionalProperties: false
        - type: object
          properties:
            hexagonBins:
              $ref: '#/components/schemas/HexagonBins'
          additionalProperties: false
        - type: object
          properties:
            pieChart:
              $ref: '#/components/schemas/Visualization.PieChart'
          additionalProperties: false
        - type: object
          properties:
            horizontalBars:
              $ref: '#/components/schemas/HorizontalBars'
          additionalProperties: false
        - type: object
          properties:
            verticalBars:
              $ref: '#/components/schemas/VerticalBars'
          additionalProperties: false
    Visualization.BarValueDisplay:
      enum:
        - BAR_VALUE_DISPLAY_UNSPECIFIED
        - BAR_VALUE_DISPLAY_TOP
        - BAR_VALUE_DISPLAY_INSIDE
        - BAR_VALUE_DISPLAY_BOTH
      type: string
    Visualization.Gauge:
      type: object
      properties:
        allowAbbreviation:
          type: boolean
          description: Whether to render numeric value without abbreviation
          example: false
        categoryFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        customUnit:
          type: string
          description: >-
            Custom unit (requires to have unit field set as UNIT_CUSTOM to take
            effect)
          example:
            value: rpm
        decimalPrecision:
          type: integer
          description: >-
            Number indicating the decimal precision of the numeric values,
            within range 0-15
          format: int32
          example: 2
        displaySeriesName:
          type: boolean
          description: >-
            (multigauge display only) Whether to show the series names above the
            value
        legend:
          $ref: '#/components/schemas/Legend'
        legendBy:
          $ref: '#/components/schemas/LegendBy'
        max:
          type: number
          description: >-
            A maximum gauge value used in percentage threshold calculation and
            for visual value representation
          format: double
          example: 150000
        min:
          type: number
          description: >-
            A minimum gauge value used in percentage threshold calculation and
            for visual value representation
          format: double
          example: 0
        showInnerArc:
          type: boolean
          description: >-
            Whether to show the inner arc of gauge which graphically represents
            the value
          example: false
        showOuterArc:
          type: boolean
          description: >-
            Whether to show the outer arc of gauge which graphically represents
            the min/max range
          example: true
        thresholdType:
          $ref: '#/components/schemas/ThresholdType'
        thresholds:
          type: array
          items:
            $ref: '#/components/schemas/common.Threshold'
        unit:
          $ref: '#/components/schemas/common.Unit'
        valueField:
          $ref: '#/components/schemas/ObservationField'
    Visualization.PieChart:
      type: object
      properties:
        allowAbbreviation:
          type: boolean
          description: Whether to render numeric value without abbreviation
          example: false
        categoryFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        colorScheme:
          type: string
          description: Applied color scheme, one of the predefined values
          example:
            value: classic
        customUnit:
          type: string
          description: >-
            Custom unit (requires the unit field to be set to custom to take
            effect)
          example:
            value: mph
        decimalPrecision:
          type: integer
          description: >-
            Number indicating the decimal precision of the numeric values,
            within range 0-15
          format: int32
          example: 5
        groupNameTemplate:
          type: string
          description: Custom template name for a group, can contain variables
          example:
            value: Slice - {{ variable }}
        hashColors:
          type: boolean
          description: Whether to ignore color scheme and derive colors from algorithm
          example: false
        labelDefinition:
          $ref: '#/components/schemas/Visualization.PieChart.LabelDefinition'
        legend:
          $ref: '#/components/schemas/Legend'
        maxSlicesPerChart:
          type: integer
          description: Maximum number of slices on a chart
          format: int32
          example: 24
        maxSlicesPerStack:
          type: integer
          description: How many slices can fit in a single slice stack
          format: int32
        minSlicePercentage:
          type: integer
          description: Minimum percentage threshold for slices to be displayed
          format: int32
          example: 5
        showTotal:
          type: boolean
          description: Whether to show the total amount as a title
          example: false
        stackNameTemplate:
          type: string
          description: Custom template name of an individual slice in the stack
          example:
            value: Slice {{ group }} - subslice {{ subgroup }}
        subCategoryFields:
          type: array
          items:
            $ref: '#/components/schemas/ObservationField'
        unit:
          $ref: '#/components/schemas/common.Unit'
        valueField:
          $ref: '#/components/schemas/ObservationField'
    Visualization.PieChart.LabelDefinition:
      type: object
      properties:
        isVisible:
          type: boolean
          description: Are labels visible
        labelSource:
          $ref: '#/components/schemas/Visualization.PieChart.LabelSource'
        showName:
          type: boolean
          description: Whether to show the name of slice in the label
        showPercentage:
          type: boolean
          description: Whether to show percentage value of slice in the label
        showValue:
          type: boolean
          description: Whether to show value of slice in the label
    Visualization.PieChart.LabelSource:
      enum:
        - LABEL_SOURCE_UNSPECIFIED
        - LABEL_SOURCE_INNER
        - LABEL_SOURCE_STACK
      type: string
    WebhookType: *ref_0
    Weekly:
      type: object
      properties:
        daysOfWeek:
          type: array
          items:
            type: integer
            format: int32
    WideParquet:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/wide_parquet.v1.Version'
    Widget:
      title: Widget
      type: object
      properties:
        appearance:
          $ref: '#/components/schemas/Widget.Appearance'
        createdAt:
          type: string
          format: date-time
        definition:
          $ref: '#/components/schemas/Widget.Definition'
        description:
          type: string
          description: Short description of the widget
          example:
            value: Average delay of application
        id:
          $ref: '#/components/schemas/UUID'
        title:
          type: string
          description: Name of the widget
          example:
            value: Gauge
        updatedAt:
          type: string
          format: date-time
      description: This data structure represents a dashboard widget.
      externalDocs:
        description: Find out more about creating dashboard widgets in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/#add-new-widgets
    Widget.Appearance:
      type: object
      properties:
        width:
          type: integer
          format: int32
    Widget.Definition:
      oneOf:
        - type: object
          properties:
            lineChart:
              $ref: '#/components/schemas/LineChart'
          additionalProperties: false
        - type: object
          properties:
            dataTable:
              $ref: '#/components/schemas/DataTable'
          additionalProperties: false
        - type: object
          properties:
            gauge:
              $ref: '#/components/schemas/widgets.Gauge'
          additionalProperties: false
        - type: object
          properties:
            pieChart:
              $ref: '#/components/schemas/widgets.PieChart'
          additionalProperties: false
        - type: object
          properties:
            barChart:
              $ref: '#/components/schemas/BarChart'
          additionalProperties: false
        - type: object
          properties:
            horizontalBarChart:
              $ref: '#/components/schemas/HorizontalBarChart'
          additionalProperties: false
        - type: object
          properties:
            markdown:
              $ref: '#/components/schemas/Markdown'
          additionalProperties: false
        - type: object
          properties:
            hexagon:
              $ref: '#/components/schemas/Hexagon'
          additionalProperties: false
        - type: object
          properties:
            dynamic:
              $ref: '#/components/schemas/widgets.Dynamic'
          additionalProperties: false
    WidgetScope:
      oneOf:
        - type: object
          properties:
            allWidgets:
              $ref: '#/components/schemas/AllWidgets'
          additionalProperties: false
        - type: object
          properties:
            specificWidgets:
              $ref: '#/components/schemas/SpecificWidgets'
          additionalProperties: false
    WindowBasedMetricSli:
      title: WindowBasedMetricSli
      required:
        - query
        - window
        - comparisonOperator
        - threshold
      type: object
      properties:
        comparisonOperator:
          $ref: '#/components/schemas/ComparisonOperator'
        missingDataStrategy:
          $ref: '#/components/schemas/MissingDataStrategy'
        query:
          $ref: '#/components/schemas/Metric'
        threshold:
          type: number
          format: float
          example: 0.95
        window:
          $ref: '#/components/schemas/WindowSloWindow'
      description: Definition of a window-based SLI based on metrics
      externalDocs:
        url: ''
    WindowBasedPermutationData:
      type: object
      properties:
        badWindows:
          type: integer
          format: int64
        goodWindows:
          type: integer
          format: int64
    WindowSloWindow:
      enum:
        - WINDOW_SLO_WINDOW_UNSPECIFIED
        - WINDOW_SLO_WINDOW_1_MINUTE
        - WINDOW_SLO_WINDOW_5_MINUTES
      type: string
    XAxis:
      oneOf:
        - type: object
          properties:
            value:
              $ref: '#/components/schemas/XAxisByValue'
          additionalProperties: false
        - type: object
          properties:
            time:
              $ref: '#/components/schemas/XAxisByTime'
          additionalProperties: false
    XAxisByTime:
      type: object
      properties:
        bucketsPresented:
          type: integer
          description: How many buckets to present in the selected timeframe
          format: int32
        interval:
          type: string
          description: >-
            Interval of value sampling, i.e. every 5 minutes, every 1 second and
            so on
    XAxisByValue:
      type: object
    YAxisViewByCategory:
      type: object
    YAxisViewByValue:
      type: object
    alert_scheduler_rule_protobuf.v1.Filter:
      oneOf:
        - type: object
          properties:
            alertMetaLabels:
              $ref: '#/components/schemas/MetaLabels'
            whatExpression:
              type: string
          additionalProperties: false
        - type: object
          properties:
            alertUniqueIds:
              $ref: '#/components/schemas/AlertUniqueIds'
            whatExpression:
              type: string
          additionalProperties: false
    alerts.v3.FilterMatcher:
      enum:
        - FILTER_MATCHER_UNSPECIFIED
        - FILTER_MATCHER_EQUALS
        - FILTER_MATCHER_NOT_EQUALS
        - FILTER_MATCHER_CONTAINS
      type: string
    alerts.v3.OrderBy:
      title: Order by
      required:
        - fieldName
        - direction
      type: object
      properties:
        direction:
          $ref: '#/components/schemas/alerts.v3.OrderByDirection'
        fieldName:
          $ref: '#/components/schemas/alerts.v3.OrderByFields'
      description: >-
        A data structure that specifies the field and direction for ordering
        query results
      externalDocs:
        url: ''
    alerts.v3.OrderByDirection:
      enum:
        - ORDER_BY_DIRECTION_ASC_OR_UNSPECIFIED
        - ORDER_BY_DIRECTION_DESC
      type: string
    alerts.v3.OrderByFields:
      enum:
        - ORDER_BY_FIELDS_UNSPECIFIED
        - ORDER_BY_FIELDS_NAME
        - ORDER_BY_FIELDS_ID
        - ORDER_BY_FIELDS_SEVERITY
        - ORDER_BY_FIELDS_CREATED_TIME
        - ORDER_BY_FIELDS_UPDATED_TIME
        - ORDER_BY_FIELDS_LAST_TRIGGERED
      type: string
    alerts.v3.PaginationRequest:
      type: object
      properties:
        pageSize:
          type: integer
          format: int64
        pageToken:
          type: string
    alerts.v3.PaginationResponse:
      type: object
      properties:
        nextPageToken:
          type: string
        totalSize:
          type: integer
          format: int64
    archive.v1.Retention:
      title: Retention
      type: object
      properties:
        editable:
          type: boolean
        id:
          type: string
        name:
          type: string
        order:
          type: integer
          format: int32
      description: This data structure represents a retention
      externalDocs:
        description: Find out more about archives
        url: >-
          https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
    common.Action:
      title: Action
      type: object
      properties:
        dashboardId:
          type: string
          description: >-
            Reference to specific dashboard, can be null if the action is team
            wide
        dataSource:
          $ref: '#/components/schemas/ActionDataSourceType'
        definition:
          $ref: '#/components/schemas/ActionDefinition'
        id:
          type: string
          description: A unique identifier of the action
        isPrivate:
          type: boolean
          description: Defines if the action is private to the user or shared with the team
        name:
          type: string
          description: The display name of the action
        shouldOpenInNewWindow:
          type: boolean
          description: >-
            Defines if the action should open in a new window or current window
            in the browser
        widgetId:
          type: string
          description: >-
            Reference to specific widget within a dashboard, can be null if the
            action is team wide or dashboard wide
      additionalProperties: false
      description: >-
        Actions are user-defined actions that can be triggered from the
        dashboard over specific widget.
      externalDocs:
        description: Learn more about Custom Dashboards in our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    common.Aggregation:
      enum:
        - AGGREGATION_UNSPECIFIED
        - AGGREGATION_LAST
        - AGGREGATION_MIN
        - AGGREGATION_MAX
        - AGGREGATION_AVG
        - AGGREGATION_SUM
      type: string
    common.DataprimeQuery:
      type: object
      properties:
        text:
          type: string
    common.Group:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/FieldGroup'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/common.Group'
        value:
          type: number
          format: double
    common.Threshold:
      title: Threshold
      type: object
      properties:
        color:
          type: string
          description: Color of the threshold
        from:
          type: number
          description: Minimum bound value of the threshold
          format: double
        label:
          type: string
          description: Optional label of the threshold
      description: Definition of a single gauge threshold
      externalDocs:
        url: ''
    common.ThresholdBy:
      enum:
        - THRESHOLD_BY_UNSPECIFIED
        - THRESHOLD_BY_VALUE
        - THRESHOLD_BY_BACKGROUND
      type: string
    common.Unit:
      enum:
        - UNIT_UNSPECIFIED
        - UNIT_MICROSECONDS
        - UNIT_MILLISECONDS
        - UNIT_SECONDS
        - UNIT_BYTES
        - UNIT_KBYTES
        - UNIT_MBYTES
        - UNIT_GBYTES
        - UNIT_BYTES_IEC
        - UNIT_KIBYTES
        - UNIT_MIBYTES
        - UNIT_GIBYTES
        - UNIT_EUR_CENTS
        - UNIT_EUR
        - UNIT_USD_CENTS
        - UNIT_USD
        - UNIT_NANOSECONDS
        - UNIT_CUSTOM
        - UNIT_PERCENT_ZERO_ONE
        - UNIT_PERCENT_ZERO_HUNDRED
        - UNIT_PERCENT
      type: string
    csv.v1.Version:
      enum:
        - VERSION_UNSPECIFIED
        - VERSION_V1
      type: string
    datausage.v1.Priority:
      enum:
        - PRIORITY_UNSPECIFIED
        - PRIORITY_LOW
        - PRIORITY_MEDIUM
        - PRIORITY_HIGH
        - PRIORITY_BLOCKED
      type: string
    datausage.v1.Retention:
      type: object
      properties:
        value:
          type: string
          format: uint64
    datausage.v1.Severity:
      enum:
        - SEVERITY_UNSPECIFIED
        - SEVERITY_DEBUG
        - SEVERITY_VERBOSE
        - SEVERITY_INFO
        - SEVERITY_WARNING
        - SEVERITY_ERROR
        - SEVERITY_CRITICAL
      type: string
    datausage.v2.Severity:
      enum:
        - SEVERITY_UNSPECIFIED
        - SEVERITY_DEBUG
        - SEVERITY_VERBOSE
        - SEVERITY_INFO
        - SEVERITY_WARNING
        - SEVERITY_ERROR
        - SEVERITY_CRITICAL
      type: string
    datausage.v2.Team:
      type: object
      properties:
        id:
          type: string
          format: uint64
    events.v3.FilterMatcher:
      enum:
        - FILTER_MATCHER_TEXT_OR_UNSPECIFIED
        - FILTER_MATCHER_REGEXP
      type: string
    events.v3.OrderBy:
      type: object
      properties:
        direction:
          $ref: '#/components/schemas/events.v3.OrderByDirection'
        fieldName:
          $ref: '#/components/schemas/events.v3.OrderByFields'
    events.v3.OrderByDirection:
      enum:
        - ORDER_BY_DIRECTION_UNSPECIFIED
        - ORDER_BY_DIRECTION_ASC
        - ORDER_BY_DIRECTION_DESC
      type: string
    events.v3.OrderByFields:
      enum:
        - ORDER_BY_FIELDS_UNSPECIFIED
        - ORDER_BY_FIELDS_TIMESTAMP
      type: string
    events.v3.PaginationRequest:
      type: object
      properties:
        pageSize:
          type: integer
          format: int64
          example: 10
        pageToken:
          type: string
          example: test
    events.v3.PaginationResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          example: test
        totalSize:
          type: integer
          format: int64
          example: 10
    filters.Filter:
      title: Filter
      type: object
      properties:
        collapsed:
          type: boolean
          description: >-
            Indicates if the filter's UI representation should be collapsed or
            expanded.
        displayName:
          type: string
          description: A display name for the filter
        enabled:
          type: boolean
          description: Indicates if the filter is currently enabled or not.
        source:
          $ref: '#/components/schemas/Filter.Source'
      description: >-
        This data structure represents the configuration for filtering data on
        the dashboard.
      externalDocs:
        description: >-
          Discover how to filter and query data in Custom Dashboards by
          exploring our documentation.
        url: >-
          https://coralogix.com/docs/user-guides/custom-dashboards/getting-started/
    generic.v1.Version:
      enum:
        - VERSION_UNSPECIFIED
        - VERSION_V1
      type: string
    incidents.v1.MetaLabel:
      title: Incident meta label
      type: object
      properties:
        key:
          type: string
          example: key
        value:
          type: string
          example: value
      externalDocs:
        url: ''
    logs2metrics.v2.Severity:
      enum:
        - SEVERITY_UNSPECIFIED
        - SEVERITY_DEBUG
        - SEVERITY_VERBOSE
        - SEVERITY_INFO
        - SEVERITY_WARNING
        - SEVERITY_ERROR
        - SEVERITY_CRITICAL
      type: string
    meta_labels_protobuf.v1.MetaLabel:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        value:
          type: string
      additionalProperties: false
    notification_center.ConditionType:
      oneOf:
        - type: object
          properties:
            matchEntityType:
              $ref: '#/components/schemas/MatchEntityTypeCondition'
          additionalProperties: false
        - type: object
          properties:
            matchEntityTypeAndSubType:
              $ref: '#/components/schemas/MatchEntityTypeAndSubTypeCondition'
          additionalProperties: false
    notification_center.ConnectorConfigField:
      type: object
      properties:
        fieldName:
          type: string
        value:
          type: string
    notification_center.EntityType: *ref_1
    notification_center.MessageConfigField:
      title: Message Config Field
      required:
        - fieldName
        - template
      type: object
      properties:
        fieldName:
          type: string
          example: title
        template:
          type: string
          example: '{{alert.status}} {{alertDef.priority}} - {{alertDef.name}}'
      description: >-
        Message config field provides a way to define a template that can be
        used to render the notification content
      externalDocs:
        description: Find out more about notification center
        url: >-
          https://coralogix.com/docs/user-guides/notification-center/introduction/welcome/
    organisations.v2.Team:
      type: object
      properties:
        clusterId:
          type: string
        id:
          $ref: '#/components/schemas/v2.TeamId'
        isAuditingTeam:
          type: boolean
        name:
          type: string
        planType:
          $ref: '#/components/schemas/PlanType'
        quota:
          type: number
          format: float
        retention:
          type: integer
          format: int32
      additionalProperties: false
    permissions.v1.Scope:
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/ScopeFilters'
        id:
          $ref: '#/components/schemas/ScopeId'
    permissions.v1.TeamId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    quota.v1.Priority:
      enum:
        - PRIORITY_TYPE_UNSPECIFIED
        - PRIORITY_TYPE_BLOCK
        - PRIORITY_TYPE_LOW
        - PRIORITY_TYPE_MEDIUM
        - PRIORITY_TYPE_HIGH
      type: string
    quota.v1.Rule:
      type: object
      properties:
        name:
          type: string
        ruleTypeId:
          $ref: '#/components/schemas/RuleTypeId'
    quota.v1.Severity:
      enum:
        - SEVERITY_UNSPECIFIED
        - SEVERITY_DEBUG
        - SEVERITY_VERBOSE
        - SEVERITY_INFO
        - SEVERITY_WARNING
        - SEVERITY_ERROR
        - SEVERITY_CRITICAL
      type: string
    routing.SourceOverrides:
      type: object
      properties:
        connectorConfigFields:
          type: array
          items:
            $ref: '#/components/schemas/TemplatedConnectorConfigField'
        messageConfigFields:
          type: array
          items:
            $ref: '#/components/schemas/notification_center.MessageConfigField'
        payloadType:
          type: string
    rules.v1.Rule:
      type: object
      properties:
        description:
          type: string
        enabled:
          type: boolean
        id:
          type: string
        name:
          type: string
        order:
          type: integer
          format: int64
        parameters:
          $ref: '#/components/schemas/RuleParameters'
        sourceField:
          type: string
    rules.v1.TeamId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    scopes.v1.Filter:
      title: Filter
      type: object
      properties:
        entityType:
          $ref: '#/components/schemas/v1.EntityType'
        expression:
          type: string
          example: <v1>true
      description: This data structure represents a filter
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
    scopes.v1.Scope:
      title: Scope
      type: object
      properties:
        defaultExpression:
          type: string
          example: <v1>true
        description:
          type: string
          example: The best scope
        displayName:
          type: string
          example: my-scope
        filters:
          type: array
          items:
            $ref: '#/components/schemas/scopes.v1.Filter'
        id:
          type: string
          example: 60c82be2-413f-4b8e-8201-7f5c51e2ef2b
        teamId:
          type: integer
          format: int32
          example: 1234
      additionalProperties: false
      description: This data structure represents a scope
      externalDocs:
        description: Find out more about scopes
        url: >-
          https://coralogix.com/docs/user-guides/account-management/user-management/scopes/
    services.v1.SloStatus:
      enum:
        - SLO_STATUS_UNSPECIFIED
        - SLO_STATUS_OK
        - SLO_STATUS_BREACHED
      type: string
    slo.v1.SloStatus:
      enum:
        - SLO_STATUS_UNSPECIFIED
        - SLO_STATUS_OK
        - SLO_STATUS_WARNING
        - SLO_STATUS_CRITICAL
        - SLO_STATUS_BREACHED
        - SLO_STATUS_PENDING
      type: string
    v1.Action:
      enum:
        - ACTION_UNSPECIFIED
        - ACTION_ADMIN
        - ACTION_OPERATE
        - ACTION_VIEW_ONLY
        - ACTION_EDIT
        - ACTION_DELETE
        - ACTION_CREATE
        - ACTION_CHANGE_QUOTA
        - ACTION_GENERATE_KEY
        - ACTION_WRITE
        - ACTION_MANAGE
        - ACTION_READ
        - ACTION_READ_CONFIG
        - ACTION_DEPLOY
        - ACTION_CREATE_SECURITY_ALERT
        - ACTION_UPDATE
        - ACTION_READDATA
        - ACTION_UPDATECONFIG
        - ACTION_UPDATEDATA
        - ACTION_VIEW
        - ACTION_EXECUTE
        - ACTION_ACKNOWLEDGE
        - ACTION_ASSIGN
        - ACTION_CLOSE
        - ACTION_UPDATEUSERWIDGETS
        - ACTION_READMAPS
        - ACTION_READPOLICIES
        - ACTION_READTEAMWIDGETS
        - ACTION_READUSERWIDGETS
        - ACTION_REINDEX
        - ACTION_SENDDATA
        - ACTION_SNOOZE
        - ACTION_UPDATEMAPS
        - ACTION_UPDATEPOLICIES
        - ACTION_UPDATETEAMWIDGETS
        - ACTION_READMAPPING
        - ACTION_READSLICONFIG
        - ACTION_UPDATEFILTERSCONFIG
        - ACTION_UPDATESLICONFIG
        - ACTION_UPLOADMAPPING
        - ACTION_READ_DIMENSIONS_CONFIG
        - ACTION_UPDATE_DIMENSIONS_CONFIG
        - ACTION_READ_APDEX_CONFIG
        - ACTION_UPDATE_APDEX_CONFIG
        - ACTION_MANAGE_CONNECTION_TO_ORG
        - ACTION_READ_GROUPS
        - ACTION_GET_DAILY_EMAILS
        - ACTION_GET_DATA_USAGE_WARNINGS
        - ACTION_GET_FLOW_ANOMALIES
        - ACTION_GET_SPIKE_ANOMALIES
        - ACTION_READ_ALL
        - ACTION_UPDATE_ALL
        - ACTION_READ_SUMMARY
        - ACTION_UPLOAD
        - ACTION_READ_ACCESS_POLICY
        - ACTION_UPDATE_ACCESS_POLICY
        - ACTION_APPEND_DATA
        - ACTION_OVERWRITE_DATA
        - ACTION_READ_TEAM_MEMBERS_SUMMARY
        - ACTION_COMMENT
      type: string
    v1.AutoRetireTimeframe:
      enum:
        - AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED
        - AUTO_RETIRE_TIMEFRAME_MINUTES_5
        - AUTO_RETIRE_TIMEFRAME_MINUTES_10
        - AUTO_RETIRE_TIMEFRAME_HOUR_1
        - AUTO_RETIRE_TIMEFRAME_HOURS_2
        - AUTO_RETIRE_TIMEFRAME_HOURS_6
        - AUTO_RETIRE_TIMEFRAME_HOURS_12
        - AUTO_RETIRE_TIMEFRAME_HOURS_24
      type: string
    v1.CustomRole:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        parentRoleId:
          $ref: '#/components/schemas/RoleId'
        roleId:
          $ref: '#/components/schemas/RoleId'
    v1.DateRange:
      type: object
      properties:
        fromDate:
          type: string
          format: date-time
        toDate:
          type: string
          format: date-time
    v1.Duration:
      type: object
      properties:
        forOver:
          type: integer
          format: int32
        frequency:
          $ref: '#/components/schemas/DurationFrequency'
    v1.EntityType:
      enum:
        - ENTITY_TYPE_UNSPECIFIED
        - ENTITY_TYPE_LOGS
        - ENTITY_TYPE_SPANS
      type: string
    v1.Extension:
      title: Extension metadata
      required:
        - id
        - name
        - image
      type: object
      properties:
        changelog:
          type: array
          items:
            $ref: '#/components/schemas/ChangelogEntry'
        darkModeImage:
          type: string
        deprecation:
          $ref: '#/components/schemas/Deprecation'
        id:
          type: string
        image:
          type: string
        integrations:
          type: array
          items:
            type: string
        isHidden:
          type: boolean
        keywords:
          type: array
          items:
            type: string
        name:
          type: string
        permissionDeniedRevisions:
          type: array
          items:
            $ref: '#/components/schemas/ExtensionRevision'
        revisions:
          type: array
          items:
            $ref: '#/components/schemas/ExtensionRevision'
      externalDocs:
        url: ''
    v1.FilterOperator:
      enum:
        - FILTER_OPERATOR_OR_OR_UNSPECIFIED
        - FILTER_OPERATOR_AND
      type: string
    v1.GB:
      type: object
      properties:
        value:
          type: number
          format: float
    v1.Grouping:
      title: Grouping
      type: object
      properties:
        labels:
          type: array
          items:
            type: string
      description: Definition of the SLO grouping fields
      externalDocs:
        url: ''
    v1.IntegrationType:
      oneOf:
        - title: Integration type
          type: object
          properties:
            managed:
              $ref: '#/components/schemas/Managed'
          additionalProperties: false
          description: This data structure represents an integration type.
          externalDocs:
            url: ''
        - title: Integration type
          type: object
          properties:
            untracked:
              $ref: '#/components/schemas/Untracked'
          additionalProperties: false
          description: This data structure represents an integration type.
          externalDocs:
            url: ''
        - title: Integration type
          type: object
          properties:
            cloudformation:
              $ref: '#/components/schemas/Cloudformation'
          additionalProperties: false
          description: This data structure represents an integration type.
          externalDocs:
            url: ''
        - title: Integration type
          type: object
          properties:
            arm:
              $ref: '#/components/schemas/AzureArm'
          additionalProperties: false
          description: This data structure represents an integration type.
          externalDocs:
            url: ''
        - title: Integration type
          type: object
          properties:
            pushBasedContextualData:
              $ref: '#/components/schemas/PushBasedContextualData'
          additionalProperties: false
          description: This data structure represents an integration type.
          externalDocs:
            url: ''
        - title: Integration type
          type: object
          properties:
            contextualData:
              $ref: '#/components/schemas/ContextualData'
          additionalProperties: false
          description: This data structure represents an integration type.
          externalDocs:
            url: ''
        - title: Integration type
          type: object
          properties:
            genericWebhook:
              $ref: '#/components/schemas/GenericWebhook'
          additionalProperties: false
          description: This data structure represents an integration type.
          externalDocs:
            url: ''
    v1.LabelValue:
      type: object
      properties:
        label:
          type: string
        value:
          type: string
    v1.OrderBy:
      oneOf:
        - title: Incident order by
          required:
            - field
            - direction
          type: object
          properties:
            direction:
              $ref: '#/components/schemas/v1.OrderByDirection'
            incidentField:
              $ref: '#/components/schemas/IncidentFields'
          additionalProperties: false
          externalDocs:
            url: ''
        - title: Incident order by
          required:
            - field
            - direction
          type: object
          properties:
            contextualLabel:
              type: string
            direction:
              $ref: '#/components/schemas/v1.OrderByDirection'
          additionalProperties: false
          externalDocs:
            url: ''
    v1.OrderByDirection:
      enum:
        - ORDER_BY_DIRECTION_UNSPECIFIED
        - ORDER_BY_DIRECTION_ASC
        - ORDER_BY_DIRECTION_DESC
      type: string
    v1.OrderByFields:
      enum:
        - ORDER_BY_FIELDS_UNSPECIFIED
        - ORDER_BY_FIELDS_ID
        - ORDER_BY_FIELDS_SEVERITY
        - ORDER_BY_FIELDS_NAME
        - ORDER_BY_FIELDS_CREATED_TIME
        - ORDER_BY_FIELDS_CLOSED_TIME
      type: string
    v1.PaginationRequest:
      title: Pagination request
      required:
        - pageSize
      type: object
      properties:
        pageSize:
          type: integer
          description: Number of items to return per page
          format: int64
          example: 10
        pageToken:
          type: string
          description: Token for the next page of results
          example: next_page_token
      description: Pagination parameters for list requests
      externalDocs:
        url: ''
    v1.PaginationResponse:
      title: Pagination response
      required:
        - totalSize
      type: object
      properties:
        nextPageToken:
          type: string
          description: Token for the next page of results
          example: next_page_token
        totalSize:
          type: integer
          description: Total number of items available
          format: int64
          example: 100
      description: Pagination information for list responses
      externalDocs:
        url: ''
    v1.Range:
      enum:
        - RANGE_UNSPECIFIED
        - RANGE_CURRENT_MONTH
        - RANGE_LAST_30_DAYS
        - RANGE_LAST_90_DAYS
        - RANGE_LAST_WEEK
      type: string
    v1.Resolution:
      enum:
        - RESOLUTION_UNSPECIFIED
        - RESOLUTION_ONE_MINUTE
        - RESOLUTION_FIVE_MINUTES
        - RESOLUTION_FIFTEEN_MINUTES
        - RESOLUTION_ONE_HOUR
        - RESOLUTION_SIX_HOURS
        - RESOLUTION_ONE_DAY
        - RESOLUTION_ONE_WEEK
      type: string
    v1.Revision:
      title: Revision
      type: object
      properties:
        revision:
          type: integer
          format: int32
          example: 1
        updateTime:
          type: string
          format: date-time
      description: >-
        The revision of the slo, used to differentiate between different
        versions of the same SLO
      externalDocs:
        url: ''
    v1.SloDefinition:
      type: object
      properties:
        sloId:
          type: string
    v1.SourceType:
      enum:
        - SOURCE_TYPE_UNSPECIFIED
        - SOURCE_TYPE_LOGS
        - SOURCE_TYPE_SPANS
      type: string
    v1.Span:
      type: object
      properties:
        processTags:
          type: object
          additionalProperties:
            type: string
        tags:
          type: object
          additionalProperties:
            type: string
    v1.SystemRole:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        roleId:
          $ref: '#/components/schemas/RoleId'
    v1.TcoTier:
      enum:
        - TCO_TIER_UNSPECIFIED
        - TCO_TIER_LOW
        - TCO_TIER_MEDIUM
        - TCO_TIER_HIGH
        - TCO_TIER_BLOCKED
      type: string
    v1.Team:
      type: object
      properties:
        id:
          type: string
          format: uint64
    v1.TimeRange:
      title: Time range
      required:
        - startTime
        - endTime
      type: object
      properties:
        endTime:
          type: string
          description: End time of the range
          format: date-time
        startTime:
          type: string
          description: Start time of the range
          format: date-time
      description: Represents a time range with start and end timestamps
      externalDocs:
        url: ''
    v1.UndetectedValuesManagement:
      type: object
      properties:
        autoRetireTimeframe:
          $ref: '#/components/schemas/v1.AutoRetireTimeframe'
        triggerUndetectedValues:
          type: boolean
      additionalProperties: false
    v1.Unit:
      type: object
      properties:
        value:
          type: number
          format: float
    v1.User:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        status:
          $ref: '#/components/schemas/UserStatus'
        userAccountId:
          $ref: '#/components/schemas/v1.UserAccountId'
        userId:
          $ref: '#/components/schemas/v1.UserId'
        username:
          type: string
    v1.UserAccountId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    v1.UserId:
      type: object
      properties:
        id:
          type: string
    v1.common.DataModeType:
      enum:
        - DATA_MODE_TYPE_HIGH_UNSPECIFIED
        - DATA_MODE_TYPE_ARCHIVE
      type: string
    v1alpha.EntityType:
      enum:
        - ENTITY_TYPE_UNSPECIFIED
        - ENTITY_TYPE_LOGS
        - ENTITY_TYPE_BULK_SIZES
        - ENTITY_TYPE_BROWSER_LOGS
        - ENTITY_TYPE_ALERTS
        - ENTITY_TYPE_ALERT_DEFS
        - ENTITY_TYPE_AUDIT_EVENTS
        - ENTITY_TYPE_DASHBOARDS
        - ENTITY_TYPE_ENRICHMENT_RULES
        - ENTITY_TYPE_MOBILE_LOGS
        - ENTITY_TYPE_NOTIFICATION_DELIVERIES
        - ENTITY_TYPE_SCHEMA_FIELDS
        - ENTITY_TYPE_TEXT
        - ENTITY_TYPE_BROWSER_EVENTS
        - ENTITY_TYPE_AI_EVALUATIONS
        - ENTITY_TYPE_ENGINE_QUERIES
        - ENTITY_TYPE_ENGINE_SCHEMA_FIELDS
        - ENTITY_TYPE_NOTIFICATION_REQUESTS
        - ENTITY_TYPE_INFRA_MONITORING_EVENTS
        - ENTITY_TYPE_LABS_LIMIT_VIOLATIONS
        - ENTITY_TYPE_QUOTA_EVENTS
        - ENTITY_TYPE_METRICS
        - ENTITY_TYPE_SPANS
        - ENTITY_TYPE_SESSION_RECORDINGS
        - ENTITY_TYPE_DSYM
        - ENTITY_TYPE_FILES
        - ENTITY_TYPE_MOBILE_SNAPSHOTS
        - ENTITY_TYPE_PROGUARD
        - ENTITY_TYPE_SOURCE_MAPS
        - ENTITY_TYPE_SESSION_SNAPSHOTS
        - ENTITY_TYPE_CPU_PROFILES
        - ENTITY_TYPE_EVENTS
      type: string
    v1alpha.Pillar:
      enum:
        - PILLAR_UNSPECIFIED
        - PILLAR_LOGS
        - PILLAR_METRICS
        - PILLAR_SPANS
        - PILLAR_BINARY
        - PILLAR_PROFILES
        - PILLAR_EVENTS
      type: string
    v2.Action:
      type: object
      properties:
        applicationNames:
          type: array
          items:
            type: string
        createdBy:
          type: string
        id:
          type: string
        isHidden:
          type: boolean
        isPrivate:
          type: boolean
        name:
          type: string
        sourceType:
          $ref: '#/components/schemas/v2.SourceType'
        subsystemNames:
          type: array
          items:
            type: string
        url:
          type: string
    v2.Aggregation:
      oneOf:
        - title: Aggregation
          type: object
          properties:
            aggType:
              $ref: '#/components/schemas/AggType'
            enabled:
              type: boolean
            samples:
              $ref: '#/components/schemas/E2MAggSamples'
            targetMetricName:
              type: string
              example: alias_field_name_agg_func
          additionalProperties: false
          description: This data structure represents an aggregation
          externalDocs:
            description: Find out more about events2metrics
            url: >-
              https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
        - title: Aggregation
          type: object
          properties:
            aggType:
              $ref: '#/components/schemas/AggType'
            enabled:
              type: boolean
            histogram:
              $ref: '#/components/schemas/E2MAggHistogram'
            targetMetricName:
              type: string
              example: alias_field_name_agg_func
          additionalProperties: false
          description: This data structure represents an aggregation
          externalDocs:
            description: Find out more about events2metrics
            url: >-
              https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    v2.CustomRole:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        parentRoleId:
          type: integer
          format: int64
        parentRoleName:
          type: string
        permissions:
          type: array
          items:
            type: string
        roleId:
          type: integer
          format: int64
        teamId:
          type: integer
          format: int64
    v2.DateRange:
      title: Date Range
      type: object
      properties:
        fromDate:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
        toDate:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
      description: This data structure represents a date range.
      externalDocs:
        description: Find out more about data usage.
        url: >-
          https://coralogix.com/docs/user-guides/account-management/payment-and-billing/data-usage/
    v2.GB:
      type: object
      properties:
        value:
          type: number
          format: float
    v2.LogsQuery:
      title: SpansQuery
      type: object
      properties:
        alias:
          type: string
          example: new_query
        applicationnameFilters:
          type: array
          items:
            type: string
            example: app_name
        lucene:
          type: string
          example: 'log_obj.numeric_field: [50 TO 100]'
        severityFilters:
          type: array
          items:
            $ref: '#/components/schemas/logs2metrics.v2.Severity'
        subsystemnameFilters:
          type: array
          items:
            type: string
            example: sub_name
      description: This data structure represents a query for logs.
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    v2.MetricField:
      title: Metric Field
      required:
        - targetBaseMetricName
        - sourceField
        - aggregations
      type: object
      properties:
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/v2.Aggregation'
        sourceField:
          type: string
          example: log_obj.numeric_field
        targetBaseMetricName:
          pattern: ^[\w/-]+$
          type: string
          example: alias_field_name
      description: This data structure represents a metric field
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    v2.OrderBy:
      title: Order By
      required:
        - fieldName
        - direction
      type: object
      properties:
        direction:
          $ref: '#/components/schemas/v2.OrderByDirection'
        fieldName:
          type: string
          example: field_name
      description: This data structure represents an order by clause in Coralogix APM.
      externalDocs:
        description: Find out more about SLOs in Coralogix APM
        url: >-
          https://coralogix.com/academy/get-to-know-coralogix/slo-sli-management-in-coralogix-apm/
    v2.OrderByDirection:
      enum:
        - ORDER_BY_DIRECTION_UNSPECIFIED
        - ORDER_BY_DIRECTION_ASC
        - ORDER_BY_DIRECTION_DESC
      type: string
    v2.Permissions:
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
    v2.Pillar:
      enum:
        - PILLAR_UNSPECIFIED
        - PILLAR_METRICS
        - PILLAR_LOGS
        - PILLAR_SPANS
        - PILLAR_BINARY
        - PILLAR_PROFILES
      type: string
    v2.Priority:
      enum:
        - PRIORITY_UNSPECIFIED
        - PRIORITY_LOW
        - PRIORITY_MEDIUM
        - PRIORITY_HIGH
        - PRIORITY_BLOCKED
      type: string
    v2.Range:
      enum:
        - RANGE_UNSPECIFIED
        - RANGE_CURRENT_MONTH
        - RANGE_LAST_30_DAYS
        - RANGE_LAST_90_DAYS
        - RANGE_LAST_WEEK
      type: string
    v2.SetActiveRequest:
      title: Set Active Request
      required:
        - teamId
        - isActive
      type: object
      properties:
        isActive:
          type: boolean
        teamId:
          type: integer
          format: int64
      description: >-
        This data structure is used to activate or deactivate a SAML identity
        provider
      externalDocs:
        description: Find out more about enrichments
        url: >-
          https://coralogix.com/docs/user-guides/data-transformation/enrichments/custom-enrichment/
    v2.SetActiveResponse:
      type: object
    v2.SourceType:
      enum:
        - SOURCE_TYPE_UNSPECIFIED
        - SOURCE_TYPE_LOG
        - SOURCE_TYPE_DATA_MAP
      type: string
    v2.SpansQuery:
      title: SpansQuery
      type: object
      properties:
        actionFilters:
          type: array
          items:
            type: string
            example: myAction
        applicationnameFilters:
          type: array
          items:
            type: string
            example: myApp
        lucene:
          type: string
          example: applicationName:myApp
        serviceFilters:
          type: array
          items:
            type: string
            example: myService
        subsystemnameFilters:
          type: array
          items:
            type: string
            example: mySubsystem
      description: This data structure represents a query for spans.
      externalDocs:
        description: Find out more about events2metrics
        url: >-
          https://coralogix.com/docs/user-guides/monitoring-and-insights/events2metrics/
    v2.SystemRole:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
        roleId:
          type: integer
          format: int64
    v2.TcoTier:
      enum:
        - TCO_TIER_UNSPECIFIED
        - TCO_TIER_LOW
        - TCO_TIER_MEDIUM
        - TCO_TIER_HIGH
        - TCO_TIER_BLOCKED
      type: string
    v2.TeamId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    v2.TeamInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/v2.TeamId'
        organisationId:
          $ref: '#/components/schemas/OrganisationId'
        organisationName:
          type: string
    v2.Unit:
      type: object
      properties:
        value:
          type: number
          format: float
    v2.User:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        userAccountId:
          $ref: '#/components/schemas/v2.UserAccountId'
        username:
          type: string
    v2.UserAccountId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    v2.UserId:
      type: object
      properties:
        id:
          type: string
    v3.AutoRetireTimeframe:
      enum:
        - AUTO_RETIRE_TIMEFRAME_NEVER_OR_UNSPECIFIED
        - AUTO_RETIRE_TIMEFRAME_MINUTES_5
        - AUTO_RETIRE_TIMEFRAME_MINUTES_10
        - AUTO_RETIRE_TIMEFRAME_HOUR_1
        - AUTO_RETIRE_TIMEFRAME_HOURS_2
        - AUTO_RETIRE_TIMEFRAME_HOURS_6
        - AUTO_RETIRE_TIMEFRAME_HOURS_12
        - AUTO_RETIRE_TIMEFRAME_HOURS_24
      type: string
    v3.ConnectorConfigField:
      title: Connector config field
      required:
        - fieldName
        - template
      type: object
      properties:
        fieldName:
          type: string
          description: The name of the configuration field
          example: description
        template:
          type: string
          description: The template for the configuration field
          example: template_example
      externalDocs:
        url: ''
    v3.EventMetricMoreThanUsual:
      type: object
      properties:
        dynamicAlertMatch:
          $ref: '#/components/schemas/DynamicAlertMatch'
    v3.EventMetricMoreThanUsualEnriched:
      type: object
      properties:
        eventMetricMoreThanUsual:
          $ref: '#/components/schemas/v3.EventMetricMoreThanUsual'
        prediction:
          $ref: '#/components/schemas/v3.Prediction'
    v3.EventStandardMoreThanUsual:
      type: object
      properties:
        fromTimestamp:
          type: string
          format: date-time
        hitValue:
          type: string
          format: int64
        toTimestamp:
          type: string
          format: date-time
    v3.FilterOperator:
      enum:
        - FILTER_OPERATOR_AND_OR_UNSPECIFIED
        - FILTER_OPERATOR_OR
      type: string
    v3.Group:
      oneOf:
        - title: Alert notification group
          required:
            - status
            - suppressed
            - priority
            - keyValues
          type: object
          properties:
            keyValues:
              type: object
              additionalProperties:
                type: string
            logsImmediate:
              $ref: '#/components/schemas/LogsImmediateNotification'
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            status:
              $ref: '#/components/schemas/AlertStatus'
            suppressed:
              type: boolean
          additionalProperties: false
          description: A group of related alerts with the same status
          externalDocs:
            url: ''
        - title: Alert notification group
          required:
            - status
            - suppressed
            - priority
            - keyValues
          type: object
          properties:
            keyValues:
              type: object
              additionalProperties:
                type: string
            logsThreshold:
              $ref: '#/components/schemas/LogsThresholdNotification'
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            status:
              $ref: '#/components/schemas/AlertStatus'
            suppressed:
              type: boolean
          additionalProperties: false
          description: A group of related alerts with the same status
          externalDocs:
            url: ''
        - title: Alert notification group
          required:
            - status
            - suppressed
            - priority
            - keyValues
          type: object
          properties:
            keyValues:
              type: object
              additionalProperties:
                type: string
            metricThreshold:
              $ref: '#/components/schemas/MetricThresholdNotification'
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            status:
              $ref: '#/components/schemas/AlertStatus'
            suppressed:
              type: boolean
          additionalProperties: false
          description: A group of related alerts with the same status
          externalDocs:
            url: ''
        - title: Alert notification group
          required:
            - status
            - suppressed
            - priority
            - keyValues
          type: object
          properties:
            keyValues:
              type: object
              additionalProperties:
                type: string
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            sloBurnRateThreshold:
              $ref: '#/components/schemas/SloBurnRateThresholdNotification'
            status:
              $ref: '#/components/schemas/AlertStatus'
            suppressed:
              type: boolean
          additionalProperties: false
          description: A group of related alerts with the same status
          externalDocs:
            url: ''
        - title: Alert notification group
          required:
            - status
            - suppressed
            - priority
            - keyValues
          type: object
          properties:
            keyValues:
              type: object
              additionalProperties:
                type: string
            priority:
              $ref: '#/components/schemas/AlertDefPriority'
            sloErrorBudgetThreshold:
              $ref: '#/components/schemas/SloErrorBudgetThresholdNotification'
            status:
              $ref: '#/components/schemas/AlertStatus'
            suppressed:
              type: boolean
          additionalProperties: false
          description: A group of related alerts with the same status
          externalDocs:
            url: ''
    v3.IntegrationType:
      oneOf:
        - title: Integration type
          type: object
          properties:
            integrationId:
              type: integer
              description: The integration ID for the notification
              format: int64
              example: 123
          additionalProperties: false
          description: Defines the type of integration to use for notifications
          externalDocs:
            url: ''
        - title: Integration type
          type: object
          properties:
            recipients:
              $ref: '#/components/schemas/Recipients'
          additionalProperties: false
          description: Defines the type of integration to use for notifications
          externalDocs:
            url: ''
    v3.LogsFilter:
      title: Log filter
      type: object
      properties:
        simpleFilter:
          $ref: '#/components/schemas/LogsSimpleFilter'
      additionalProperties: false
      description: Filter configuration for log-based alerts
      externalDocs:
        url: ''
    v3.MessageConfigField:
      title: Message config field
      required:
        - fieldName
        - template
      type: object
      properties:
        fieldName:
          type: string
          description: The name of the configuration field
          example: description
        template:
          type: string
          description: The template for the configuration field
          example: template_example
      description: Configuration field for a notification message
      externalDocs:
        url: ''
    v3.Prediction:
      type: object
      properties:
        predictionTimestampMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v3.PredictionProperties'
    v3.Prediction.PredictionTimestampMapEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/v3.PredictionProperties'
    v3.PredictionProperties:
      type: object
      properties:
        lowerLimit:
          type: number
          format: double
        upperLimit:
          type: number
          format: double
    v3.Priority:
      title: Alert definition priority
      required:
        - value
        - name
      type: object
      properties:
        name:
          type: string
          description: String representation of the priority
        value:
          $ref: '#/components/schemas/AlertDefPriority'
      description: Defines the priority of an alert definition
      externalDocs:
        url: ''
    v3.SearchDetails:
      type: object
      properties:
        fromTimestamp:
          type: string
          format: date-time
        interval:
          $ref: '#/components/schemas/v3.SearchDetailsInterval'
        toTimestamp:
          type: string
          format: date-time
    v3.SearchDetailsInterval:
      type: object
      properties:
        durationMs:
          type: string
          format: int64
        name:
          type: string
    v3.SetActiveRequest:
      title: Enable/disable alert request
      required:
        - id
        - active
      type: object
      properties:
        active:
          type: boolean
          description: Whether to enable or disable the alert definition
          example: true
        id:
          type: string
          description: The alert definition ID
          example: 123e4567-e89b-12d3-a456-426614174000
      description: A request to enable or disable an alert
      externalDocs:
        url: ''
    v3.SetActiveResponse:
      title: Set active response
      type: object
      description: Response after enabling or disabling an alert definition
      externalDocs:
        url: ''
    v3.SloDefinition:
      title: SLO Definition
      required:
        - sloId
      type: object
      properties:
        sloId:
          type: string
          description: The SLO ID
          example: 123e4567-e89b-12d3-a456-426614174000
      description: Configuration for SLO definition
      externalDocs:
        url: ''
    v3.SourceOverrides:
      title: Source overrides
      required:
        - payloadType
        - messageConfigFields
        - connectorConfigFields
      type: object
      properties:
        connectorConfigFields:
          type: array
          items:
            $ref: '#/components/schemas/v3.ConnectorConfigField'
        messageConfigFields:
          type: array
          items:
            $ref: '#/components/schemas/v3.MessageConfigField'
        payloadType:
          type: string
          description: the payload type for the notification
          example: >-
            slack_raw, slack_structured, pagerduty_triggered,
            pagerduty_resolved, generic_https_default
      externalDocs:
        url: ''
    v3.Span:
      type: object
      properties:
        startTime:
          type: string
          format: date-time
        traceId:
          type: string
    v3.TimeRange:
      title: Time range
      required:
        - startTime
        - endTime
      type: object
      properties:
        endTime:
          type: string
          description: End time of the range
          format: date-time
        startTime:
          type: string
          description: Start time of the range
          format: date-time
      description: Represents a time range with start and end timestamps
      externalDocs:
        url: ''
    v3.UndetectedValuesManagement:
      title: Undetected value management
      required:
        - autoRetireRatio
      type: object
      properties:
        autoRetireTimeframe:
          $ref: '#/components/schemas/v3.AutoRetireTimeframe'
        triggerUndetectedValues:
          type: boolean
          description: Should trigger the alert when undetected values are detected
          example: true
      additionalProperties: false
      description: Configuration for handling undetected values in alerts
      externalDocs:
        url: ''
    v4.EventMetricLessThanUsual:
      type: object
      properties:
        lessThanUsual:
          $ref: '#/components/schemas/EventUnusualPayload'
    v4.EventMetricLessThanUsualEnriched:
      type: object
      properties:
        eventMetricLessThanUsual:
          $ref: '#/components/schemas/v4.EventMetricLessThanUsual'
        prediction:
          $ref: '#/components/schemas/v4.Prediction'
    v4.EventMetricMoreThanUsual:
      type: object
      properties:
        moreThanUsual:
          $ref: '#/components/schemas/EventUnusualPayload'
    v4.EventMetricMoreThanUsualEnriched:
      type: object
      properties:
        eventMetricMoreThanUsual:
          $ref: '#/components/schemas/v4.EventMetricMoreThanUsual'
        prediction:
          $ref: '#/components/schemas/v4.Prediction'
    v4.ExtremeSample:
      type: object
      properties:
        lowerLimit:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
        upperLimit:
          type: number
          format: double
        value:
          type: number
          format: double
    v4.Prediction:
      type: object
      properties:
        predictionTimestampMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v4.PredictionProperties'
    v4.Prediction.PredictionTimestampMapEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/v4.PredictionProperties'
    v4.PredictionProperties:
      type: object
      properties:
        lowerLimit:
          type: number
          format: double
        upperLimit:
          type: number
          format: double
    v4.SearchDetails:
      type: object
      properties:
        fromTimestamp:
          type: string
          format: date-time
        interval:
          $ref: '#/components/schemas/v4.SearchDetailsInterval'
        toTimestamp:
          type: string
          format: date-time
    v4.SearchDetailsInterval:
      type: object
      properties:
        durationMs:
          type: string
          format: int64
        name:
          type: string
    v5.EventMetricLessThanUsual:
      type: object
      properties:
        lessThanUsual:
          $ref: '#/components/schemas/EventMetricUnusualPayload'
    v5.EventMetricLessThanUsualEnriched:
      type: object
      properties:
        eventMetricLessThanUsual:
          $ref: '#/components/schemas/v5.EventMetricLessThanUsual'
        prediction:
          $ref: '#/components/schemas/v5.Prediction'
    v5.EventMetricMoreThanUsual:
      type: object
      properties:
        moreThanUsual:
          $ref: '#/components/schemas/EventMetricUnusualPayload'
    v5.EventMetricMoreThanUsualEnriched:
      type: object
      properties:
        eventMetricMoreThanUsual:
          $ref: '#/components/schemas/v5.EventMetricMoreThanUsual'
        prediction:
          $ref: '#/components/schemas/v5.Prediction'
    v5.EventStandardMoreThanUsual:
      type: object
      properties:
        moreThanUsual:
          $ref: '#/components/schemas/EventStandardUnusualPayload'
    v5.ExtremeSample:
      type: object
      properties:
        lowerLimit:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
        upperLimit:
          type: number
          format: double
        value:
          type: number
          format: double
    v5.Prediction:
      type: object
      properties:
        predictionTimestampMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v5.PredictionProperties'
    v5.Prediction.PredictionTimestampMapEntry:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/v5.PredictionProperties'
    v5.PredictionProperties:
      type: object
      properties:
        lowerLimit:
          type: number
          format: double
        upperLimit:
          type: number
          format: double
    views.v1.Filter:
      title: ViewFolder
      required:
        - name
        - selectedValues
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: Filter name
          example: applicationName
        selectedValues:
          type: object
          additionalProperties:
            type: boolean
          description: Filter selected values
          example:
            demo: true
            cs-rest-test1: true
      description: View folder.
      externalDocs:
        url: ''
    wide_parquet.v1.Version:
      enum:
        - VERSION_UNSPECIFIED
        - VERSION_V1
        - VERSION_V3
      type: string
    widgets.BarValueDisplay:
      enum:
        - BAR_VALUE_DISPLAY_UNSPECIFIED
        - BAR_VALUE_DISPLAY_TOP
        - BAR_VALUE_DISPLAY_INSIDE
        - BAR_VALUE_DISPLAY_BOTH
      type: string
    widgets.Dynamic:
      type: object
      properties:
        interpretation:
          $ref: '#/components/schemas/Interpretation'
        query:
          $ref: '#/components/schemas/Dynamic.Query'
        timeFrame:
          $ref: '#/components/schemas/TimeFrameSelect'
        visualization:
          $ref: '#/components/schemas/Visualization'
    widgets.Gauge:
      type: object
      properties:
        customUnit:
          type: string
          description: >-
            Custom unit (requires to have unit field set as 'custom' to take
            effect)
          example:
            value: kvs
        dataModeType:
          $ref: '#/components/schemas/widgets.common.DataModeType'
        decimal:
          type: integer
          description: >-
            Number indicating the decimal precision of the numeric values,
            within range 0-15
          format: int32
          example: 3
        decimalPrecision:
          type: boolean
          description: Whether to render numeric value without abbreviation
          example: false
        displaySeriesName:
          type: boolean
          description: >-
            (multigauge display only) Whether to show the series names above the
            value
        legend:
          $ref: '#/components/schemas/Legend'
        legendBy:
          $ref: '#/components/schemas/LegendBy'
        max:
          type: number
          description: >-
            A maximum gauge value used in percentage threshold calculation and
            for visual value representation
          format: double
          example: 150000
        min:
          type: number
          description: >-
            A minimum gauge value used in percentage threshold calculation and
            for visual value representation
          format: double
          example: 0
        query:
          $ref: '#/components/schemas/Gauge.Query'
        showInnerArc:
          type: boolean
          description: >-
            Whether to show the inner arc of gauge which graphically represents
            the value
          example: false
        showOuterArc:
          type: boolean
          description: >-
            Whether to show the outer arc of gauge which graphically represents
            the min/max range
          example: true
        thresholdBy:
          $ref: '#/components/schemas/Gauge.ThresholdBy'
        thresholdType:
          $ref: '#/components/schemas/ThresholdType'
        thresholds:
          type: array
          items:
            $ref: '#/components/schemas/Gauge.Threshold'
        unit:
          $ref: '#/components/schemas/Gauge.Unit'
    widgets.PieChart:
      type: object
      properties:
        colorScheme:
          type: string
          description: Applied color scheme, one of the predefined values
          example:
            value: classic
        customUnit:
          type: string
          description: >-
            Custom unit (requires the unit field to be set to custom to take
            effect)
          example:
            value: mph
        dataModeType:
          $ref: '#/components/schemas/widgets.common.DataModeType'
        decimal:
          type: integer
          description: >-
            Number indicating the decimal precision of the numeric values,
            within range 0-15
          format: int32
          example: 5
        decimalPrecision:
          type: boolean
          description: Whether to render numeric value without abbreviation
          example: false
        groupNameTemplate:
          type: string
          description: Custom template name for a group, can contain variables
          example:
            value: Slice - {{ variable }}
        hashColors:
          type: boolean
          description: Whether to ignore color scheme and derive colors from algorithm
          example: false
        labelDefinition:
          $ref: '#/components/schemas/widgets.PieChart.LabelDefinition'
        legend:
          $ref: '#/components/schemas/Legend'
        maxSlicesPerChart:
          type: integer
          description: Maximum number of slices on a chart
          format: int32
          example: 24
        minSlicePercentage:
          type: integer
          description: Minimum percentage threshold for slices to be displayed
          format: int32
          example: 5
        query:
          $ref: '#/components/schemas/PieChart.Query'
        showLegend:
          type: boolean
          description: Indicates whether to display the legend
        showTotal:
          type: boolean
          description: Whether to show the total amount as a title
          example: false
        stackDefinition:
          $ref: '#/components/schemas/PieChart.StackDefinition'
        unit:
          $ref: '#/components/schemas/common.Unit'
    widgets.PieChart.LabelDefinition:
      type: object
      properties:
        isVisible:
          type: boolean
          description: Are labels visible
        labelSource:
          $ref: '#/components/schemas/widgets.PieChart.LabelSource'
        showName:
          type: boolean
          description: Whether to show the name of slice in the label
        showPercentage:
          type: boolean
          description: Whether to show percentage value of slice in the label
        showValue:
          type: boolean
          description: Whether to show value of slice in the label
    widgets.PieChart.LabelSource:
      enum:
        - LABEL_SOURCE_UNSPECIFIED
        - LABEL_SOURCE_INNER
        - LABEL_SOURCE_STACK
      type: string
    widgets.common.DataModeType:
      enum:
        - DATA_MODE_TYPE_HIGH_UNSPECIFIED
        - DATA_MODE_TYPE_ARCHIVE
      type: string
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API key authentication
tags:
  - name: Presets service
    description: >-
      View and manage your presets - pre-configured templates for notification
      content rendering
    externalDocs:
      description: Lean more about presets in our documentation
      url: >-
        https://coralogix.com/docs/user-guides/notification-center/presets/introduction/
  - name: Actions Service
    description: A service for managing actions.
    externalDocs:
      url: ''
  - name: Views service
    description: Create and manage views.
    externalDocs:
      url: ''
  - name: Custom Enrichments Service
    description: Manage your enrichments.
    externalDocs:
      url: ''
  - name: API Keys Service
    description: Manage your API Keys.
    externalDocs:
      url: ''
  - name: Target Service
    description: View and manage your storage targets for logs.
    externalDocs:
      description: Find out more about archives
      url: >-
        https://coralogix.com/docs/user-guides/data-flow/s3-archive/connect-s3-archive/
  - name: Team Permissions Management Service
    description: Manage Team Groups.
    externalDocs:
      url: ''
  - name: Extension deployment service
    description: A service that enables querying for extension deployment information.
    externalDocs:
      description: Find out more about extensions in our documentation.
      url: https://coralogix.com/docs/integrations/extensions/
  - name: Extension testing service
    externalDocs:
      description: Find out more about extensions in our documentation.
      url: https://coralogix.com/docs/integrations/extensions/
  - name: Contextual data integration service
    description: Query for contextual data integration information.
    externalDocs:
      url: ''
  - name: IP access service
    description: >-
      IP access service provides the API for managing company IP access
      settings.
    externalDocs:
      url: ''
  - name: Alert events service
    description: >-
      Get information regarding your alert events - instances of alerts being
      triggered.
    externalDocs:
      description: Learn more about alert events and incidents in our documentation.
      url: https://coralogix.com/docs/user-guides/alerting/incidents/
  - name: Integration service
    description: A service that enables querying for integration information.
    externalDocs:
      description: Find out more about integrations in our documentation.
      url: https://coralogix.com/docs/integrations/getting-started/
  - name: Dashboard service
    description: Manage your dashboards.
    externalDocs:
      url: ''
  - name: Enrichments Service
    description: Manage your enrichments.
    externalDocs:
      url: ''
  - name: Events2Metrics Service
    description: Manage your events2metrics.
    externalDocs:
      url: ''
  - name: Events Service
    description: A service for querying events.
    externalDocs:
      description: Learn more about alerts in our documentation
      url: https://coralogix.com/docs/user-guides/alerting/introduction-to-alerts/
  - name: Extension service
    description: A service that enables querying for extension information.
    externalDocs:
      description: Learn more about extensions in our documentation.
      url: https://coralogix.com/docs/integrations/extensions/
  - name: Outgoing webhooks service
    externalDocs:
      description: Find out more about outbound webhooks in our documentation.
      url: >-
        https://coralogix.com/docs/user-guides/alerting/outbound-webhooks/generic-outbound-webhooks-alert-webhooks/
  - name: Connectors service
    description: >-
      View and manage your connectors - integration instances for notification
      destinations
    externalDocs:
      description: Lean more about connectors in our documentation
      url: >-
        https://coralogix.com/docs/user-guides/notification-center/connectors/introduction/
  - name: Role Management Service
    description: Service for managing system and custom roles.
    externalDocs:
      url: ''
  - name: Dashboard folders service
    description: Manage your dashboard folders.
    externalDocs:
      url: ''
  - name: Entities service
    description: Query information about registered entities in the notification center
    externalDocs:
      description: Lean more about the notification center in our documentation
      url: https://coralogix.com/docs/user-guides/notification-center/introduction/
  - name: Alert definitions service
    description: >-
      View and manage your alerts using alert definitions - data structures that
      contain the configuration required to create an alert.
    externalDocs:
      description: Learn more about alerts in our documentation
      url: https://coralogix.com/docs/user-guides/alerting/introduction-to-alerts/
  - name: Dashboard service
    description: Get information about the Coralogix Dashboard catalog.
    externalDocs:
      url: ''
  - name: SAML Configuration Service
    description: Manage your SAML configuration
    externalDocs:
      url: ''
  - name: Slos Service
    description: A service for managing Service Level Objectives (SLOs).
    externalDocs:
      url: ''
  - name: Folders for views service
    description: Create and manage view folders.
    externalDocs:
      url: ''
  - name: Scopes Service
    description: A service to manage scopes
    externalDocs:
      url: ''
  - name: Incidents service
    description: >-
      Handle all operations related to incident management within Coralogix.
      Identify, manage, and resolve incidents efficiently through automated
      workflows and team collaboration.
    externalDocs:
      description: Find out more about incident management in our documentation
      url: https://coralogix.com/docs/user-guides/alerting/incidents/
  - name: Data Usage Service
    description: A service to manage data usage metrics.
    externalDocs:
      url: ''
  - name: Alert Scheduler Rule service
    description: Manage your alert scheduler rules.
    externalDocs:
      url: ''
  - name: SLO Service
    description: Manage your SLOs.
    externalDocs:
      url: ''
  - name: Global routers service
    description: >-
      View and manage your global routers - entities that direct notifications
      to configured destinations based on conditions
    externalDocs:
      description: Lean more about global routers in our documentation
      url: >-
        https://coralogix.com/docs/user-guides/notification-center/routing/introduction/
servers:
  - url: https://api.coralogix.com/mgmt/openapi
  - url: https://api.eu2.coralogix.com/mgmt/openapi
  - url: https://api.coralogix.us/mgmt/openapi
  - url: https://api.cx498.coralogix.com/mgmt/openapi
  - url: https://api.coralogix.in/mgmt/openapi
  - url: https://api.coralogixsg.com/mgmt/openapi
  - url: https://api.ap3.coralogix.com/mgmt/openapi
security:
  - apiKeyAuth: []
